import logging
import azure.functions as func
import json
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage
from langchain.callbacks import get_openai_callback

# ---------------- HARD CODED CONFIG ---------------- #
CONFIG = {
    "azure_openai": {
        "endpoint": "https://testopenaiassets.openai.azure.com",
        "deployment_name": "o4-mini-mulesoft",
        "api_key": "<PUT-YOUR-AZURE-OPENAI-KEY-HERE>",
        "api_version": "2025-01-01-preview",
        "api_type": "azure"
    }
}

# ---------------- CLIENT FACTORY ---------------- #
def get_openai_client(config):
    return AzureChatOpenAI(
        deployment_name=config["deployment_name"],
        openai_api_base=config["endpoint"],
        openai_api_key=config["api_key"],
        openai_api_version=config["api_version"],
        temperature=1,
        # max_tokens=4096
    )

# ---------------- PROMPTS ---------------- #
conversion_prompt = {
    "xslt_to_dwl": (""" 
    You are a **MuleSoft DataWeave (DWL) script generator**.  
    Your job: **convert the provided XSLT into an equivalent Dataweave script** that reproduces the same transformation.
    [PROMPT TEXT TRUNCATED FOR BREVITY, KEEP AS-IS FROM YOUR CODE]
    """.strip())
}

validateprompt = """ 
You are a **MuleSoft DataWeave (DWL) script generator**.  
Your job: **remove the syntax errors found in the provided DataWeave (DWL) script and produce an error free DataWeave (DWL) script**
[KEEP THE FULL VALIDATE PROMPT AS-IS FROM YOUR CODE]
"""

# ---------------- CORE FUNCTION ---------------- #
def generate_and_validate_script(client, file_content, agent_name):
    try:
        messages = [
            SystemMessage(content=conversion_prompt["xslt_to_dwl"]),
            HumanMessage(content=file_content)
        ]

        with get_openai_callback() as cb:
            result = client.invoke(messages)
            final_response = result.content.strip()
            final_response += "\n\n--- Token Usage ---"
            final_response += f"\nTotal Tokens: {cb.total_tokens}"
            final_response += f"\nPrompt Tokens: {cb.prompt_tokens}"
            final_response += f"\nCompletion Tokens: {cb.completion_tokens}"
            final_response += f"\nTotal Cost (USD): ${format(cb.total_cost, '.6f')}"
            return final_response

    except Exception as e:
        logging.error(f"Error during model invocation: {e}")
        raise

# ---------------- AZURE FUNCTION ENTRY ---------------- #
app = func.FunctionApp(http_auth_level=func.AuthLevel.ANONYMOUS)

@app.function_name(name="xslt2dwl")
@app.route(route="xslt2dwl", methods=["POST"])
def xslt2dwl(req: func.HttpRequest) -> func.HttpResponse:
    logging.info("Processing XSLT to DWL request in Azure Function.")

    try:
        req_body = req.get_json()
        xslt_file_content = req_body.get("xslt", None)

        if not xslt_file_content:
            return func.HttpResponse(
                json.dumps({"error": "Missing 'xslt' in request body"}),
                status_code=400,
                mimetype="application/json"
            )

        client = get_openai_client(CONFIG["azure_openai"])
        result = generate_and_validate_script(client, xslt_file_content, "xslt_to_dwl")

        return func.HttpResponse(
            json.dumps({"response": result}),
            status_code=200,
            mimetype="application/json"
        )

    except Exception as e:
        logging.error(f"Error in Azure Function: {e}")
        return func.HttpResponse(
            json.dumps({"error": str(e)}),
            status_code=500,
            mimetype="application/json"
        )