do component register multiple beans
No, not directly. A single class annotated with @Component registers only one bean, which is an instance of that class itself.

If you want to register multiple beans, each with their own logic or configuration, you need to use:

@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }

    @Bean
    public ObjectMapper objectMapper() {
        return new ObjectMapper();
    }
}

What is Spring Boot Admin?
Spring Boot Admin is a web-based dashboard for managing and monitoring Spring Boot applications in real-time. It gives you a centralized UI to view the health, metrics, logs, environment variables, and other actuator endpoints of your services.


<!-- pom.xml -->
<dependency>
    <groupId>de.codecentric</groupId>
    <artifactId>spring-boot-admin-starter-server</artifactId>
</dependency>

// AdminServerApplication.java
@SpringBootApplication
@EnableAdminServer
public class AdminServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(AdminServerApplication.class, args);
    }
}

‚ÄúSpring Boot Admin provides a central dashboard to monitor and manage Spring Boot apps in real-time using Spring Actuator. It helps us visualize health, metrics, and logs, especially useful in microservices environments

Actuator = raw metrics provider
Spring Boot Admin = GUI built on top of Actuator


Q: What is a memory leak in Java? How do you detect and fix it?
A: A memory leak occurs when objects are no longer needed but still referenced, preventing GC. I use tools like VisualVM or Eclipse MAT to detect leaks by analyzing heap dumps. To fix them, I look for static references, long-living collections, or unremoved listeners.
1.	

What are different GC algorithms in Java?
A: Serial GC (simple, single-threaded), Parallel GC (multi-threaded), CMS (concurrent, now deprecated), G1 (region-based, default in Java 9+), ZGC and Shenandoah (for ultra-low latency and large heaps). G1 is most commonly used today as it balances throughput and pause time.

Young Generation:
o	Newly created objects.
o	Subdivided into Eden, Survivor S0, Survivor S1.
o	Minor GC happens here (frequent, fast).
2.	Old Generation:
o	Long-lived objects (promoted from young).
o	Full GC happens here (less frequent, more expensive).
3.	Metaspace:
o	Stores class metadata (replaced PermGen in Java 8).


when sql and no sql 
I choose SQL when I need transactional integrity and complex querying. I choose NoSQL for scale, speed, or when the schema is flexible ‚Äî for example, storing logs, analytics, or JSON documents.‚Äù
Choosing between SQL (relational) and NoSQL (non-relational) databases depends on the type of data, scalability needs, query complexity, and consistency requirements of your application.

‚úÖ When to Use SQL (Relational DBs)
üíæ Examples: MySQL, PostgreSQL, Oracle, SQL Server
üìå Use when:
1.	Structured data with clear schema
o	Tables with columns and fixed data types
2.	Strong data consistency is critical
o	E.g., banking, payments, inventory
3.	Complex JOINs and relationships are needed
o	Normalized tables with foreign keys
4.	ACID transactions are important
o	Atomicity, Consistency, Isolation, Durability
5.	Predefined schema and data doesn‚Äôt change frequently
‚úÖ Real-World Examples:
‚Ä¢	Banking systems (transaction accuracy is crucial)
‚Ä¢	E-commerce order/invoice processing
‚Ä¢	HR and payroll management



‚úÖ When to Use NoSQL (Non-Relational DBs)
üíæ Examples:
‚Ä¢	Document: MongoDB, CouchDB
‚Ä¢	Key-Value: Redis, DynamoDB
‚Ä¢	Column Store: Cassandra, HBase
‚Ä¢	Graph: Neo4j
üìå Use when:
1.	Schema-less or semi-structured data
o	JSON, XML, logs, flexible fields
2.	High scalability and large volume of data
o	Horizontal scaling (adding more servers)
3.	Fast read/write access
o	Real-time analytics, caching
4.	Frequent schema changes expected
5.	High availability with eventual consistency is okay
o	E.g., social media timelines
‚úÖ Real-World Examples:
‚Ä¢	Product catalogs (each product may have different fields)
‚Ä¢	IoT data storage (high velocity, variable format)
‚Ä¢	Real-time analytics dashboards
‚Ä¢	Chat or messaging systems

