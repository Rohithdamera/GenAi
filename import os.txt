update the below code , according to my requirements , if i ask question like (generate java project name as AWS_Connector by taking this path as a reference C:\Users\rdamera\Downloads\osif-java-cg-candidate) it need to generate the entire java project using reference path to generate the project the generated need to be stored in this path("C:/Users/rdamera/Downloads/ddddd"), do what ever changes need to change just change in the code , use less java code , keep more instruction and prompt , so the the generated java project structure remains to be same as the reference java project path, pom.xml , controllers , service etc everything need to be same , only change is to in the reference java  folders names, with actual provided name  for example if ask like  generate java project name as AWS_Connector it need to replace  reference project folder name (osif-java-cg-candidate) with the provided name by user  
ex(AWS_Connector)

reference project structure:-
1. C:\Users\rdamera\Downloads\osif-java-cg-candidate\osif-java-cg-candidate\osif-java-cg-candidate\src\main\java\com\example\osif_java_cg_candidate\main_method(OsifJavaCgCandidateApplication)

2. 1. C:\Users\rdamera\Downloads\osif-java-cg-candidate\osif-java-cg-candidate\osif-java-cg-candidate\src\main\test\com\example\osif_java_cg_candidate\main_method(OsifJavaCgCandidateApplicationTests)

expected project structure:
1.C:\Users\rdamera\Downloads\AWS_Connector\AWS_Connector\AWS_Connector\src\main\java\com\example\AWS_Connector\aws_connectorApplication_main

2.C:\Users\rdamera\Downloads\AWS_Connector\AWS_Connector\AWS_Connector\src\test\java\com\example\AWS_Connector\aws_connectorApplication_mainTests



the project structure will get changed for every project, so it need to identity reference folder names and its sub folders names and need to replace with user provided names where it need to declare , use tools if possible ,dont hard code anything , based on instruction, and prompt it need to generate the names based on user provided names like  ( AWS_Connector or gcp_connector), use tools if possible to identify  were ever project folders names to be replaced with user provided name, also dont generate the code inside of any folder, like controllers, repo etc , only main method need to be generated and main method name need to be replace with user provided name 



dont follow below approach 


    # Write main class
    main_dir = target_path / "src" / "main" / "java" / "com" / "example" / new_project_name
    main_dir.mkdir(parents=True, exist_ok=True)
    (main_dir / f"{new_project_name}Application.java").write_text(code["main_class"], encoding="utf-8")

    # Write test class
    test_dir = target_path / "src" / "test" / "java" / "com" / "example" / new_project_name
    test_dir.mkdir(parents=True, exist_ok=True)
    (test_dir / f"{new_project_name}ApplicationTests.java").write_text(code["test_class"], encoding="utf-8")

    return str(target_path), 


AI only need to decide what to change to generate accurate java project , make this entire code as a agent based 




code:-


import gradio as gr
from langgraph.prebuilt import create_react_agent
from langchain_openai import AzureChatOpenAI
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.tools import tool
from langchain.callbacks.tracers import ConsoleCallbackHandler
from langchain_community.callbacks import get_openai_callback
import io
import sys

#create a local reference to remote llm model
llm = AzureChatOpenAI(
    deployment_name="gpt-4_complex_conversions",
    azure_endpoint="https://testopenaiassets.openai.azure.com",
    openai_api_key="",
    openai_api_version="2025-01-01-preview",
    #verbose=False
)

@tool
def save_graph_png() -> str:
    """
    Generates a visual graph of the agent's internal structure using Mermaid,
    saves it as a PNG file named 'graph.png', and returns a local URL for download.

    Returns:
        str: A message confirming that if the graph has been saved and a link to download.
    """
    png_data = agent.get_graph().draw_mermaid_png()
    file_path = "graph.png"
    with open(file_path, "wb") as f:
        f.write(png_data)
    return (
        " Graph saved successfully!\n\n"
        "!Graph Preview\n\n"
        " Download " +file_path
    )




agent = create_react_agent(
    model=llm,
    tools=[save_graph_png],
    # Add verbose=True to enable logging
    verbose=True
)

# Define the chatbot function
def chat_with_agent(message, history):
    messages = []
    for user_msg, bot_msg in history:
        messages.append(HumanMessage(content=user_msg))
        messages.append(AIMessage(content=bot_msg))
    messages.append(HumanMessage(content=message))

    try:
        with get_openai_callback() as cb: # Use the callback context manager
            result = agent.invoke(
                {"messages": messages},
                config={"callbacks": [ConsoleCallbackHandler()]}
            )
            final_response = result["messages"][-1].content
            # Append the token usage and cost information to the final_response
            final_response += "\n\n--- Token Usage ---"
            final_response += f"\nTotal Tokens: {cb.total_tokens}"
            final_response += f"\nPrompt Tokens: {cb.prompt_tokens}"
            final_response += f"\nCompletion Tokens: {cb.completion_tokens}"
            final_response += f"\nTotal Cost (USD): ${format(cb.total_cost, '.6f')}"
    finally:
         print("+++")

  
    return final_response




# Create the Gradio interface
chatbot_ui = gr.ChatInterface(
    fn=chat_with_agent,
    title=" OSIF Co-Developer",
    description="Your co-developer for OSIF development",
    theme="default"
)

# Launch the app
chatbot_ui.launch(debug=False)





