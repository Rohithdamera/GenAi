import json
import base64
import logging
import random
import string
import re
from base64 import b64decode
from Crypto.Cipher import AES

# Initialize logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------------------
# Utility Functions
# ------------------------------
def unpad(data):
    """Remove padding from decrypted data."""
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    """Decrypt data using AES encryption."""
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Error during decryption: {e}")
        raise ValueError(f"Error during decryption: {e}")

def detect_and_extract_json(content):
    """Try to parse content as JSON, handling edge cases."""
    try:
        return json.loads(content)
    except json.JSONDecodeError:
        pass

    json_start = content.find('{')
    if json_start == -1:
        raise ValueError("No JSON object found in file content.")

    json_text = content[json_start:]
    try:
        return json.loads(json_text)
    except json.JSONDecodeError:
        raise ValueError("Embedded JSON block could not be parsed.")

# ------------------------------
# Data Generation Helpers
# ------------------------------
def random_datetime():
    """Generate a random date/time string in dd/mm/yyyy hh:mm:ss format."""
    return f"{random.randint(1,28):02}/{random.randint(1,12):02}/2025 {random.randint(0,23):02}:{random.randint(0,59):02}:{random.randint(0,59):02}"

def random_id():
    """Generate a random identifier string of 24 lowercase alphanumerics."""
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=24))

def random_string_like(value):
    """Generate a random string with the same length as the sample value.
       If the sample contains special date-like characters, generate a random date.
    """
    if isinstance(value, str):
        # If the value contains a slash or dash and matches a date-like pattern, produce a date.
        if re.search(r'\d{1,2}[/-]\d{1,2}[/-]\d{2,4}', value):
            return random_datetime()
        else:
            return ''.join(random.choices(string.ascii_letters + string.digits, k=len(value)))
    return value

def generate_random_value_by_sample(sample_value):
    """Generate a random value based on the type of sample_value."""
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif isinstance(sample_value, str):
        return random_string_like(sample_value)
    elif sample_value is None:
        return None
    return sample_value

def generate_random_structure(template):
    """Recursively generate a random structure that mimics the template.
       This generator inspects key names (if available) to decide if a special format is needed.
    """
    if isinstance(template, dict):
        new_dict = {}
        for k, v in template.items():
            # For simple (non-container) values, check for field-specific names.
            if not isinstance(v, (dict, list)):
                lowered = k.lower()
                if "date" in lowered:
                    new_dict[k] = random_datetime()
                elif "id" in lowered:
                    new_dict[k] = random_id()
                else:
                    new_dict[k] = generate_random_value_by_sample(v)
            else:
                new_dict[k] = generate_random_structure(v)
        return new_dict
    elif isinstance(template, list):
        return [generate_random_structure(item) for item in template]
    else:
        return generate_random_value_by_sample(template)

# ------------------------------
# Event Header Extraction
# ------------------------------
def get_model_instance_name(event):
    """Retrieve model instance name from headers or generate a random one if not provided."""
    headers = event.get('headers', {})
    return headers.get('model_instance_name',
                       'chatbot_' + ''.join(random.choices(string.ascii_lowercase + string.digits, k=6)))

def get_count_from_headers(event):
    """Retrieve the count from headers or default to 1."""
    try:
        return max(1, int(event.get('headers', {}).get('count', '1')))
    except Exception:
        return 1

def build_dynamic_prompt(model_instance_name):
    """Build a dynamic prompt describing the requirements for the JSON payload generation."""
    return (
        f"You are an expert RAML analyzer working with the model instance '{model_instance_name}'. "
        "Analyze the provided RAML (or similar JSON template) content and generate realistic randomized "
        "test payloads. The generated payload must preserve the field names, structure, and data types. "
        "For integer fields generate a valid integer, for string fields generate a string of similar length. "
        "If a field name contains 'id', generate a unique 24-character identifier (lowercase letters and digits). "
        "If a field name contains 'date', generate a date string in dd/mm/yyyy hh:mm:ss format. "
        "Return only valid, clean JSON without any explanations."
    )

# ------------------------------
# Lambda Handler
# ------------------------------
def lambda_handler(event, context):
    """Main Lambda function handler."""
    logger.info("Lambda function invoked.")
    try:
        # Retrieve and decode file content (base64 or plain text)
        body = event.get('body')
        if not body:
            raise ValueError("Missing file content in request.")

        if event.get('isBase64Encoded', False):
            raw_content = base64.b64decode(body).decode('utf-8', errors='replace')
        else:
            raw_content = body

        # Parse and extract JSON data from the content
        original_data = detect_and_extract_json(raw_content)

        # Extract model instance name and count from headers
        model_instance_name = get_model_instance_name(event)
        count = get_count_from_headers(event)
        prompt = build_dynamic_prompt(model_instance_name)

        logger.info(f"Model instance: {model_instance_name}, Dataset count: {count}")
        logger.debug(f"Prompt: {prompt}")

        # Generate the random datasets based on the template
        datasets = [generate_random_structure(original_data) for _ in range(count)]

        # Return the generated datasets along with the dynamic prompt that was used
        response_body = {
            "prompt": prompt,
            "datasets": datasets
        }

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(response_body, indent=2)
        }

    except Exception as e:
        logger.error(f"Error: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }
