import os
from pathlib import Path

from langchain.chat_models import AzureChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.agents import initialize_agent, Tool
from langchain.memory import ConversationBufferMemory

# Azure OpenAI Configuration
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="Fourth_Chatbot",
        openai_api_key="",  # Replace with your actual key
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        temperature=0.7,
        max_tokens=2000,
        top_p=0.9,
        frequency_penalty=0.2,
        presence_penalty=0.1
    )

# === Globals ===
project_path = r"C:\Users\rdamera\Downloads\OrderManagement 1"
last_file_list = []
combined_summaries = ""

# === TOOL 1: Auto-detect mule XML files in the project
def find_all_mule_xml_files(project_dir):
    xml_files = []
    for root, dirs, files in os.walk(project_dir):
        normalized_root = os.path.normpath(root)
        if normalized_root.endswith(os.path.normpath(os.path.join("src", "main", "mule"))):
            for sub_root, _, sub_files in os.walk(root):
                for file in sub_files:
                    if file.lower().endswith(".xml"):
                        full_path = os.path.normpath(os.path.join(sub_root, file))
                        xml_files.append(full_path)
    return xml_files

def list_mule_xml_files(_: str) -> str:
    global last_file_list

    mule_xml_files = find_all_mule_xml_files(project_path)
    if not mule_xml_files:
        return "No XML files found under any src/main/mule directory."

    last_file_list = mule_xml_files
    return f"Found {len(mule_xml_files)} MuleSoft XML files:\n" + "\n".join(mule_xml_files)

# === TOOL 2: Summarize each XML file
def summarize_all_files(_: str) -> str:
    if not last_file_list:
        return "No XML files loaded to summarize."

    client = get_openai_client()
    prompt_template = PromptTemplate(
        input_variables=["xml_content"],
        template="""
You are a MuleSoft expert. Analyze the following XML configuration and generate a concise technical summary:
- Identify any flows, subflows, or global elements
- Summarize the integration logic clearly

{xml_content}
"""
    )
    chain = LLMChain(llm=client, prompt=prompt_template)
    summaries = []

    for path in last_file_list:
        try:
            with open(path, "r", encoding="utf-8") as f:
                xml_content = f.read()
            summary = chain.run(xml_content=xml_content)
            summaries.append(f"File: {path}\n{summary}\n")
        except Exception as e:
            summaries.append(f"Error reading {path}: {str(e)}")

    global combined_summaries
    combined_summaries = "\n\n".join(summaries)
    return "All XML files have been summarized."

# === TOOL 3: Generate final overall summary
def generate_final_summary(_: str) -> str:
    if not combined_summaries:
        return "No summaries available to compile."

    client = get_openai_client()
    prompt_template = PromptTemplate(
        input_variables=["combined_summaries"],
        template="""
You are an expert in MuleSoft architecture. Summarize the following XML summaries into a single cohesive technical overview.
Include:
- Major flows/subflows
- Key global configurations or services
- Overall integration flow and purpose

{combined_summaries}
"""
    )
    chain = LLMChain(llm=client, prompt=prompt_template)
    return chain.run(combined_summaries=combined_summaries)

# === MAIN ===
if __name__ == "__main__":
    print("Initializing MuleSummarizerAgent with Tools and Memory...\n")

    memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

    tools = [
        Tool(name="ListMuleXMLFiles", func=list_mule_xml_files, description="Auto-detect and list all MuleSoft XML files in any src/main/mule folder."),
        Tool(name="SummarizeAllFiles", func=summarize_all_files, description="Summarize all loaded Mule XML files."),
        Tool(name="GenerateFinalSummary", func=generate_final_summary, description="Generate final overview summary from all MuleSoft file summaries.")
    ]

    client = get_openai_client()
    agent = initialize_agent(
        tools=tools,
        llm=client,
        agent_type="openai-functions",
        memory=memory,
        verbose=True
    )

    print("MuleSummarizerAgent is now deciding what to do...\n")

    agent.invoke(
        "Detect and list all XML files inside any 'src/main/mule' folders in the project, summarize each one, and create a final overall summary."
    )
