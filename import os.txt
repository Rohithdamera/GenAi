
import gradio as gr
import boto3
import re
import os
from langchain_openai import AzureChatOpenAI

# --- AWS S3 Configuration ---
def get_s3_client():
    return boto3.client(
        "s3",
        aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
        aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
        region_name=os.getenv("AWS_REGION", "us-east-1")
    )

S3_BUCKET = os.getenv("S3_BUCKET_NAME", "osif-files")
S3_KEY = os.getenv("S3_FILE_KEY", "OSIF_Dependency_req.txt")

# --- Azure OpenAI Client ---
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
        deployment_name=os.getenv("AZURE_DEPLOYMENT_NAME", "gpt-4_complex_conversions"),
        openai_api_key=os.getenv("AZURE_OPENAI_KEY"),
        openai_api_version=os.getenv("AZURE_OPENAI_VERSION", "2025-01-01-preview"),
        openai_api_type="azure",
        temperature=0.3,
        max_tokens=2000,
    )

llm = get_openai_client()
s3 = get_s3_client()

# --- Load file from S3 ---
def load_s3_file():
    obj = s3.get_object(Bucket=S3_BUCKET, Key=S3_KEY)
    return obj["Body"].read().decode("utf-8")

# --- Identify connector name using AI ---
def identify_connector(query, content):
    """
    Ask Azure OpenAI to map the query to one of the available connectors in the file.
    """
    titles = re.findall(r"Title\s*:\s*(.+)", content, flags=re.IGNORECASE)
    connector_list = "\n".join([t.strip() for t in titles])

    prompt = f"""
You are given a list of connector titles from a file:
{connector_list}

User asked: "{query}"

Your task:
- Identify which connector title best matches the user's request.
- Only return the exact connector title string from the list above.
- If nothing matches, return "NOT_FOUND".
"""

    response = llm.invoke(prompt)
    connector = response.content.strip()
    return connector

# --- Extract the full block for that connector ---
def extract_block(content, connector_title):
    """
    Extracts the block from file content starting with 'Title : connector_title'
    until the next 'Title :' or end of file.
    """
    if connector_title == "NOT_FOUND":
        return "Could not identify connector from your question."

    blocks = re.split(r"(?=Title\s*:)", content, flags=re.IGNORECASE)
    for block in blocks:
        if not block.strip():
            continue
        if re.search(rf"Title\s*:\s*{re.escape(connector_title)}", block, flags=re.IGNORECASE):
            return block.strip()

    return f"Connector '{connector_title}' not found in file."

# --- Chatbot handler ---
def chatbot_response(message, history):
    try:
        content = load_s3_file()
        connector_title = identify_connector(message, content)
        result = extract_block(content, connector_title)
        return result
    except Exception as e:
        return f"Error: {str(e)}"

# --- Gradio Chat UI ---
chatbot_ui = gr.ChatInterface(
    fn=chatbot_response,
    title="OSIF Connector Lookup",
    description="Ask about connector properties (e.g., 'give me sales force connector properties')",
    theme="default"
)

if __name__ == "__main__":
    chatbot_ui.launch(debug=False)

ðŸ”‘ Changes made:

âœ… Removed all hardcoded values (except AWS & Azure credentials).

âœ… Loaded S3 bucket, key, and Azure details from environment variables.

âœ… Ensured extract_block returns the entire Salesforce connector block exactly as stored in the .txt file in S3.

âœ… Cleaner, reusable get_s3_client() and get_openai_client() functions.



---

Do you want me to also update this so the response is returned as JSON/YAML object instead of raw text block? That way, Salesforce properties can be programmatically consumed.

