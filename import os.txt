import os
import json
import logging
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage

logging.basicConfig(level=logging.INFO)

def unpad(data: bytes) -> bytes:
    return data[:-data[-1]]

def decrypt(data: str, key: str) -> str:
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    return unpad(cipher.decrypt(b64decode(data))).decode()

def get_openai_client(model_instance_name: str) -> AzureChatOpenAI:
    aes_key = os.environ['AES_KEY']
    api_base = decrypt(os.environ['ENCRYPTED_API_BASE'], aes_key)
    api_key = decrypt(os.environ['ENCRYPTED_API_KEY'], aes_key)
    api_version = os.environ['AZURE_API_VERSION']

    if not api_base.endswith('/'):
        api_base += '/'

    return AzureChatOpenAI(
        deployment_name=model_instance_name,
        openai_api_base=api_base,
        openai_api_key=api_key,
        openai_api_version=api_version,
        temperature=0.7,
        max_tokens=4096,
        model_kwargs={
            "top_p": 0.9,
            "frequency_penalty": 0.2,
            "presence_penalty": 0.3
        }
    )

def process_with_openai(client: AzureChatOpenAI, odx_content: str, prompt: str) -> str:
    instructions = (
        "You are an expert in BizTalk Integration, with focus on Orchestrations. "
        "You are also a code interpreter and have full knowledge on .odx files. "
        "You are also an expert in generating Markdown files for Azure DevOps. "
        "The output must be written in the Sample Markdown file format. "
        "You are also an expert in generating Mermaid diagrams. "
        "Please create the mermaid diagram for the TransferOrder.odx file used as the SampleOdxFile "
        "and Placeholder for mermaid graph are added in sample Markdown File. "
        "Also add the description for this flow of .odx file. "
        "Follow https://learn.microsoft.com/en-us/azure/devops/project/wiki/markdown-guidance?view=azure-devops for all Markdown Syntax. "
        "Remember to use ::: to start and end the mermaid section. "
        "Please be as detailed and as accurate as possible. "
        "Make a disclaimer in red color that Markdown file is autogenerated by AI at the beginning of the markdown file. "
        "You need to create an overall Process flow Documentation using provided .odx file. "
        "Follow https://mermaid.js.org/ for mermaid graph."
    )

    messages = [
        SystemMessage(content=instructions),
        HumanMessage(content=odx_content),
        HumanMessage(content=prompt)
    ]

    return client.invoke(messages).content.strip().replace("\\n", "\n")

def lambda_handler(event: dict, context: dict) -> dict:
    try:
        file_content = event.get('body')
        if not file_content:
            raise ValueError("Missing request body.")

        headers = event.get('headers', {})
        model_instance_name = headers.get('model_instance_name')
        if not model_instance_name:
            raise ValueError("Missing 'model_instance_name' in headers.")

        # Use header prompt if provided and non-empty, else use default
        header_prompt = headers.get('prompt', '').strip()
        prompt = header_prompt if header_prompt else "Please create a detailed orchestration diagram and documentation for the provided .odx file."

        client = get_openai_client(model_instance_name)
        result = process_with_openai(client, file_content, prompt)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": result
        }

    except Exception as e:
        logging.error(f"Error: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
