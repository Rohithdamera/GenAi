import os
import logging
import json
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    return unpad(decrypted_data).decode()

def get_openai_client(model_instance_name):
    try:
        aes_key_base64 = os.environ['AES_KEY']
        encrypted_api_base = os.environ['ENCRYPTED_API_BASE']
        encrypted_api_key = os.environ['ENCRYPTED_API_KEY']
        api_version = os.environ['AZURE_API_VERSION']

        decrypted_api_base = decrypt(encrypted_api_base, aes_key_base64)
        decrypted_api_key = decrypt(encrypted_api_key, aes_key_base64)

        if not decrypted_api_base.endswith('/'):
            decrypted_api_base += '/'

        logger.info(f"Using OpenAI endpoint: {decrypted_api_base}openai/deployments/{model_instance_name}/chat/completions?api-version={api_version}")

        return AzureChatOpenAI(
            deployment_name=model_instance_name,
            openai_api_base=decrypted_api_base,
            openai_api_key=decrypted_api_key,
            openai_api_version=api_version
        )
    except Exception as e:
        logger.error(f"OpenAI client initialization failed: {e}")
        raise ValueError(f"OpenAI client initialization failed: {e}")

def generate_prompt(file_content, iteration=None, total=None):
    instruction = (
        "You are an expert in analysing the RAML and generating the payload from the RAML. "
        "I am providing the RAML which will be used as an asset for designing my API. "
        "Please anlayze the RAML and generate the sample payload which will honour all the rules inside the RAML. "
        "You can refer the link for any doubts related to RAML: https://raml.org/developers/raml-100-tutorial"
    )

    prompt = "Please generate the payloads for all the endpoint in the RAML."

    variation_instruction = ""
    if iteration is not None and total is not None:
        variation_instruction = f"This is sample {iteration + 1} of {total}. Ensure it is different from others."

    full_prompt = f"""{instruction}

{prompt}

{variation_instruction}

Content:
{file_content}

Only return valid JSON. No explanation.
"""
    return full_prompt

def parse_response_as_json(response_content):
    try:
        return json.loads(response_content)
    except json.JSONDecodeError:
        cleaned = response_content.strip()
        if cleaned.startswith("```json"):
            cleaned = cleaned.replace("```json", "").replace("```", "").strip()
        try:
            return json.loads(cleaned)
        except Exception as e:
            raise ValueError(f"Invalid JSON from model: {e}\nRaw output:\n{response_content}")

def generate_payloads(client, file_content, count):
    results = []
    for i in range(count):
        prompt = generate_prompt(file_content, i, count)
        try:
            response = client.invoke([HumanMessage(content=prompt)])
            parsed = parse_response_as_json(response.content)
            results.append(parsed)
        except Exception as e:
            logger.error(f"OpenAI call failed at iteration {i+1}: {e}")
            raise

    return results if count > 1 else results[0]

def lambda_handler(event, context):
    logger.info(f"Received event: {json.dumps(event)}")

    try:
        if 'body' not in event or not event.get('isBase64Encoded'):
            raise ValueError("Missing or invalid file content.")

        file_content = b64decode(event['body']).decode('utf-8').strip()

        if not file_content.startswith("#%RAML"):
            raise ValueError("Invalid RAML file. It must start with #%RAML.")

        headers = event.get('headers', {})
        model_instance_name = headers.get('model_instance_name')
        if not model_instance_name:
            raise ValueError("Missing 'model_instance_name' in headers.")

        count = int(headers.get('count', 1))
        client = get_openai_client(model_instance_name)
        result = generate_payloads(client, file_content, count)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(result, indent=2)
        }

    except Exception as e:
        logger.error(f"Processing failed: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
