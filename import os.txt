import os
import logging
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def unpad(data):
    return data[:-data[-1]]

def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    return unpad(decrypted_data).decode()

def get_openai_client():
    aes_key_base64 = os.environ['AES_KEY']
    decrypted_api_base = decrypt(os.environ['ENCRYPTED_API_BASE'], aes_key_base64)
    decrypted_api_key = decrypt(os.environ['ENCRYPTED_API_KEY'], aes_key_base64)

    if not decrypted_api_base.endswith('/'):
        decrypted_api_base += '/'

    return AzureChatOpenAI(
        deployment_name=os.environ['AZURE_MODEL_DEPLOYMENT'],
        openai_api_base=decrypted_api_base,
        openai_api_key=decrypted_api_key,
        openai_api_version=os.environ['AZURE_API_VERSION']
    )

def generate_junit_from_java_code(client, java_code):
    prompt = (
        "You are a senior Java developer. Generate a complete JUnit 5 test class for the following Java class. "
        "Ensure all public methods are tested. Use proper imports, annotations, and mocks if needed. "
        "Do not include explanations or extra text. Output only valid Java code.\n\n"
        f"{java_code}"
    )
    response = client.invoke([HumanMessage(content=prompt)])
    return response.content

def lambda_handler(event, context):
    try:
        java_code = event.get('body', '')
        client = get_openai_client()
        result = generate_junit_from_java_code(client, java_code)
        return {
            "statusCode": 200,
            "body": result
        }
    except Exception as e:
        logger.error(f"Unhandled exception: {e}")
        return {
            "statusCode": 500,
            "body": f"Internal server error: {str(e)}"
        }
