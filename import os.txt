import os
import json
import asyncio
from typing import List, Dict, Any
from mcp import ClientSession
from mcp.client.sse import sse_client

from langchain.chat_models import AzureChatOpenAI
from langchain.agents import initialize_agent, AgentType
from langchain.tools import Tool

# -------------------------
# 1. Azure OpenAI Client
# -------------------------
def get_openai_client():
    return AzureChatOpenAI(
        azure_deployment="Fourth_Chatbot",
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        openai_api_version="2024-08-01-preview",
        openai_api_key=os.getenv("AZURE_OPENAI_KEY", ""),
        temperature=0.7,
        max_tokens=2000,
        model_kwargs={
            "top_p": 0.9,
            "frequency_penalty": 0.2,
            "presence_penalty": 0.1
        }
    )

# -------------------------
# 2. MCP Tool Wrapper
# -------------------------
class MCPToolWrapper:
    def __init__(self, session: ClientSession):
        self.session = session

    async def get_available_tools(self) -> List[str]:
        return await self.session.list_tools()

    async def call_tool(self, tool_name: str, params: Dict[str, Any]) -> Any:
        return await self.session.call_tool(tool_name, params)

# -------------------------
# 3. Convert MCP Tools to LangChain Tools
# -------------------------
def create_langchain_tools(tool_names: List[str], wrapper: MCPToolWrapper) -> List[Tool]:
    tools = []

    for tool_name in tool_names:
        async def _tool_fn(tool_input: str, tool_name=tool_name):
            try:
                params = json.loads(tool_input)
            except json.JSONDecodeError:
                return f"‚ùå Invalid input. Please provide valid JSON for `{tool_name}`."
            try:
                result = await wrapper.call_tool(tool_name, params)
                return str(result)
            except Exception as e:
                return f"‚ùå Error calling `{tool_name}`: {e}"

        tool = Tool.from_function(
            name=tool_name,
            func=_tool_fn,
            coroutine=_tool_fn,
            description=f"Call the MCP tool: {tool_name}"
        )
        tools.append(tool)

    return tools

# -------------------------
# 4. ReAct Agent Runner
# -------------------------
async def run_agent():
    url = "https://employee-mcp-v1-6b0n96.dw4w1g-2.gbr-e1.cloudhub.io/sse"

    async with sse_client(url=url) as streams:
        async with ClientSession(streams[0], streams[1]) as session:
            await session.initialize()

            wrapper = MCPToolWrapper(session)
            tool_names = await wrapper.get_available_tools()
            print("üõ†Ô∏è Available MCP Tools:", tool_names)

            langchain_tools = create_langchain_tools(tool_names, wrapper)

            agent = initialize_agent(
                tools=langchain_tools,
                llm=get_openai_client(),
                agent=AgentType.OPENAI_FUNCTIONS,
                verbose=True,
                handle_parsing_errors=True
            )

            print("\nü§ñ Ask your questions (type 'exit' to quit):")
            while True:
                user_query = input("\nUser: ")
                if user_query.lower() in ["exit", "quit"]:
                    break
                try:
                    result = await agent.arun(user_query)
                    print(f"Agent: {result}")
                except Exception as e:
                    print(f"‚ùå Agent error: {e}")

# -------------------------
# 5. Entry Point
# -------------------------
if __name__ == "__main__":
    asyncio.run(run_agent())
