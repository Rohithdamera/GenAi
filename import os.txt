import os
import re
import shutil
from pathlib import Path
import gradio as gr

from langchain_openai import AzureChatOpenAI
from langchain.tools import Tool

# === Azure OpenAI Client ===
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="gpt-4_complex_conversions",
        openai_api_key="",
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        temperature=0.3,
        max_tokens=2000,
    )

llm = get_openai_client()

# === Tool 1: Copy Java Project Structure ===
def copy_project_structure(reference_path: str, new_project_name: str, output_base: str = ".") -> str:
    ref_path = Path(reference_path)
    if not ref_path.exists():
        raise FileNotFoundError(f"Reference project not found: {reference_path}")

    # Destination path
    dest_path = Path(output_base) / new_project_name
    if dest_path.exists():
        shutil.rmtree(dest_path)  # clean old project
    dest_path.mkdir(parents=True, exist_ok=True)

    for root, dirs, files in os.walk(ref_path):
        rel_path = Path(root).relative_to(ref_path)
        target_dir = dest_path / rel_path
        target_dir.mkdir(parents=True, exist_ok=True)

        for file in files:
            if file == "pom.xml":  # Copy pom.xml as-is
                shutil.copy2(Path(root) / file, target_dir / file)
            else:
                # Create empty files with same extension
                if file.endswith(".java") or file.endswith(".xml") or file.endswith(".yml") or file.endswith(".properties"):
                    (target_dir / file).touch()

    return f"✅ Project '{new_project_name}' created at {dest_path}"

# === Tool 2: Parse User Input for Command ===
def parse_command(user_input: str) -> dict:
    """
    Parse user input like:
    'generate a java project take this project (C:/Users/me/ref_project) as a reference, 
    with name AWS connector'
    """
    match_path = re.search(r"\(([A-Za-z]:[\\/\w\-. ]+)\)", user_input)
    match_name = re.search(r"with name ([\w\s]+)", user_input, re.IGNORECASE)

    if not match_path or not match_name:
        raise ValueError("❌ Invalid input format. Provide (project_path) and a project name.")

    return {
        "reference_path": match_path.group(1).strip(),
        "new_project_name": match_name.group(1).strip().replace(" ", "")
    }

# === Tool 3: Orchestrator ===
def process_user_request(user_input: str, history):
    try:
        cmd = parse_command(user_input)
        return copy_project_structure(cmd["reference_path"], cmd["new_project_name"])
    except Exception as e:
        return f"[ERROR] {str(e)}"

# === Register Tools (extensible for future features) ===
tools = [
    Tool(name="CopyJavaProject", func=copy_project_structure, description="Copies a Java project structure with new name"),
]

# === Gradio UI ===
chatbot_ui = gr.ChatInterface(
    fn=process_user_request,
    title="Java Project Generator",
    description="Ask me to generate a new Java project based on a reference project structure.",
    theme="default",
)

if __name__ == "__main__":
    chatbot_ui.launch()
