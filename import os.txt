import os
import logging
import json
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ----------------------------- Decryption Helpers -----------------------------

def unpad(data):
    """Remove AES padding."""
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(encrypted_data, key):
    """Decrypt data using AES ECB mode."""
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted = cipher.decrypt(b64decode(encrypted_data))
    return unpad(decrypted).decode()

# ----------------------------- Agent Logic Helpers -----------------------------

def detect_agent_type(file_content):
    """Determine file format to choose the correct processing strategy."""
    content = file_content.strip()
    if content.startswith("%dw"):
        return "dwl_json"
    elif content.startswith("#%RAML"):
        return "raml_json"
    elif content.startswith("<?xml"):
        if "xsl:stylesheet" in content or "<xsl:stylesheet" in content:
            return "xslt_json"
        else:
            return "xsd_json"
    elif content.startswith("swagger:") or "openapi:" in content:
        return "swagger_json"
    else:
        raise ValueError("Unrecognized file content. Cannot infer format.")

def get_prompt(agent_type):
    """Generate system prompt per file type."""
    prompts = {
        "dwl_json": (
            "You are an expert in DataWeave. Analyze the provided DataWeave (.dwl) code "
            "and generate a valid input JSON payload that could be used to test it."
        ),
        "raml_json": (
            "You are an expert in RAML. Based on the RAML spec provided, generate a valid "
            "sample JSON payload for a POST request body."
        ),
        "xsd_json": (
            "You are an expert in XML Schema (XSD). Generate a valid JSON payload that adheres to the provided XSD structure."
        ),
        "swagger_json": (
            "You are an expert in Swagger/OpenAPI. Generate a valid JSON POST payload based on the provided specification."
        ),
        "xslt_json": (
            "You are an expert in XSLT transformation. Generate a sample input JSON structure "
            "that would be used to test the provided XSLT transformation logic."
        )
    }
    return prompts.get(agent_type)

# -------------------------- Azure OpenAI Integration --------------------------

def get_openai_client(deployment_name):
    """Set up Azure OpenAI client with decrypted credentials."""
    try:
        key = os.environ['AES_KEY']
        api_base = decrypt(os.environ['ENCRYPTED_API_BASE'], key)
        api_key = decrypt(os.environ['ENCRYPTED_API_KEY'], key)
        api_version = os.environ['AZURE_API_VERSION']

        if not api_base.endswith('/'):
            api_base += '/'

        return AzureChatOpenAI(
            deployment_name=deployment_name,
            openai_api_base=api_base,
            openai_api_key=api_key,
            openai_api_version=api_version
        )
    except Exception as e:
        logger.error(f"Failed to initialize OpenAI client: {e}")
        raise

def generate_test_data(openai_client, prompt, file_content, count=1):
    """Generate test data multiple times."""
    messages = [HumanMessage(content=prompt + "\n\n" + file_content)]
    outputs = []

    for _ in range(count):
        try:
            response = openai_client.invoke(messages)
            outputs.append(response.content.strip())
        except Exception as e:
            logger.error(f"Error generating test data: {e}")
            outputs.append(f"Error: {str(e)}")

    return outputs

# ----------------------------- Main Lambda Handler -----------------------------

def lambda_handler(event, context):
    logger.info("Processing Lambda request.")

    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("Missing or invalid file body (must be base64-encoded).")

        # Decode the file content
        file_content = b64decode(event['body']).decode('utf-8')

        # Extract headers
        headers = event.get('headers', {})
        model_instance_name = headers.get('model_instance_name')
        count_str = headers.get('count', '1')

        if not model_instance_name:
            raise ValueError("Missing required header: 'model_instance_name'.")

        try:
            count = max(1, int(count_str))
        except ValueError:
            raise ValueError("'count' header must be an integer.")

        # Detect file type and prompt
        agent_type = detect_agent_type(file_content)
        prompt = get_prompt(agent_type)
        if not prompt:
            raise ValueError(f"No prompt defined for agent type: {agent_type}")

        # Generate data
        client = get_openai_client(model_instance_name)
        outputs = generate_test_data(client, prompt, file_content, count)

        # Format response: return list or single object based on count
        body = outputs if count > 1 else outputs[0]

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(body)
        }

    except Exception as e:
        logger.error(f"Unhandled error: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
