import json
import requests
from sseclient import SSEClient

# === CONFIG ===
MCP_URL = "https://your.mcp.server.url"  # Step 1 endpoint
MESSAGE_BASE_URL = "https://vendorstool-app-6b0n96.dw4w1g-1.gbr-e1.cloudhub.io"  # Step 2 domain

MCP_PAYLOAD = {
    "method": "tools/call",
    "params": {
        "name": "get-vendors",
        "arguments": {}
    }
}

def step1_get_message_path():
    try:
        print("üîå Step 1: Connect to MCP and initiate stream...")

        response = requests.post(
            MCP_URL,
            json=MCP_PAYLOAD,
            headers={"Content-Type": "application/json"},
            stream=True,
            timeout=300
        )

        client = SSEClient(response)
        print("üëÇ Waiting for sessionId in event stream...")

        for event in client.events():
            data = event.data.strip()
            if "sessionId=" in data:
                print(f"‚úÖ Found session path: {data}")
                return data  # example: /message?sessionId=...
        return None

    except Exception as e:
        print(f"[ERROR] Failed to get sessionId from MCP: {e}")
        return None

def step2_get_vendor_json(message_path: str):
    try:
        # Combine manual domain + message path
        if message_path.startswith("/"):
            full_url = f"{MESSAGE_BASE_URL}{message_path}"
        else:
            full_url = f"{MESSAGE_BASE_URL}/{message_path}"

        print(f"üîÅ Step 2: Connecting to message endpoint: {full_url}")

        response = requests.get(
            full_url,
            headers={"Accept": "text/event-stream"},
            stream=True,
            timeout=300
        )

        client = SSEClient(response)
        for event in client.events():
            data = event.data.strip()
            try:
                parsed = json.loads(data)
                print("‚úÖ Vendor JSON received successfully!")
                return parsed
            except json.JSONDecodeError:
                print("‚è≥ Still waiting for JSON data...\n")

        return None
    except Exception as e:
        print(f"[ERROR] Failed to fetch from /message: {e}")
        return None

# === MAIN ===
if __name__ == "__main__":
    message_path = step1_get_message_path()

    if not message_path:
        print("‚ùå No sessionId path received from MCP.")
    else:
        vendor_data = step2_get_vendor_json(message_path)
        if vendor_data:
            print("\n‚úÖ FINAL VENDOR DATA:\n")
            print(json.dumps(vendor_data, indent=2))
        else:
            print("\n‚ùå Vendor JSON not received.")
