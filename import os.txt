import os
import logging
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def unpad(data):
    return data[:-data[-1]]

def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    return unpad(decrypted_data).decode()

def get_openai_client(model_instance_name):
    try:
        aes_key_base64 = os.environ['AES_KEY']
        encrypted_api_base = os.environ['ENCRYPTED_API_BASE']
        encrypted_api_key = os.environ['ENCRYPTED_API_KEY']
        api_version = os.environ['AZURE_API_VERSION']

        decrypted_api_base = decrypt(encrypted_api_base, aes_key_base64)
        decrypted_api_key = decrypt(encrypted_api_key, aes_key_base64)

        if not decrypted_api_base.endswith('/'):
            decrypted_api_base += '/'

        return AzureChatOpenAI(
            deployment_name=model_instance_name,
            openai_api_base=decrypted_api_base,
            openai_api_key=decrypted_api_key,
            openai_api_version=api_version
        )

    except Exception as e:
        logger.error(f"Error initializing OpenAI client: {e}")
        raise ValueError(f"Error initializing OpenAI client: {e}")

def generate_properties_from_dependency(client, dependency_xml):
    try:
        prompt = (
         f"You are a senior Spring Boot engineer. A developer will provide you with a Maven dependency in XML format. "
         f"Your task is to output only the required `application.properties` configuration for that dependency, if any. "
         f"If the dependency does not require any specific configuration in `application.properties`, return exactly: "
         f"'This dependency doesn't require any specific application.properties configuration.' "
         f"You must support all types of dependencies, including but not limited to: "
         f"databases (e.g., JPA, MongoDB), messaging systems (e.g., Kafka, RabbitMQ), cloud connectors (e.g., AWS, Azure, Salesforce), "
         f"monitoring tools, and utility libraries. "
         f"For Salesforce connectors, always return the configuration in the following format:\n"
         f"core:\n"
         f"  connectors:\n"
         f"    sfdc:\n"
         f"      authUrl: https://login.salesforce.com\n"
         f"      username: your-username\n"
         f"      password: your-password\n"
         f"      client_id: your-client-id\n"
         f"      client_secret: your-client-secret\n"
         f"      grant_type: password\n"
         f"      queryUrl: /\n"
         f"      version: v53.0\n\n"
         f"Do not include explanations, comments, or extra text. "
         f"Output only valid configuration entries. "
         f"If multiple configurations  "
         f"Do not skip Salesforce-related configurations unless absolutely none are needed. "
         f"Do not include explanations, comments, or extra text. "
         f"Output only valid `application.properties` entries, if required. "
         f"If multiple configurations are possible, output the most commonly used or default configuration.\n\n"
         f"{dependency_xml}"
)


        response = client.invoke([HumanMessage(content=prompt)])
        return response.content

    except Exception as e:
        logger.error(f"Error during OpenAI call: {e}")
        raise

def lambda_handler(event, context):
    try:
        if 'body' not in event or not event['body'].strip():
            return {
                "statusCode": 400,
                "body": "Missing or empty XML dependency in request body."
            }

        dependency_xml = event['body']
        model_instance_name = os.environ['AZURE_MODEL_DEPLOYMENT']  # set in Lambda config
        client = get_openai_client(model_instance_name)
        result = generate_properties_from_dependency(client, dependency_xml)

        return {
            "statusCode": 200,
            "body": result
        }

    except Exception as e:
        logger.error(f"Unhandled exception: {e}")
        return {
            "statusCode": 500,
            "body": f"Internal server error: {str(e)}"
        }
