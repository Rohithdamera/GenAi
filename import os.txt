import json
import base64
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to unpad data after decryption (removes padding bytes)
def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

# AES decryption function for credentials or data
def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Error during decryption: {e}")
        raise ValueError(f"Error during decryption: {e}")

# Generate a random value based on inferred data type
def generate_random_value_by_sample(sample_value):
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, str):
        return ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(4, 10)))
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif sample_value is None:
        return None
    else:
        return sample_value  # fallback for unknown type

# Recursively generate randomized structure maintaining original field names
def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(v) for v in template]
    else:
        return generate_random_value_by_sample(template)

# Extract model instance name from headers if provided
def get_model_instance_name(event):
    return event.get('headers', {}).get('model_instance_name', 'default_chatbot')

# Main Lambda function handler
def lambda_handler(event, context):
    logger.info("Lambda function invoked.")
    
    try:
        # Check for base64 body
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("Missing or invalid file data in request.")
        
        # Decode base64 body
        content = base64.b64decode(event['body']).decode('utf-8')

        # Find the JSON start
        json_start = content.find('{')
        if json_start == -1:
            raise ValueError("No JSON content found in RAML file.")
        
        json_string = content[json_start:]
        original_data = json.loads(json_string)

        # Generate randomized version of the original JSON
        randomized_data = generate_random_structure(original_data)

        # Get model instance name
        model_instance_name = get_model_instance_name(event)

        # Prompt (for illustrative/logging purpose, not used in response)
        prompt = (
            f"You are an expert RAML analyzer. Using the model instance '{model_instance_name}', "
            "generate randomized test payloads based on the JSON input structure. Only values should be randomized."
        )
        logger.info(prompt)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(randomized_data)
        }

    except Exception as e:
        logger.error(f"Error in Lambda handler: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }
