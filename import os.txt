import json
import base64
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ==== Utility Functions ====
def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Error during decryption: {e}")
        raise ValueError(f"Error during decryption: {e}")

def is_datetime_like(value):
    return isinstance(value, str) and any(sep in value for sep in ['/', '-', ':']) and sum(c.isdigit() for c in value) >= 6

def is_uuid_like(value):
    return isinstance(value, str) and len(value) in [36, 32] and value.count('-') == 4

def is_numeric_string(value):
    return isinstance(value, str) and value.isdigit()

def random_datetime():
    return f"{random.randint(1,28):02}/{random.randint(1,12):02}/2025 {random.randint(0,23):02}:{random.randint(0,59):02}:{random.randint(0,59):02}"

def random_uuid():
    sections = [8, 4, 4, 4, 12]
    return '-'.join(''.join(random.choices(string.hexdigits.lower(), k=s)) for s in sections)

def random_string_like(value):
    if is_datetime_like(value):
        return random_datetime()
    elif is_uuid_like(value):
        return random_uuid()
    elif is_numeric_string(value):
        return ''.join(random.choices(string.digits, k=len(value)))
    else:
        return ''.join(random.choices(string.ascii_letters + string.digits, k=len(value)))

def generate_random_value_by_sample(sample_value):
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif isinstance(sample_value, str):
        return random_string_like(sample_value)
    elif sample_value is None:
        return None
    else:
        return sample_value

def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(item) for item in template]
    else:
        return generate_random_value_by_sample(template)

def get_model_instance_name(event):
    header_val = event.get('headers', {}).get('model_instance_name')
    return header_val if header_val else 'chatbot_' + ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))

def get_count_from_headers(event):
    try:
        return max(1, int(event.get('headers', {}).get('count', '1')))
    except Exception:
        return 1

def build_dynamic_prompt(model_instance_name):
    return (
        f"You are an expert RAML analyzer. Using the model instance '{model_instance_name}', "
        "analyze the provided RAML or JSON content. Resolve all includes such as traits, resource types, and fragments. "
        "Then generate realistic randomized test payloads while preserving the field names, structure, and data types. "
        "Ensure the output is in clean JSON format without explanations."
    )

# ==== Lambda Handler ====
def lambda_handler(event, context):
    logger.info("Lambda function invoked.")

    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("Missing or invalid file data in request.")

        decoded_content = base64.b64decode(event['body']).decode('utf-8')

        # Attempt to find valid JSON content
        json_start = decoded_content.find('{')
        if json_start == -1:
            raise ValueError("No JSON object found in input file.")

        json_string = decoded_content[json_start:]
        original_data = json.loads(json_string)

        model_instance_name = get_model_instance_name(event)
        count = get_count_from_headers(event)
        prompt = build_dynamic_prompt(model_instance_name)

        logger.info(f"Model instance: {model_instance_name}, Dataset count: {count}")
        logger.debug(f"Prompt: {prompt}")

        datasets = [generate_random_structure(original_data) for _ in range(count)]

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"datasets": datasets})
        }

    except Exception as e:
        logger.error(f"Error: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }
