import mysql.connector
import openai
from datetime import datetime

# Set your OpenAI API key and other configurations
openai.api_type = "azure"
openai.api_key = ""
openai.api_base = "https://testopenaiassets.openai.azure.com/"
openai.api_version = "2024-08-01-preview"

# Get user input
api_name = input("Enter the API name (e.g., EXA-api): ").strip()
time_interval = input("Enter the time interval (e.g., 3 HOUR, 1 DAY): ").strip().upper()

# Connect to the MySQL database
conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="Admin",
    database="test_data"
)
cursor = conn.cursor()

# SQL query with dynamic API name and time interval
sql_query = f"""
SELECT *
FROM `all api last 1 week performance report`
WHERE `API Name` = %s
  AND Timestamp BETWEEN (NOW() - INTERVAL {time_interval}) AND NOW()
ORDER BY `API Name`, Timestamp ASC;
"""

# Execute the SQL query
cursor.execute(sql_query, (api_name,))
results = cursor.fetchall()

# Get column names dynamically
column_names = [desc[0] for desc in cursor.description]

# Close the database connection
conn.close()

# Convert results to a readable string
results_str = "\n".join(
    [", ".join(f"{col}: {val}" for col, val in zip(column_names, row)) for row in results]
)

# Build the enhanced prompt
prompt = (
    f"You are a senior data analyst. You have been provided with performance data for a specific API collected over the last {time_interval}.\n"
    "Each row in the dataset includes metrics such as:\n"
    "- Timestamp of the request\n"
    "- Response time (in milliseconds)\n"
    "- Error rate (percentage of failed requests)\n"
    "- Request volume (number of requests)\n\n"
    f"The API being analyzed is: {api_name}\n\n"
    "Your tasks are:\n"
    "1. Provide a clear and concise summary of the API's overall health.\n"
    "2. Identify any performance issues, anomalies, or error patterns.\n"
    "3. Explain potential causes for each issue you find.\n"
    "4. Suggest practical, data-driven solutions to improve the API's performance.\n"
    "5. Highlight any trends or patterns you observe over time.\n"
    "6. Generate and interpret visual graphs (line charts or bar charts) to help illustrate:\n"
    "   - Response time trends\n"
    "   - Error rate fluctuations\n"
    "   - Request volume changes\n\n"
    "This analysis should be understandable to someone who is not familiar with the API or the data.\n\n"
    "results_str is the given data."
)

# Function to get summary from OpenAI
def get_openai_client(prompt):
    try:
        response = openai.ChatCompletion.create(
            deployment_id="Fourth_Chatbot",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": results_str}
            ],
            max_tokens=1200,
            temperature=0.6,
            top_p=0.9,
            frequency_penalty=0.2,
            presence_penalty=0.1
        )
        summary = response['choices'][0]['message']['content']
        print("Report:\n", summary)
    except Exception as e:
        print(f"Error during generating the summary: {e}")

# Call the function with the generated prompt
get_openai_client(prompt)
