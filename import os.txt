import re
import boto3
import yaml

# -------------------------
# AWS S3 Utility
# -------------------------
def fetch_s3_file_content(arn: str) -> str:
    print("Fetching S3 file content...")
    match = re.match(r"^arn:aws:s3:::(.+?)/(.*)$", arn)
    if not match:
        raise ValueError("Invalid S3 ARN format")

    bucket, key = match.groups()
    s3 = boto3.client(
        "s3",
        aws_access_key_id="AKIA6ODVATHCN52UKSR",
        aws_secret_access_key="N3+vw0XS4ZcdzqM0Zk6qflR7UbNy0ztQgdwWoiu",
        region_name="us-east-1"
    )
    obj = s3.get_object(Bucket=bucket, Key=key)
    content = obj["Body"].read().decode("utf-8")

    if not content.strip():
        raise ValueError("S3 file is empty or unreadable.")

    print("S3 content fetched successfully.")
    return content

# -------------------------
# Extract connector block
# -------------------------
def extract_connector_block(file_content: str, connector_name: str) -> str:
    """
    Finds the exact configuration block for the given connector.
    Works for YAML or properties-style structured files.
    """
    lines = file_content.splitlines()
    connector_name = connector_name.strip()

    # Find the connector definition in YAML format
    start_index = None
    for i, line in enumerate(lines):
        if re.match(rf"^{re.escape(connector_name)}\s*:\s*$", line.strip()):
            start_index = i
            break

    if start_index is None:
        # Try properties style: connectorName.property=value
        pattern = re.compile(rf"^{re.escape(connector_name)}\.", re.IGNORECASE)
        matched_lines = [line for line in lines if pattern.match(line)]
        if matched_lines:
            return "\n".join(matched_lines)
        return f"No configuration found for connector '{connector_name}'."

    # Extract YAML block
    block_lines = [lines[start_index]]
    base_indent = len(lines[start_index]) - len(lines[start_index].lstrip())

    for j in range(start_index + 1, len(lines)):
        current_line = lines[j]
        current_indent = len(current_line) - len(current_line.lstrip())
        if current_line.strip() == "":
            block_lines.append(current_line)
        elif current_indent > base_indent:
            block_lines.append(current_line)
        else:
            break

    return "\n".join(block_lines)

# -------------------------
# Main execution
# -------------------------
if __name__ == "__main__":
    # Example: Change S3 ARN and connector name as needed
    S3_ARN = "arn:aws:s3:::osif-files/OSIF_Dependency_req.txt"
    connector_name = input("Enter connector name: ")

    try:
        file_content = fetch_s3_file_content(S3_ARN)
        result = extract_connector_block(file_content, connector_name)
        print("\n=== Exact Connector Configuration ===\n")
        print(result)
    except Exception as e:
        print(f"Error: {e}")
