import os
import json
import logging
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage

logging.basicConfig(level=logging.INFO)

def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    return unpad(decrypted_data).decode()

def get_openai_client(model_instance_name):
    try:
        aes_key_base64 = os.environ['AES_KEY']
        encrypted_api_base = os.environ['ENCRYPTED_API_BASE']
        encrypted_api_key = os.environ['ENCRYPTED_API_KEY']
        api_version = os.environ['AZURE_API_VERSION']

        decrypted_api_base = decrypt(encrypted_api_base, aes_key_base64)
        decrypted_api_key = decrypt(encrypted_api_key, aes_key_base64)

        if not decrypted_api_base.endswith('/'):
            decrypted_api_base += '/'

        return AzureChatOpenAI(
            deployment_name=model_instance_name,
            openai_api_base=decrypted_api_base,
            openai_api_key=decrypted_api_key,
            openai_api_version=api_version,
            temperature=0.0,
            max_tokens=4096,
            model_kwargs={"top_p": 0.95, "frequency_penalty": 0, "presence_penalty": 0}
        )
    except Exception as e:
        logging.error(f"Error initializing OpenAI client: {e}")
        raise ValueError(f"Error initializing OpenAI client: {e}")

def generate_script(client, file_content, agent_name):
    conversion_prompt = {
        "xslt_to_dwl": (
            '''
You are a **MuleSoft DataWeave (DWL) script generator**.  
Your job: **convert the provided XSLT into an equivalent Dataweave script** that reproduces the same transformation.

[... trimmed for brevity, your original xslt_to_dwl conversion prompt here ...]
'''.strip()
        ),
    }

    prompt = conversion_prompt.get(agent_name,
        "Convert the given input into a structured script.\n"
        "Ensure proper indentation and line breaks.\n"
        "Do not add any programming language annotations like ```python, ```ruby, or ```javascript.\n"
        "It should have a return statement and also the response should be a compatible Workato JavaScript/Python/Ruby snippet.\n"
    )

    response = client.invoke([
        SystemMessage(content=prompt),
        HumanMessage(content=file_content)
    ])

    generated_script = response.content.strip()

    # Validation prompt logic
    validateprompt = '''
You are a **MuleSoft DataWeave (DWL) script generator**.  
Your job: **remove the syntax errors found in the provided DataWeave (DWL) script and produce an error free DataWeave (DWL) script**

## Input Requirement
Please provide the following two pieces of information:
1. Input DataWeave Script
        - Paste the full DataWeave code that you're working with.
        - Ensure it includes all relevant expressions, mappings, and transformations.
2. Syntax Error Message
        - Include the exact error message you received when executing the script.
    - Enclose the error message within square braces
        - If available, specify the line number or section where the error occurred.

## Output Requirements
- Return **only** the DWL script. **No comments**, **no explanations**, **no extra text**.
- Please format the code using a fenced code block with triple backticks (```) before and after the code. Specify the language after the opening backticks for syntax highlighting (e.g., ```Dataweave).
'''.strip()

    validation_response = client.invoke([
        SystemMessage(content=validateprompt),
        HumanMessage(content=f"[Input DataWeave Script]\n{generated_script}\n\n[Syntax Error Message]\n\"If there are any syntax errors, correct them. Otherwise, return the same script.\"")
    ])

    return validation_response.content.strip()

def lambda_handler(event, context):
    try:
        if 'body' not in event or not event['body']:
            raise ValueError("Missing or empty request body.")

        headers = event.get('headers', {})
        model_instance_name = headers.get('model_instance_name', 'Default_Model')
        query_params = event.get('queryStringParameters', {})

        agent_name_param = query_params.get('Agent_name', '')

        agent_names = [name.strip() for name in agent_name_param.split(',') if name.strip()]
        if len(agent_names) != 1:
            raise ValueError("Exactly one Agent_name must be provided in query parameters.")

        agent_name = agent_names[0]

        if event.get('isBase64Encoded', False):
            file_content = b64decode(event['body']).decode('utf-8')
        else:
            file_content = event['body']

        client = get_openai_client(model_instance_name)
        processed_result = generate_script(client, file_content, agent_name)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "text/plain"},
            "body": processed_result
        }
    except Exception as e:
        logging.error(f"An error occurred: {e}")
        return {
            "statusCode": 400,
            "body": json.dumps({"error": str(e)})
        }