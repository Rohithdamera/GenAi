import json
import logging
import random
import string
import base64
from io import BytesIO
import cgi

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def is_datetime_like(value):
    return isinstance(value, str) and any(sep in value for sep in ['/', '-', ':']) and sum(c.isdigit() for c in value) >= 6

def is_uuid_like(value):
    return isinstance(value, str) and len(value) in [36, 32] and value.count('-') == 4

def is_numeric_string(value):
    return isinstance(value, str) and value.isdigit()

def random_datetime():
    return f"{random.randint(1,28):02}/{random.randint(1,12):02}/2025 {random.randint(0,23):02}:{random.randint(0,59):02}:{random.randint(0,59):02}"

def random_uuid():
    sections = [8, 4, 4, 4, 12]
    return '-'.join(''.join(random.choices(string.hexdigits.lower(), k=s)) for s in sections)

def random_string_like(value):
    if is_datetime_like(value):
        return random_datetime()
    elif is_uuid_like(value):
        return random_uuid()
    elif is_numeric_string(value):
        return ''.join(random.choices(string.digits, k=len(value)))
    else:
        return ''.join(random.choices(string.ascii_letters + string.digits, k=len(value)))

def generate_random_value_by_sample(sample_value):
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif isinstance(sample_value, str):
        return random_string_like(sample_value)
    elif sample_value is None:
        return None
    else:
        return sample_value

def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(item) for item in template]
    else:
        return generate_random_value_by_sample(template)

def get_model_instance_name(headers):
    value = headers.get('model_instance_name')
    if value:
        return value
    return 'chatbot_' + ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))

def get_count(headers):
    try:
        return max(1, int(headers.get('count', '1')))
    except Exception:
        return 1

def lambda_handler(event, context):
    try:
        headers = {k.lower(): v for k, v in event.get('headers', {}).items()}
        content_type = headers.get('content-type')
        if not content_type or 'multipart/form-data' not in content_type:
            raise ValueError("Content-Type must be multipart/form-data")

        # Decode base64 body
        if not event.get('isBase64Encoded'):
            raise ValueError("Expected base64 encoded body.")
        body_bytes = base64.b64decode(event['body'])

        # Prepare environment for cgi parsing
        environ = {
            'REQUEST_METHOD': 'POST',
            'CONTENT_TYPE': content_type,
            'CONTENT_LENGTH': str(len(body_bytes))
        }

        fs = cgi.FieldStorage(
            fp=BytesIO(body_bytes),
            environ=environ,
            headers={'content-type': content_type},
            keep_blank_values=True
        )

        if 'file' not in fs:
            raise ValueError("No file uploaded with key 'file'.")

        file_item = fs['file']
        content = file_item.file.read().decode('utf-8')

        json_start = content.find('{')
        if json_start == -1:
            raise ValueError("Uploaded file must contain valid JSON content.")
        json_data = json.loads(content[json_start:])

        model_name = get_model_instance_name(headers)
        count = get_count(headers)
        result = [generate_random_structure(json_data) for _ in range(count)]

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"datasets": result})
        }

    except Exception as e:
        logger.error(f"Error: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
