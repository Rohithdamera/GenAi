


import requests
import time
import re
import json

SSE_URL = "https://vendorstool-app-6b0n96.dw4w1g-1.gbr-e1.cloudhub.io/sse"
BASE_MESSAGE_URL = "https://vendorstool-app-6b1n96.dw4w1g-1.gbr-e1.cloudhub.io/message"

headers = {
    "Content-Type": "application/json"
}

payload = {
    "method": "tools/call",
    "params": {
        "name": "get-vendors",
        "arguments": {}
    }
}

def wait_for_initial_session_id(timeout=60):
    print("🔌 Waiting for initial session ID...")
    try:
        with requests.get(SSE_URL, stream=True, timeout=timeout) as response:
            if response.status_code == 200:
                for line in response.iter_lines():
                    if line:
                        decoded = line.decode("utf-8")
                        print("📡 SSE:", decoded)

                        match = re.search(r'data: /message\?sessionId=([a-f0-9\-]+)', decoded)
                        if match:
                            session_id = match.group(1)
                            print("✅ Initial Session ID:", session_id)
                            return session_id
            else:
                print("❌ Could not connect to SSE. Status:", response.status_code)
    except Exception as e:
        print("❌ Exception while waiting for session ID:", e)
    return None

def send_post(session_id, label="Request"):
    url = f"{BASE_MESSAGE_URL}?sessionId={session_id}"
    try:
        print(f"📤 Sending {label} POST to MCP...")
        response = requests.post(url, headers=headers, json=payload, timeout=60)
        print(f"✅ {label} POST Status: {response.status_code}")
        print(f"📨 {label} Response: {response.text}")
        return response
    except Exception as e:
        print(f"❌ Failed to send {label} POST:", e)
    return None

def listen_for_final_data(timeout=180):
    print("👂 Listening for final data...")
    try:
        with requests.get(SSE_URL, stream=True, timeout=timeout) as response:
            if response.status_code == 200:
                for line in response.iter_lines():
                    if line:
                        decoded = line.decode("utf-8")
                        print("📦 SSE:", decoded)

                        data_match = re.search(r'data: (.+)', decoded)
                        if data_match:
                            raw = data_match.group(1)
                            try:
                                json_data = json.loads(raw)
                                print("✅✅ Final Vendor Data Received:")
                                print(json.dumps(json_data, indent=2))
                                return True
                            except json.JSONDecodeError:
                                # Ignore invalid JSON (still session links or intermediate logs)
                                continue
            else:
                print("❌ SSE reconnect failed. Status:", response.status_code)
    except Exception as e:
        print("❌ Exception while listening for final data:", e)
    return False

if __name__ == "__main__":
    print("🚀 Connecting to MCP...")

    # STEP 1: Get initial session ID
    session_id = wait_for_initial_session_id()

    if session_id:
        # STEP 2: Send actual payload POST
        send_post(session_id, label="Initial")

        # STEP 3: Wait a bit (depends on server processing time)
        print("⏳ Waiting 10 seconds for server to process...")
        time.sleep(10)

        # STEP 4: Listen for final vendor data in SSE
        success = listen_for_final_data()

        if success:
            print("🎉 Final vendor data received successfully.")
        else:
            print("❌ Failed to receive final vendor data.")
    else:
        print("❌ No session ID received. Exiting.")
