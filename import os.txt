import requests
import time
import re
import json

SSE_URL = "https://vendorstool-app-6b0n96.dw4w1g-1.gbr-e1.cloudhub.io/sse"
BASE_MESSAGE_URL = "https://vendorstool-app-6b1n96.dw4w1g-1.gbr-e1.cloudhub.io/message"

headers = {
    "Content-Type": "application/json"
}

payload = {
    "method": "tools/call",
    "params": {
        "name": "get-vendors",
        "arguments": {}
    }
}

def send_post_request(session_id, label=""):
    url = f"{BASE_MESSAGE_URL}?sessionId={session_id}"
    try:
        print(f"üî∏ Sending {label} POST request to get vendor data...")
        response = requests.post(url, json=payload, headers=headers, timeout=300)
        print(f"‚úÖ {label} POST Status Code: {response.status_code}")
        print(f"üì© {label} POST Response: {response.text}")
        return response
    except requests.exceptions.RequestException as e:
        print(f"‚ùå {label} POST request failed:", e)
    return None

def listen_and_respond(timeout=300):
    seen_sessions = set()
    print("üîÅ Listening to SSE stream for all session IDs and data...")
    try:
        with requests.get(SSE_URL, stream=True, timeout=timeout) as response:
            if response.status_code == 200:
                for line in response.iter_lines():
                    if line:
                        decoded = line.decode('utf-8')
                        print("üì¶ SSE:", decoded)

                        # Extract sessionId
                        match = re.search(r'data: /message\?sessionId=([a-f0-9\-]+)', decoded)
                        if match:
                            session_id = match.group(1)
                            if session_id not in seen_sessions:
                                seen_sessions.add(session_id)
                                send_post_request(session_id, label="Detected")
                            continue

                        # Extract actual data
                        data_match = re.search(r'data: (.+)', decoded)
                        if data_match:
                            try:
                                data_json = json.loads(data_match.group(1))
                                print("‚úÖ‚úÖ Final Vendor Data Received:")
                                print(json.dumps(data_json, indent=2))
                                return True  # Exit once final data received
                            except json.JSONDecodeError:
                                print("‚ö†Ô∏è Invalid JSON, skipping:", data_match.group(1))
            else:
                print("‚ùå Failed to connect to SSE. Status:", response.status_code)
    except requests.exceptions.RequestException as e:
        print("‚ùå SSE stream error:", e)
    return False

if __name__ == "__main__":
    print("üöÄ Connecting to MCP server via SSE...")

    success = listen_and_respond(timeout=600)
    if success:
        print("‚úÖ Process completed successfully with final vendor data.")
    else:
        print("‚ùå Vendor data was not received.")
