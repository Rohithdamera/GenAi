import os
import xml.etree.ElementTree as ET
from pathlib import Path

from langchain.chat_models import AzureChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.agents import initialize_agent, Tool
from langchain.memory import ConversationBufferMemory

# Azure OpenAI Configuration
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="Fourth_Chatbot",
        openai_api_key="",  # Replace with your actual key
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        temperature=0.7,
        max_tokens=2000,
        top_p=0.9,
        frequency_penalty=0.2,
        presence_penalty=0.1
    )

# Globals
project_path = r"C:\\Users\\rdamera\\Downloads\\OrderManagement 1"

# TOOL: Find all .xml files in mule folder (including subfolders)
def find_all_mule_xml_files(folder_path): 
    xml_files = []
    for root, dirs, files in os.walk(folder_path):
        normalized_root = os.path.normpath(root)
        if normalized_root.endswith(os.path.normpath(os.path.join("src", "main", "mule"))):
            for file in files:
                if file.endswith(".xml"):
                    xml_files.append(os.path.join(root, file))
            for sub_root, _, sub_files in os.walk(root):
                for file in sub_files:
                    if file.endswith(".xml"):
                        xml_files.append(os.path.join(sub_root, file))
            break
    return xml_files

def summarize_single_file(file_path: str) -> str:
    try:
        tree = ET.parse(file_path)
        root = tree.getroot()
        xml_content = ET.tostring(root, encoding="unicode", method="xml")
        client = get_openai_client()
        prompt_template = PromptTemplate(
            input_variables=["xml_content"],
            template="""You are an expert in MuleSoft XML configuration. Analyze the following XML file and generate a short, clear, high-level summary.
Only provide a summary. Do not include the original XML content. Focus on explaining integration logic briefly.

{xml_content}
"""
        )
        chain = LLMChain(llm=client, prompt=prompt_template)
        return chain.run(xml_content=xml_content)
    except Exception as e:
        return f"Error processing {file_path}: {str(e)}"

def summarize_all_files():
    xml_files = find_all_mule_xml_files(project_path)
    if not xml_files:
        return "No MuleSoft XML files found in the project."

    summaries = []
    for file_path in xml_files:
        summary = summarize_single_file(file_path)
        summaries.append(summary)

    combined_summaries = "\n\n".join(summaries)
    client = get_openai_client()
    prompt_template = PromptTemplate(
        input_variables=["combined_summaries"],
        template="""You are an expert in summarizing multiple MuleSoft configuration summaries.
Based on the following input summaries from multiple XML files, generate one clean, concise, human-readable summary.
Keep it short and helpful for understanding the project.

{combined_summaries}
"""
    )
    chain = LLMChain(llm=client, prompt=prompt_template)
    return chain.run(combined_summaries=combined_summaries)

# MAIN
if __name__ == "__main__":
    final_result = summarize_all_files()
    print("\n====== FINAL TECHNICAL SUMMARY ======\n")
    print(final_result)



