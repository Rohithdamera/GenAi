	

i had employee microservice, , all the crud operations are done , now i want to call that microservice with another admin microservice using resttemplate declare all the implementations like entity , dto, mapper, service , service impl , and controller and also i want to use circuit breaker and cache

 @Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	//@JsonProperty("firstname")
	@Column(name ="Firstname")
	private String firstname;
	@Column(name ="Lastname")
	private String lastname;
	@Column(name ="Email")
	private String email;
	@Column(name ="Gender")
	private String gender;
	@Column(name ="Age")
	private int age ;
	


dto 

public class EmployeeDto {
	
    private long id;
	private String firstname;
	private String lastname;
	private String email;
	private String gender;
	private int age ;
	public long getId() {
		return id;



mapper 


	public static EmployeeDto mapToEmployeeDto(Employee employee) {
		return new  EmployeeDto(
				employee.getId(),
				employee.getFirstname(),
				employee.getLastname(),
				employee.getEmail(),
				employee.getGender(),
				employee.getAge()
				);
		
	}	
	
	public static Employee mapToEmployee(EmployeeDto  employeeDto)	{
		return new Employee(
				employeeDto.getId(),
				employeeDto.getFirstname(),
				employeeDto.getLastname(),
				employeeDto.getEmail(),
				employeeDto.getGender(),
				employeeDto.getAge()
				
				);

repository 


public interface EmployeeRepository  extends JpaRepository<Employee,    Long>{
	
List<Employee> getByAge(int age);

}


service 

package Employee.Management.BackenEnd.service;



import java.util.List;

import Employee.Management.BackenEnd.dto.EmployeeDto;

public interface EmployeeService {
	
	EmployeeDto createEmployee(EmployeeDto employeeDto);
	
	EmployeeDto getEmployeeByid(Long Employeeid);
	
	List<EmployeeDto> getAllEmployee();
	
	List<EmployeeDto> GetEmployeebyage (int age);
	
	EmployeeDto updateEmployee(Long Employeeid , EmployeeDto updatedEmployee);
	
	
	void deleteEmployee (Long Employeeid);
	

}

service impl 

@Override
	public EmployeeDto getEmployeeByid(Long Employeeid) {
		Employee employee= employeerepository.findById(Employeeid)
		.orElseThrow(() -> new ResourceNotFoundException ("employee not found with id no "+Employeeid));
		return EmployeeMapper.mapToEmployeeDto(employee);
	}

	@Override
	public List<EmployeeDto> getAllEmployee() {
		List<Employee> employees =employeerepository.findAll();
		//return employees.stream().map((employee)->EmployeeMapper.mapToEmployeeDto(employee)).collect(Collectors.toList());
		return employees.stream().map(EmployeeMapper:: mapToEmployeeDto).collect(Collectors.toList());
	}


controller

	@GetMapping("/age/{age}")
	public ResponseEntity<List<EmployeeDto>>GetEmployeebyage(@PathVariable("age")int age ){
		List<EmployeeDto> employeeDto= employeeService.GetEmployeebyage(age);
			return new ResponseEntity<>(employeeDto, HttpStatus.OK);
		
	}
	
	@GetMapping("/all")
	public ResponseEntity<List<EmployeeDto>> getAllEmployee(){
		List<EmployeeDto> employee= employeeService.getAllEmployee();
		return  ResponseEntity.ok(employee);
	}






the code need to follow this structure 


admin-service/
├── controller/
│   └── AdminController.java
├── dto/
│   └── EmployeeDto.java
├── mapper/
│   └── EmployeeMapper.java
├── service/
│   ├── AdminService.java
│   └── AdminServiceImpl.java
├── config/
│   ├── AppConfig.java
│   └── CacheConfig.java
├── AdminServiceApplication.java
└── resources/
    └── application.yml
