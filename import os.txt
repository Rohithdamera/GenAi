import json
import base64
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Function to unpad data after decryption (removes padding bytes)
def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

# AES decryption function
def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Error during decryption: {e}")
        raise ValueError(f"Error during decryption: {e}")

# Helper: Check if a string is a datetime-like value
def is_datetime_like(value):
    return isinstance(value, str) and any(sep in value for sep in ['/', '-', ':']) and any(char.isdigit() for char in value)

# Helper: Check if string is UUID-like
def is_uuid_like(value):
    return isinstance(value, str) and len(value) in [36, 32] and '-' in value

# Helper: Check if string is numeric (but stored as string)
def is_numeric_string(value):
    return value.isdigit()

# Generate a random datetime string
def random_datetime():
    return "01/01/2025 12:00:00"

# Generate a UUID-like random string
def random_uuid():
    sections = [8, 4, 4, 4, 12]
    return '-'.join(''.join(random.choices(string.hexdigits.lower(), k=s)) for s in sections)

# Generate string with same length and character type
def random_string_like(value):
    if is_datetime_like(value):
        return random_datetime()
    elif is_uuid_like(value):
        return random_uuid()
    elif is_numeric_string(value):
        return ''.join(random.choices(string.digits, k=len(value)))
    else:
        return ''.join(random.choices(string.ascii_letters + string.digits, k=len(value)))

# Generate random value by sample
def generate_random_value_by_sample(sample_value):
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif isinstance(sample_value, str):
        return random_string_like(sample_value)
    elif sample_value is None:
        return None
    else:
        return sample_value  # fallback

# Recursively generate structure
def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(item) for item in template]
    else:
        return generate_random_value_by_sample(template)

# Get model instance name from headers
def get_model_instance_name(event):
    return event.get('headers', {}).get('model_instance_name', 'default_chatbot')

# Lambda handler
def lambda_handler(event, context):
    logger.info("Lambda function invoked.")
    
    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("Missing or invalid file data in request.")
        
        # Decode and parse JSON
        content = base64.b64decode(event['body']).decode('utf-8')
        json_start = content.find('{')
        if json_start == -1:
            raise ValueError("No JSON content found in RAML file.")
        
        json_string = content[json_start:]
        original_data = json.loads(json_string)

        # Generate output
        randomized_data = generate_random_structure(original_data)

        model_instance_name = get_model_instance_name(event)
        logger.info(f"Generated test data for model instance '{model_instance_name}'")

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(randomized_data)
        }

    except Exception as e:
        logger.error(f"Error in Lambda handler: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }
