
import gradio as gr
import boto3
import re
from langchain_openai import AzureChatOpenAI

# --- AWS S3 Config (no hardcoded credentials) ---
s3 = boto3.client("s3")  # Uses env vars, profiles, or IAM role
S3_BUCKET = "oosif-files"          # change if needed
S3_KEY = "OSIF_Dependency_req.txt" # change if needed

# --- Azure OpenAI Client ---
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="gpt-4_complex_conversions",
        openai_api_key="",  # supply at runtime
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        temperature=0.3,
        max_tokens=2000,
    )

llm = get_openai_client()


# --- Load file from S3 ---
def load_s3_file():
    obj = s3.get_object(Bucket=S3_BUCKET, Key=S3_KEY)
    return obj["Body"].read().decode("utf-8")


# --- Identify connector title using AI ---
def identify_connector(query, content):
    titles = re.findall(r"Title\s*:\s*(.+)", content, flags=re.IGNORECASE)
    connector_list = "\n".join([t.strip() for t in titles])

    prompt = f"""
You are given a list of connector titles from a file:
{connector_list}

User asked: "{query}"

Your task:
- Identify which connector title best matches the user's request.
- Only return the exact connector title string from the list above.
- If nothing matches, return "NOT_FOUND".
"""

    response = llm.invoke(prompt)
    connector = response.content.strip()
    return connector


# --- Extract the block for the connector ---
def extract_block(content, connector_title):
    if connector_title == "NOT_FOUND":
        return "Could not identify connector from your question."

    # Regex to capture Title and everything until next Title or EOF
    pattern = rf"(Title\s*:\s*{re.escape(connector_title)}[\s\S]*?)(?=Title\s*:|$)"
    match = re.search(pattern, content, flags=re.IGNORECASE)
    if match:
        return match.group(1).strip()

    return f"Connector '{connector_title}' not found in file."


# --- Chatbot handler ---
def chatbot_response(message, history):
    try:
        content = load_s3_file()
        connector_title = identify_connector(message, content)
        result = extract_block(content, connector_title)
        return result
    except Exception as e:
        return f"Error: {str(e)}"


# --- Gradio UI ---
chatbot_ui = gr.ChatInterface(
    fn=chatbot_response,
    title="OSIF Connector Lookup",
    description="Ask about connector properties (e.g., 'give me sales force connector properties')",
    theme="default"
)

if __name__ == "__main__":
    chatbot_ui.launch(debug=False)


---

ðŸ”‘ Key Fix

Instead of splitting by lines, I use regex:

(Title : <connector> ... until next Title : or EOF)

This way the whole block with indentation is returned exactly as in .txt.



---

ðŸ§ª Example

Question:
give me sales-force-connector properties

Response:

Title :sales-force-connector

 core:
  connectors:
    sfdc:
      title: sales-force-connector
      authUrl: https://login.salesforce.com
      username: your-username
      password: your-password
      client_id: your-client_id
      client_secret: your-client-secret
      grant_type: password
      queryUrl: /
      version: v53.0


---

ðŸ‘‰ Do you also want me to make the AI normalize abbreviations like "sfdc" â†’ "sales-force-connector" automatically?

