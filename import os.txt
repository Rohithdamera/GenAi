import os
import json
import base64
import logging
import zipfile
from io import BytesIO

import openai  # Requires: pip install openai

# OpenAI Azure settings from environment variables
openai.api_type = "azure"
openai.api_key = os.getenv("OPENAI_API_KEY")
openai.api_base = os.getenv("OPENAI_API_BASE")
openai.api_version = os.getenv("OPENAI_API_VERSION")

# Set up logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    try:
        # Get headers and query parameters
        headers = event.get("headers", {})
        query_params = event.get("queryStringParameters", {})

        model_instance_name = headers.get("model_instance_name")
        count = int(headers.get("count", 1))
        input_type = query_params.get("input", "").strip()

        if not model_instance_name:
            return respond(400, {"error": "Missing 'model_instance_name' in headers."})

        if input_type not in ["/sampleforraml", "/sampleforxsd"]:
            return respond(400, {"error": "Invalid input. Use /sampleforraml or /sampleforxsd."})

        # Decode base64 file from Postman
        body = base64.b64decode(event["body"])

        # Extract file and content
        file_data, file_ext = extract_file(body)

        # Determine prompt/instruction based on input
        if input_type == "/sampleforraml":
            if file_ext != ".yml":
                return respond(400, {"error": "Only .yml files are allowed for /sampleforraml"})
            instruction = (
                "You are an expert in analysing the RAML and generating the payload from the RAML. "
                "I am providing the RAML which will be used as an asset for designing my API. "
                "Please anlayze the RAML and generate the sample payload which will honour all the rules inside the RAML. "
                "You can refer the link for any doubts related to RAML https://raml.org/developers/raml-100-tutorial"
            )
            prompt = f"Please generate {count} different payloads for all the endpoints in the RAML."

        elif input_type == "/sampleforxsd":
            if file_ext != ".xsd":
                return respond(400, {"error": "Only .xsd files are allowed for /sampleforxsd"})
            instruction = (
                "You are an expert in analysing the XSD and generating the payload from the XSD. "
                "I am providing the XSD which will be used as an asset for designing my API. "
                "Please anlayze the XSD and generate the sample payload which will honour all the rules inside the XSD. "
                "You can refer the link for any doubts related to XSD https://www.tutorialspoint.com/xsd/index.htm"
            )
            prompt = f"Please generate {count} different payloads for the given XSD."

        # Compose messages for OpenAI
        messages = [
            {"role": "system", "content": instruction},
            {"role": "user", "content": prompt},
            {"role": "user", "content": file_data}
        ]

        # Make OpenAI API call
        response = openai.ChatCompletion.create(
            engine=model_instance_name,
            messages=messages,
            temperature=0.7,
            max_tokens=3000
        )

        response_text = response["choices"][0]["message"]["content"]

        # Extract JSON blocks
        extracted_payloads = extract_json_blocks(response_text)

        return respond(200, {
            "instruction": instruction,
            "prompt": prompt,
            "payloads": extracted_payloads
        })

    except Exception as e:
        logger.error(f"Unhandled error: {e}")
        return respond(500, {"error": "Internal Server Error", "details": str(e)})


def extract_file(body_bytes):
    zip_buffer = BytesIO(body_bytes)
    with zipfile.ZipFile(zip_buffer, 'r') as zip_ref:
        for file in zip_ref.namelist():
            if file.lower().endswith((".yml", ".xsd")):
                return zip_ref.read(file).decode('utf-8'), os.path.splitext(file)[1]
    raise Exception("No valid .yml or .xsd file found in the uploaded zip.")


def extract_json_blocks(text):
    blocks = []
    inside = False
    current = []
    for line in text.splitlines():
        if line.strip().startswith("```json"):
            inside = True
            current = []
            continue
        if line.strip().startswith("```") and inside:
            try:
                json_obj = json.loads("\n".join(current))
                blocks.append(json_obj)
            except:
                blocks.append("\n".join(current))  # Fallback if not valid JSON
            inside = False
            continue
        if inside:
            current.append(line)

    if not blocks:
        blocks.append(text)  # Fallback: return raw content
    return blocks


def respond(status_code, body_dict):
    return {
        "statusCode": status_code,
        "headers": {"Content-Type": "application/json"},
        "body": json.dumps(body_dict)
    }
