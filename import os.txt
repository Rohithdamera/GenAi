import gradio as gr
import mysql.connector
import json
from pathlib import Path
from langchain_openai import AzureChatOpenAI
from langchain_core.messages import HumanMessage, AIMessage
from langgraph.prebuilt import create_react_agent
from langchain_core.tracers.stdout import ConsoleCallbackHandler
from langchain.callbacks.tracers import ConsoleCallbackHandler as LegacyConsoleCallbackHandler
from langchain_community.callbacks import get_openai_callback

# ====================================================
# Shared: Azure OpenAI Client
# ====================================================
llm = AzureChatOpenAI(
    deployment_name="gpt-4_complex_conversions",
    azure_endpoint="https://testopenaiassets.openai.azure.com",
    openai_api_key="",  # Supply key
    openai_api_version="2025-01-01-preview",
)

# ====================================================
# Shared: Token Tracker
# ====================================================
class TokenTracker:
    """Centralized token usage tracker."""

    @staticmethod
    def run_with_tracking(func, *args, **kwargs):
        with get_openai_callback() as cb:
            result = func(*args, **kwargs)

            usage_summary = "\n\n--- Token Usage ---"
            usage_summary += f"\nTotal Tokens: {cb.total_tokens}"
            usage_summary += f"\nPrompt Tokens: {cb.prompt_tokens}"
            usage_summary += f"\nCompletion Tokens: {cb.completion_tokens}"
            usage_summary += f"\nTotal Cost (USD): ${format(cb.total_cost, '.6f')}"

        return result, usage_summary

# ====================================================
# Agent 1: Log Analysis (Code 1)
# ====================================================
config = {
    "host": "34.224.108.183",
    "user": "OSIF",
    "password": "123456@Cap",
    "database": "OSIF"
}

def fetch_logs():
    conn = mysql.connector.connect(**config)
    cursor = conn.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM log_entries ORDER BY id DESC LIMIT 100")
        results = cursor.fetchall()
    except Exception as e:
        results = [{"error": str(e)}]
    cursor.close()
    conn.close()
    return results

class LogAnalysisAgent:
    def run(self, user_prompt, history):
        try:
            results = fetch_logs()
            if not results or "error" in results[0]:
                return f"Could not fetch logs from DB: {results}"

            # Build log summary
            level_counts = {}
            for log in results:
                level = log.get("level", "UNKNOWN").upper()
                level_counts[level] = level_counts.get(level, 0) + 1

            summary = "\n".join([f"{level}: {count}" for level, count in level_counts.items()])
            debug_count = level_counts.get("DEBUG", 0)
            logs_str = json.dumps(results, indent=2, default=str)

            # Prepare messages
            messages = [
                {
                    "role": "system",
                    "content": (
                        """
You are a highly experienced data analyst specializing in system and API log analysis.
...
Your goal is to help users understand the behavior and performance of their systems based on the logs they provide.
"""
                    ),
                },
                {
                    "role": "user",
                    "content": (
                        f"{user_prompt}\n\n"
                        f"--- Log Summary ---\n{summary}\n\n"
                        f"Total DEBUG logs: {debug_count}\n\n"
                        f"--- Raw Logs (latest 100 rows) ---\n{logs_str}"
                    )
                },
            ]

            def _call_llm():
                return llm.invoke(messages, config={"callbacks": [LegacyConsoleCallbackHandler()]})

            result, usage = TokenTracker.run_with_tracking(_call_llm)
            return result.content + usage

        except Exception as e:
            return f"Error: {str(e)}"

# ====================================================
# Agent 2: File/Code Analysis (Code 2)
# ====================================================
agent = create_react_agent(
    model=llm,
    tools=[],
    verbose=True
)

class FileAnalysisAgent:
    def run(self, message, history, file=None):
        messages = []

        if history is not None:
            for user_msg, bot_msg in history:
                messages.append(HumanMessage(content=user_msg))
                messages.append(AIMessage(content=bot_msg))

        file_content = ""
        if file is not None:
            try:
                with open(file.name, "r", encoding="utf-8", errors="ignore") as f:
                    file_content = f.read()
            except Exception as e:
                file_content = f"[Error reading file: {e}]"

        user_message = f"User question:\n{message}\n\nAttached file content:\n{file_content}" if file_content else message
        messages.append(HumanMessage(content=user_message))

        def _call_agent():
            return agent.invoke(
                {"messages": messages},
                config={"callbacks": [ConsoleCallbackHandler()]}
            )

        result, usage = TokenTracker.run_with_tracking(_call_agent)
        final_response = result["messages"][-1].content
        return final_response + usage

# ====================================================
# Gradio UI
# ====================================================
log_agent = LogAnalysisAgent()
file_agent = FileAnalysisAgent()

with gr.Blocks(theme="default") as demo:
    gr.Markdown("## OSIF Co-Developer (Unified Agents)")

    with gr.Tab("Log Analysis Agent"):
        gr.ChatInterface(
            fn=log_agent.run,
            title="Log Analysis Agent",
            description="Query system/API logs from MySQL with natural language",
        )

    with gr.Tab("File/Code Agent"):
        gr.ChatInterface(
            fn=file_agent.run,
            additional_inputs=[
                gr.File(
                    label="Upload a file (optional)",
                    file_types=[".txt", ".java", ".py", ".js", ".cpp", ".md", ".log", "*"]
                )
            ],
            title="File Analysis Agent",
            description="Ask coding or log-related questions, paste code, or upload files. The AI will analyze and answer.",
        )

# ====================================================
# Launch
# ====================================================
if __name__ == "__main__":
    demo.launch(debug=False)