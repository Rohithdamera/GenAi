import re
import boto3
import yaml

def fetch_s3_file_content(arn: str) -> str:
    """Fetch raw file content from S3 using its ARN."""
    match = re.match(r"^arn:aws:s3:::(.+?)/(.*)$", arn)
    if not match:
        raise ValueError("Invalid S3 ARN format")
    
    bucket, key = match.groups()
    s3 = boto3.client("s3")  # Use default AWS creds from environment/role
    obj = s3.get_object(Bucket=bucket, Key=key)
    content = obj["Body"].read().decode("utf-8")
    
    if not content.strip():
        raise ValueError("S3 file is empty or unreadable.")
    
    return content

def extract_connector_block(file_content: str, connector_name: str) -> str:
    """
    Given YAML content and connector name, find and return only that connector's block.
    """
    parsed_yaml = yaml.safe_load(file_content)
    connectors = parsed_yaml.get("core", {}).get("connectors", {})

    # Normalize and search
    name_lower = connector_name.lower()
    matched_key = None
    for key, value in connectors.items():
        title = value.get("title", key)
        if name_lower in (title.lower(), key.lower()):
            matched_key = key
            break
    
    if not matched_key:
        raise ValueError(f"Connector '{connector_name}' not found in S3 file.")

    # Extract raw block from the original file for exact formatting
    lines = file_content.splitlines()
    start_index = None
    for i, line in enumerate(lines):
        if re.match(rf"^{matched_key}:\s*$", line.strip()):
            start_index = i
            break

    if start_index is None:
        raise ValueError(f"Connector '{matched_key}' found in YAML but block not located in file.")

    block_lines = [lines[start_index]]
    base_indent = len(lines[start_index]) - len(lines[start_index].lstrip())

    for j in range(start_index + 1, len(lines)):
        current_line = lines[j]
        current_indent = len(current_line) - len(current_line.lstrip())
        if current_line.strip() == "":
            block_lines.append(current_line)
        elif current_indent > base_indent:
            block_lines.append(current_line)
        else:
            break

    return "\n".join(block_lines)

if __name__ == "__main__":
    # Example usage
    S3_ARN = "arn:aws:s3:::osif-files/OSIF_Dependency_req.txt"
    connector_to_fetch = "salesforce"  # Example: input from user or API

    file_content = fetch_s3_file_content(S3_ARN)
    connector_block = extract_connector_block(file_content, connector_to_fetch)

    print(connector_block)
