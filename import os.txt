import http.client
import json
from urllib.parse import urlparse
from http.client import IncompleteRead

# === MCP Configuration ===
MCP_URL = "https://your.mcp.server.url"  # Replace this with real one

MCP_PAYLOAD = {
    "method": "tools/call",
    "params": {
        "name": "get-vendors",
        "arguments": {}
    }
}

# === Workaround to read incomplete response ===
def safe_read_response(response):
    try:
        return response.read().decode("utf-8", errors="ignore")
    except IncompleteRead as e:
        print(f"[WARN] IncompleteRead, recovering partial content ({len(e.partial)} bytes)...")
        return e.partial.decode("utf-8", errors="ignore")

# === Main Fetch Function ===
def fetch_raw_from_mcp():
    parsed = urlparse(MCP_URL)
    host = parsed.hostname
    port = parsed.port or (443 if parsed.scheme == 'https' else 80)
    path = parsed.path or "/"

    print("⏳ Connecting via raw socket with recovery...")

    try:
        conn = http.client.HTTPSConnection(host, port, timeout=180)
        headers = {
            "Content-Type": "application/json",
            "Connection": "keep-alive"
        }

        body = json.dumps(MCP_PAYLOAD)
        conn.request("POST", path, body=body, headers=headers)
        response = conn.getresponse()

        raw_data = safe_read_response(response)

        # Try to parse JSON
        try:
            parsed_json = json.loads(raw_data)
            print("✅ Parsed valid JSON response!")
            return parsed_json
        except json.JSONDecodeError:
            print("⚠️ JSON parsing failed. Dumping raw text:")
            print(raw_data)
            return raw_data  # Return raw text if parsing fails

    except Exception as e:
        print(f"[ERROR] MCP raw fetch failed: {e}")
        return None

# === Run ===
if __name__ == "__main__":
    result = fetch_raw_from_mcp()

    if isinstance(result, dict):
        print("\n✅ Final Parsed Response:\n")
        print(json.dumps(result, indent=2))
    elif isinstance(result, str):
        print("\n⚠️ Raw MCP response (non-parsable):\n")
        print(result)
    else:
        print("\n❌ Could not retrieve or decode MCP response.")
