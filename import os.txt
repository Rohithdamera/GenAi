
import gradio as gr
import boto3
import json
import yaml
import re
from langchain_openai import AzureChatOpenAI
from langchain_community.agent_toolkits.load_tools import load_tools
from langgraph.prebuilt import create_react_agent
from langgraph.graph import StateGraph, END
from typing import TypedDict
from langchain_core.messages import HumanMessage, AIMessage
from langgraph.graph import MessagesState


# -------------------------
# AWS S3 Utility
# -------------------------
def fetch_s3_file_content(arn: str) -> str:
    """
    Given an S3 file ARN, fetch and return its content as a string.
    Example ARN: arn:aws:s3:::my-bucket-name/path/to/file.txt
    """
    # Parse ARN to bucket and key
    match = re.match(r"^arn:aws:s3:::(.+?)/(.*)$", arn)
    if not match:
        raise ValueError("Invalid S3 ARN format")

    bucket, key = match.groups()

    s3 = boto3.client("s3",
                      aws_access_key_id="YOUR_AWS_ACCESS_KEY_ID",
                      aws_secret_access_key="YOUR_AWS_SECRET_ACCESS_KEY",
                      region_name="us-east-1")

    obj = s3.get_object(Bucket=bucket, Key=key)
    return obj["Body"].read().decode("utf-8")


def extract_connector_info(file_content: str, connector_name: str):
    """
    Extracts connector block from the S3 file and returns explanation + exact config.
    """
    # Assuming YAML format in S3 file
    try:
        data = yaml.safe_load(file_content)
    except yaml.YAMLError:
        # If it's JSON
        data = json.loads(file_content)

    # Normalize connector name search
    connector_key = connector_name.lower().replace(" ", "-")

    # Traverse structure to find the matching connector
    connectors_data = data.get("core", {}).get("connectors", {})
    if connector_key not in connectors_data:
        return None, None

    connector_config = connectors_data[connector_key]

    # Build explanation dynamically
    explanation_lines = []
    for key, value in connector_config.items():
        explanation_lines.append(f"**{key}**: This is the `{key}` parameter for the {connector_name} connector.")

    explanation_text = "\n".join(explanation_lines)

    # Return explanation + exact YAML block
    return explanation_text, yaml.dump({"core": {"connectors": {connector_key: connector_config}}}, sort_keys=False)


# -------------------------
# LangChain + Graph Setup
# -------------------------
class State(TypedDict):
    messages: MessagesState


llm = AzureChatOpenAI(
    deployment_name="Fourth_Chatbot",
    azure_endpoint="https://testopenaiassets.openai.azure.com",
    openai_api_key="",
    openai_api_version="2024-08-01-preview"
)

tools = load_tools(["llm-math"], llm=llm)
agent_node = create_react_agent(llm, tools)

graph = StateGraph(State)
graph.add_node("react_agent", agent_node)
graph.set_entry_point("react_agent")
graph.add_edge("react_agent", END)
agent_executor = graph.compile()


# -------------------------
# Chatbot Handler
# -------------------------
S3_ARN = "arn:aws:s3:::osif-files/OSIF_Dependency_req.txt"  # Your file ARN

def chat_with_agent(message, history):
    # First, detect connector name from question
    connector_match = re.search(r"(sales[- ]?force|snowflake|sfdc)", message, re.IGNORECASE)
    if connector_match:
        connector_name = connector_match.group(1)
        file_content = fetch_s3_file_content(S3_ARN)
        explanation, config_yaml = extract_connector_info(file_content, connector_name)
        if explanation and config_yaml:
            return f"**Explanation:**\n{explanation}\n\n**Configuration:**\n```yaml\n{config_yaml}\n```"

    # Otherwise, fallback to normal agent
    messages = []
    for user_msg, bot_msg in history:
        messages.append(HumanMessage(content=user_msg))
        messages.append(AIMessage(content=bot_msg))
    messages.append(HumanMessage(content=message))
    result = agent_executor.invoke({"messages": messages}, verbose=True)
    return result["messages"][-1].content


# -------------------------
# Gradio UI
# -------------------------
chatbot_ui = gr.ChatInterface(
    fn=chat_with_agent,
    title="OSIF Co-Developer",
    description="Your co-developer for OSIF development",
    theme="default"
)

if __name__ == "__main__":
    chatbot_ui.launch()



