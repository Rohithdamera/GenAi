import json
import base64
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Error during decryption: {e}")
        raise ValueError(f"Error during decryption: {e}")

def generate_random_value(value):
    if isinstance(value, int):
        return random.randint(1000, 9999)
    elif isinstance(value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(value, str):
        return ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(4, 10)))
    elif isinstance(value, list):
        return [generate_random_value(v) for v in value]
    elif isinstance(value, dict):
        return {k: generate_random_value(v) for k, v in value.items()}
    else:
        return value

def lambda_handler(event, context):
    logger.info("Lambda function invoked.")

    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("Missing or invalid file data in request.")

        # Decode base64 RAML file
        content = base64.b64decode(event['body']).decode('utf-8')

        # Extract JSON portion starting from first '{'
        json_start = content.find('{')
        if json_start == -1:
            raise ValueError("No JSON content found in RAML file.")
        
        json_string = content[json_start:]
        original_data = json.loads(json_string)

        # Generate randomized values
        randomized_data = generate_random_value(original_data)

        # Updated prompt for documentation (if needed elsewhere)
        prompt = (
            "You are an expert RAML analyzer. Analyze the following RAML content, "
            "resolve all included files, traits, resource types, and fragments, "
            "and generate two randomized test payloads for each endpoint defined. "
            "The payload must maintain the field names and structure, but all values "
            "must be changed to realistic random examples matching the original data types. "
            "Return only the JSON with endpoints and their test payloads."
        )

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(randomized_data)
        }

    except Exception as e:
        logger.error(f"Error in Lambda handler: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }
