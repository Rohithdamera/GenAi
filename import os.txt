import os
import shutil
import zipfile
import json
from base64 import b64decode
import logging
import random
import string

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------- UTILS ----------------

def extract_examples_and_endpoints(raml_text):
    """Extract example JSON from RAML content per endpoint."""
    lines = raml_text.splitlines()
    examples = {}
    current_endpoint = None
    example_block = []
    inside_example = False
    for line in lines:
        stripped = line.strip()
        if stripped.startswith("/"):
            current_endpoint = stripped
            inside_example = False
        elif "example:" in stripped:
            inside_example = True
            example_block = []
        elif inside_example:
            if line.startswith(" ") or line.startswith("\t"):
                example_block.append(line.strip())
            else:
                try:
                    if current_endpoint and example_block:
                        examples[current_endpoint] = json.loads("\n".join(example_block))
                except Exception:
                    pass
                inside_example = False
    # catch last block
    if inside_example and current_endpoint and example_block:
        try:
            examples[current_endpoint] = json.loads("\n".join(example_block))
        except Exception:
            pass
    return list(examples.keys()), examples

def generate_random_payload(template):
    """Generate a random payload based on the template (example) structure."""
    if isinstance(template, dict):
        return {k: generate_random_payload(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_payload(template[0])] if template else []
    elif isinstance(template, str):
        return ''.join(random.choices(string.ascii_letters, k=8))
    elif isinstance(template, bool):
        return random.choice([True, False])
    elif isinstance(template, int) or isinstance(template, float):
        return random.randint(1, 9999)
    else:
        return None

def unzip_raml(zip_bytes, extract_dir="/tmp/temp_raml"):
    """Unzip the uploaded ZIP file containing the RAML files."""
    if os.path.exists(extract_dir):
        shutil.rmtree(extract_dir)
    os.makedirs(extract_dir, exist_ok=True)
    zip_path = "/tmp/uploaded.zip"
    with open(zip_path, "wb") as f:
        f.write(zip_bytes)
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)
    return extract_dir

def find_main_raml_file(base_dir):
    """Find the main RAML file from the extracted directory."""
    for root, _, files in os.walk(base_dir):
        for file in files:
            if file.endswith(".raml"):
                full_path = os.path.join(root, file)
                with open(full_path, 'r', encoding='utf-8', errors='ignore') as f:
                    if "#%RAML 1.0" in f.readline():
                        return full_path
    raise FileNotFoundError("Main RAML file not found.")

def resolve_include_path(include_path, root_dir, current_dir):
    """Resolve any !include statements in the RAML file."""
    full_path = os.path.normpath(os.path.join(current_dir, include_path))
    if os.path.isfile(full_path): return full_path
    full_path = os.path.normpath(os.path.join(root_dir, include_path))
    if os.path.isfile(full_path): return full_path
    for root, _, files in os.walk(root_dir):
        for f in files:
            if f == os.path.basename(include_path):
                return os.path.join(root, f)
    return None

def resolve_includes_in_raml(file_path, root_dir):
    """Resolve includes in the RAML file and return the full content."""
    resolved_lines = []
    current_dir = os.path.dirname(file_path)
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
        for line in file:
            if "!include" in line:
                parts = line.strip().split("!include")
                prefix = parts[0].strip()
                include_path = parts[1].strip()
                include_file = resolve_include_path(include_path, root_dir, current_dir)
                if include_file and os.path.exists(include_file):
                    with open(include_file, 'r', encoding='utf-8', errors='ignore') as inc_file:
                        resolved_lines.append(f"{prefix} |\n")
                        for inc_line in inc_file.read().splitlines():
                            resolved_lines.append(f"  {inc_line}")
                else:
                    resolved_lines.append(f"{line.strip()}  # Include not found")
            else:
                resolved_lines.append(line.rstrip())
    return "\n".join(resolved_lines)

# ---------------- MAIN INVOKE ----------------

def analyze_raml_with_openai(client, resolved_raml_content):
    """Analyze the RAML content with the mock OpenAI client."""
    prompt = (
        "You are a RAML test data generator.\n"
        "Below is a RAML specification with all includes already resolved.\n"
        "Generate two randomized JSON test payloads per endpoint using the provided examples.\n"
        "Only use fields shown in the examples. Do not add or skip fields.\n"
        "Preserve data types: string, number, boolean, object, array.\n"
        "Example output:\n"
        "{ \"/api/endpoint\": [ {payload1}, {payload2} ] }\n\n"
        "Here is the RAML:\n"
    )
    response = client.invoke([{"content": prompt + "\n\n" + resolved_raml_content}])
    return response.content

# ---------------- AWS LAMBDA ENTRY ----------------

def lambda_handler(event, context):
    """AWS Lambda entry function."""
    logger.info("Lambda invoked.")
    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("File content is missing or not base64-encoded.")
        zip_bytes = b64decode(event['body'])

        headers = event.get('headers', {})
        model_instance_name = (
            headers.get('model_instance_name') or
            headers.get('Model_Instance_Name') or
            os.environ.get('DEFAULT_MODEL_INSTANCE_NAME', 'default-model')
        )

        # Step 1: Unzip the file
        extracted_dir = unzip_raml(zip_bytes)

        # Step 2: Find the main RAML file
        main_raml_file = find_main_raml_file(extracted_dir)

        # Step 3: Resolve any includes and get the final RAML content
        resolved_raml = resolve_includes_in_raml(main_raml_file, extracted_dir)

        # Step 4: Extract examples and endpoints
        endpoints, examples = extract_examples_and_endpoints(resolved_raml)

        # If examples were extracted, proceed to generate payloads
        if examples:
            output = {}
            for endpoint in endpoints:
                example_data = examples.get(endpoint)
                if example_data:
                    output[endpoint] = [generate_random_payload(example_data), generate_random_payload(example_data)]
            logger.info(f"Generated output: {output}")
        else:
            output = {"error": "No examples found in RAML."}

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(output)
        }

    except Exception as e:
        logger.error(f"Error during execution: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
