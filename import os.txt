from langchain.chat_models import AzureChatOpenAI
import os

def get_openai_client():
    try:
        return AzureChatOpenAI(
            azure_endpoint="https://testopenaiassets.openai.azure.com",
            deployment_name="First_Chatbot",
            openai_api_key="",
            openai_api_version="2024-08-01-preview"
        )
    except Exception as e:
        print(f"Error initializing OpenAI client: {e}")
        return None

def extract_text_from_dwl(file_path):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()
        return "\n".join([line.strip() for line in lines if line.strip() and not line.strip().startswith(("#", "//"))])
    except Exception as e:
        print(f"Error reading DWL file: {e}")
        return None

def generate_java_code(dwl_content):
    try:
        client = get_openai_client()
        if not client:
            return None

        response = client.invoke([
            {"role": "system", "content": (
                "You are an expert Java developer. "
                "You will receive DataWeave logic that outlines a transformation process. "
                "Convert this logic into equivalent Java code. "
                "Ensure the Java code is clean, well-structured, and includes necessary classes and methods."
            )},
            {"role": "user", "content": dwl_content}
        ])

        java_code = response.content.strip()
        if not java_code.startswith("public") and "class" not in java_code:
            raise ValueError("Unexpected response format: Java class not found.")
        return java_code
    except Exception as e:
        print(f"Error generating Java code: {e}")
        return None

def save_java_file(java_code, output_file):
    try:
        with open(output_file, 'w') as file:
            file.write(java_code)
        print(f"Java file saved successfully: {output_file}")
    except Exception as e:
        print(f"Error saving the Java file: {e}")

def convert_dwl_to_java(file_path, output_file):
    dwl_content = extract_text_from_dwl(file_path)
    if dwl_content:
        java_code = generate_java_code(dwl_content)
        if java_code:
            save_java_file(java_code, output_file)
        else:
            print("Could not generate Java code from the DWL file.")
    else:
        print("Could not extract text from the DWL file.")

if __name__ == "__main__":
    dwl_file_path = input("Enter the path to the .dwl file: ").strip()
    if dwl_file_path.endswith(".dwl"):
        output_file = input("Enter the output file name (e.g., 'Transformation.java'): ").strip()
        convert_dwl_to_java(dwl_file_path, output_file)
    else:
        print("Invalid file type. Please provide a valid .dwl file.")
