import os
import json
import tempfile
import zipfile
import logging
from pathlib import Path
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.agents import initialize_agent
from langchain.tools import Tool

# === Logging Config ===
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# === Decryption Logic ===
def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    decrypted_data = unpad(decrypted_data)
    return decrypted_data.decode()

# === Azure OpenAI Client ===
def get_openai_client():
    aes_key_base64 = os.environ['AES_KEY']
    encrypted_api_base = os.environ['ENCRYPTED_API_BASE']
    encrypted_api_key = os.environ['ENCRYPTED_API_KEY']
    api_version = os.environ['AZURE_API_VERSION']
    model_instance_name = os.environ['MODEL_INSTANCE_NAME']

    decrypted_api_base = decrypt(encrypted_api_base, aes_key_base64)
    decrypted_api_key = decrypt(encrypted_api_key, aes_key_base64)

    if not decrypted_api_base.endswith('/'):
        decrypted_api_base += '/'

    return AzureChatOpenAI(
        deployment_name=model_instance_name,
        openai_api_base=decrypted_api_base,
        openai_api_key=decrypted_api_key,
        openai_api_version=api_version
    )

# === Global Stores ===
java_files = []
parsed_code_info = []
junit_suggestions = []

# === Tool 1: List Java Files ===
def list_java_files(directory: str) -> str:
    global java_files
    java_files = list(Path(directory).rglob("*.java"))
    return f"[FOUND] {len(java_files)} Java files."

# === Tool 2: Extract Code Info ===
def extract_code_info(_: str) -> str:
    global java_files, parsed_code_info

    if not java_files:
        return "[SKIP] No Java files to parse."

    prompt = PromptTemplate(
        input_variables=["source"],
        template="""
Analyze the following Java source code and return the following as JSON:
- class_name
- class_type (Controller, Service, Config, Model, etc.)
- package_path (from the package declaration)
- methods: list of public method names

Only return compact valid JSON. No extra commentary.

Java Source:
{source}
"""
    )

    chain = prompt | get_openai_client()

    for file_path in java_files:
        try:
            content = Path(file_path).read_text(encoding="utf-8")
            result = chain.invoke({"source": content})
            result_json = json.loads(result.content.strip())
            if "class_name" in result_json:
                parsed_code_info.append(result_json)
        except Exception as e:
            logger.warning(f"[ERROR] Parsing {file_path.name} failed: {e}")

    return f"[SUCCESS] Parsed {len(parsed_code_info)} files."

# === Build JUnit Prompt ===
def build_junit_prompt(class_type):
    if class_type.lower() == "controller":
        return PromptTemplate(
            input_variables=["class_name", "package_path", "methods"],
            template="""
You are to write a complete JUnit 5 test class for a Spring Boot REST controller.

Details:
- Controller Class: {class_name}
- Package: {package_path}
- Public Methods:
{methods}

Instructions:
- Use `@WebMvcTest({class_name}.class)` on the test class.
- Autowire `MockMvc` via `@Autowired`.
- Mock dependent services using `@MockBean`.
- For each method, create one representative test method using `mockMvc.perform(...)`.
- Assume common HTTP mappings (GET, POST, PUT, DELETE).
- Return only valid Java code.
"""
        )
    else:
        return PromptTemplate(
            input_variables=["class_name", "class_type", "package_path", "methods"],
            template="""
You are to write a JUnit 5 test class for the following Java class.

Details:
- Class Name: {class_name}
- Type: {class_type}
- Package: {package_path}
- Public Methods:
{methods}

Instructions:
- Use `@SpringBootTest` or `@ExtendWith(MockitoExtension.class)` depending on type.
- Include one test method per public method.
- Return only valid Java code.
"""
        )

# === Tool 3: Generate JUnit ===
def generate_junit_tests(_: str) -> str:
    global parsed_code_info, junit_suggestions

    if not parsed_code_info:
        return "[SKIP] No parsed classes."

    for item in parsed_code_info:
        try:
            class_type = item["class_type"]
            methods_str = "\n".join(item["methods"])
            prompt = build_junit_prompt(class_type)
            chain = prompt | get_openai_client()

            inputs = {
                "class_name": item["class_name"],
                "package_path": item["package_path"],
                "methods": methods_str
            }

            if class_type.lower() != "controller":
                inputs["class_type"] = class_type

            result = chain.invoke(inputs)
            junit_suggestions.append({
                "file_name": f"{item['class_name']}Test.java",
                "package_path": item["package_path"],
                "code": result.content.strip()
            })

        except Exception as e:
            logger.error(f"[ERROR] Could not generate test for {item['class_name']}: {e}")

    return f"[SUCCESS] Generated {len(junit_suggestions)} test classes."

# === Tool 4: Save to Temp ===
def save_and_print_tests(base_dir: str) -> str:
    global junit_suggestions

    output = []
    for test in junit_suggestions:
        folder = Path(base_dir) / "generated_tests" / test["package_path"].replace(".", "/")
        folder.mkdir(parents=True, exist_ok=True)
        file_path = folder / test["file_name"]
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(test["code"])
        output.append(f"{test['file_name']} saved to {file_path}")
    return "\n".join(output)

# === Lambda Entry ===
def lambda_handler(event, context):
    try:
        # Binary Body (Base64 encoded)
        body = event["body"]
        is_base64 = event.get("isBase64Encoded", False)

        if is_base64:
            import base64
            body = base64.b64decode(body)

        with tempfile.TemporaryDirectory() as tmpdir:
            zip_path = os.path.join(tmpdir, "project.zip")
            with open(zip_path, "wb") as f:
                f.write(body)

            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(tmpdir)

            # Set this as working project directory
            java_dir = tmpdir

            # Execute tools
            tools = [
                Tool(name="ListJavaFiles", func=lambda _: list_java_files(java_dir), description="List Java files."),
                Tool(name="ExtractCodeInfo", func=extract_code_info, description="Parse code info."),
                Tool(name="GenerateJUnitTests", func=generate_junit_tests, description="Generate test classes."),
                Tool(name="SaveJUnitTests", func=lambda _: save_and_print_tests(tmpdir), description="Save output.")
            ]

            agent = initialize_agent(
                tools=tools,
                llm=get_openai_client(),
                agent="zero-shot-react-description",
                verbose=False
            )

            result = agent.run(f"""
List all Java files under: {java_dir}.
Then extract class metadata like class name, type, package, and public method names.
Then generate JUnit 5 test classes.
Finally, save the test classes to disk.
""")

            return {
                "statusCode": 200,
                "body": json.dumps({
                    "message": "Processing complete.",
                    "result": result
                }),
                "headers": {
                    "Content-Type": "application/json"
                }
            }

    except Exception as e:
        logger.error(f"Lambda failed: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)}),
            "headers": {"Content-Type": "application/json"}
        }
