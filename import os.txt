import os
import json
from langchain.chains import LLMChain
from langchain.agents import Tool, initialize_agent
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
from langchain.chat_models import ChatOpenAI  # Assuming this is your LLM client

# === Setup your OpenAI LLM ===
def get_openai_client():
    return ChatOpenAI(temperature=0, model="gpt-4")

# === Step 1: Combine Java code files ===
def load_java_project_code(directory="./java_project"):
    code = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".java"):
                with open(os.path.join(root, file), "r", encoding="utf-8") as f:
                    code.append(f.read())
    return "\n".join(code)

# === Chain 1: Analyze project structure ===
def analyze_java_project(_):
    combined_code = load_java_project_code()

    prompt = PromptTemplate(
        input_variables=["combined_code"],
        template="""
Analyze the given Java codebase and return a structured JSON in the following format.

Respond with ONLY JSON like:
{{
  "com.example.service.UserServiceImpl": {{
    "type": "ServiceImpl",
    "methods": {{
      "getUserById": {{
        "returns": "User",
        "calls": ["userRepo.findById"]
      }}
    }},
    "depends_on": ["UserRepository"]
  }}
}}

Do not include markdown, explanation, or extra text. Only JSON.
{combined_code}
"""
    )

    llm = get_openai_client()
    chain = LLMChain(llm=llm, prompt=prompt)

    result = chain.run(combined_code=combined_code)

    # Safe parse
    try:
        result_json = json.loads(result)
    except json.JSONDecodeError:
        print("Failed to parse JSON:")
        print(result)
        raise

    return json.dumps(result_json, indent=2)

# === Chain 2: Generate JUnit tests from structure ===
def generate_junit_tests(java_structure_json: str):
    prompt = PromptTemplate(
        input_variables=["java_structure"],
        template="""
Given this Java class structure, generate JUnit test classes for each service or controller.

Respond ONLY with code blocks per class and filename comments like:
// File: src/test/java/com/example/service/UserServiceImplTest.java

Only include:
- Proper `@Test` annotated methods
- Required mock setup with Mockito
- Use actual method names and return types

{java_structure}
"""
    )

    llm = get_openai_client()
    chain = LLMChain(llm=llm, prompt=prompt)

    return chain.run(java_structure=java_structure_json)

# === Orchestrator ===
if __name__ == "__main__":
    print("\n=== CHAIN 1: Analyzing Java project structure ===")
    structure_json_str = analyze_java_project(None)
    print(structure_json_str)

    print("\n=== CHAIN 2: Generating JUnit Test Code ===")
    junit_code_output = generate_junit_tests(structure_json_str)
    print(junit_code_output)
