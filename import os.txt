import os
import json
import asyncio
from typing import List, Dict, Any

from mcp.client.sse import sse_client
from mcp import ClientSession
from langchain.chat_models import AzureChatOpenAI
from langchain.agents import initialize_agent, AgentType
from langchain.tools import Tool

# --- 1. Azure OpenAI Client ---
def get_openai_client():
    return AzureChatOpenAI(
        azure_deployment="Fourth_Chatbot",
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        azure_api_version="2024-08-01-preview",
        openai_api_key=os.getenv("AZURE_OPENAI_KEY", ""),
        temperature=0.0,  # deterministic reasoning
        max_tokens=1500,
        model_kwargs={"top_p": 0.9, "frequency_penalty": 0.0, "presence_penalty": 0.0},
    )

# --- 2. MCP Client Initializer ---
async def init_mcp_session(url: str):
    async with sse_client(url=url) as streams:
        async with ClientSession(streams[0], streams[1]) as session:
            await session.initialize()
            return session

# --- 3. Fetch Tools Dynamically ---
async def fetch_tool_names(session: ClientSession) -> List[str]:
    info = await session.list_tools()
    return [t.name for t in getattr(info, "tools", [])]

# --- 4. Wrap Each MCP Tool for Agent ---
def make_tools(session: ClientSession, tool_names: List[str]) -> List[Tool]:
    tools = []

    for name in tool_names:
        async def _fn(inp: str, tool_name=name):
            try:
                params = json.loads(inp) if inp else {}
            except:
                return f"‚ùå Invalid JSON input for `{tool_name}`"

            try:
                res = await session.call_tool(tool_name, params)
                return json.dumps(res, default=str)
            except Exception as e:
                return f"‚ùå Error in `{tool_name}`: {e}"

        tools.append(Tool.from_function(
            name=name,
            func=_fn,
            coroutine=_fn,
            description=f"Call MCP endpoint `{name}` with JSON input",
        ))

    return tools

# --- 5. Main Agent Runner ---
async def main():
    sse_url = "https://employee-mcp-v1-6b0n96.dw4w1g-2.gbr-e1.cloudhub.io/sse"

    # Initialize MCP session
    session = await init_mcp_session(sse_url)
    tool_names = await fetch_tool_names(session)
    print(f"‚öôÔ∏è Available MCP tools: {tool_names}")

    tools = make_tools(session, tool_names)
    agent = initialize_agent(
        tools=tools,
        llm=get_openai_client(),
        agent=AgentType.OPENAI_FUNCTIONS,
        verbose=True,
        handle_parsing_errors=True,
    )

    print("\nü§ñ Ask questions (e.g., 'Employees working on Pepsico', 'Names starting with Ch, experience < 10'): Type 'exit' to quit.\n")
    while True:
        q = input("User: ").strip()
        if q.lower() in ("exit","quit"):
            break
        try:
            resp = await agent.arun(q)
            print("\nAgent:", resp, "\n")
        except Exception as e:
            print("‚ùå Error:", e)

# --- 6. Run ---
if __name__ == "__main__":
    asyncio.run(main())
