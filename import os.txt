import os
import re
import shutil
from pathlib import Path
import gradio as gr
from langchain.prompts import PromptTemplate
from langchain_openai import AzureChatOpenAI

# === Azure OpenAI Client ===
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="gpt-4_complex_conversions",
        openai_api_key="",
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        temperature=0.4,
        max_tokens=3000,
    )

llm = get_openai_client()

# === Main Orchestration ===
def process_java_project(user_input: str, history):
    try:
        # Extract reference path
        path_match = re.search(r"([A-Za-z]:[\\w\\-/\\. ]+)", user_input)
        if not path_match:
            return "[ERROR] Please provide a valid Windows file path."
        reference_path = path_match.group(1).strip()

        # Extract new project name
        name_match = re.search(r"create a (\\w+)", user_input, re.IGNORECASE)
        if not name_match:
            return "[ERROR] Please specify a project name (e.g., 'create a AWS_connector')."
        new_project_name = name_match.group(1)

        ref_path = Path(reference_path)
        if not ref_path.exists():
            return f"[ERROR] Reference project not found: {reference_path}"

        target_base = Path("C:/users/rdamera/javaproj")
        target_path = target_base / new_project_name
        if target_path.exists():
            shutil.rmtree(target_path)
        shutil.copytree(ref_path, target_path)

        # Iterate through all java files and rewrite via AI
        for file_path in target_path.rglob("*.java"):
            source = file_path.read_text(encoding="utf-8")

            prompt = PromptTemplate(
                input_variables=["source", "new_name"],
                template="""
You are refactoring a Java project.

Rules:
- Detect the current project/class/package name automatically.
- Replace all references with the new project name: {new_name}.
- If this file contains the main method, rename the main class itself.
- Keep the same structure and valid compilable Java.
- Do not explain, output only the updated Java code.

Old Source:
{source}
"""
            )

            response = (prompt | llm).invoke({"source": source, "new_name": new_project_name})
            file_path.write_text(response.content.strip(), encoding="utf-8")

        return f"[SUCCESS] Project '{new_project_name}' created at {target_path}"

    except Exception as e:
        return f"[ERROR] {str(e)}"

# === Gradio UI ===
chatbot_ui = gr.ChatInterface(
    fn=process_java_project,
    title="AI Java Project Generator",
    description="Provide a reference project path and a new project name. AI will generate a full Java project with the same structure but renamed.",
    theme="default",
)

if __name__ == "__main__":
    chatbot_ui.launch()
