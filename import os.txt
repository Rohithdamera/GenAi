import os
import shutil
import zipfile
import json
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES

# Setup logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== Decryption (if needed) ==========
def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Error during decryption: {e}")
        raise ValueError(f"Error during decryption: {e}")

# ========== Random Data Generation ==========
def random_datetime():
    return f"{random.randint(1,28):02}/{random.randint(1,12):02}/2025 {random.randint(0,23):02}:{random.randint(0,59):02}:{random.randint(0,59):02}"

def random_uuid():
    sections = [8, 4, 4, 4, 12]
    return '-'.join(''.join(random.choices(string.hexdigits.lower(), k=s)) for s in sections)

def random_string_like(value):
    if isinstance(value, str):
        if any(sep in value for sep in ['/', '-', ':']):
            return random_datetime()
        elif len(value) == 36 or len(value) == 32:
            return random_uuid()
        elif value.isdigit():
            return ''.join(random.choices(string.digits, k=len(value)))
        else:
            return ''.join(random.choices(string.ascii_letters + string.digits, k=len(value)))
    return value

def generate_random_value_by_sample(sample_value):
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif isinstance(sample_value, str):
        return random_string_like(sample_value)
    elif sample_value is None:
        return None
    return sample_value

def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(template[0])] if template else []
    return generate_random_value_by_sample(template)

# ========== ZIP Extraction ==========
def unzip_raml(zip_bytes, extract_dir="/tmp/temp_raml"):
    if os.path.exists(extract_dir):
        shutil.rmtree(extract_dir)
    os.makedirs(extract_dir, exist_ok=True)

    zip_path = "/tmp/uploaded.zip"
    with open(zip_path, "wb") as f:
        f.write(zip_bytes)

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)

    return extract_dir

# ========== .rml File Utilities ==========
def find_all_rml_files(root_dir):
    rml_files = []
    for root, _, files in os.walk(root_dir):
        for file in files:
            if file.endswith(".rml"):
                rml_files.append(os.path.join(root, file))
    return rml_files

def extract_post_references(rml_path):
    references = []
    try:
        with open(rml_path, 'r', encoding='utf-8', errors='ignore') as file:
            lines = file.readlines()
            for idx, line in enumerate(lines):
                if 'post:' in line.lower():
                    for next_line in lines[idx+1:]:
                        if '.rml' in next_line:
                            ref_path = next_line.strip().split()[-1].replace('"', '').replace("'", '')
                            references.append(ref_path)
                            break
    except Exception as e:
        logger.warning(f"Could not parse POST refs in {rml_path}: {e}")
    return references

def resolve_reference_path(ref, root_dir):
    for root, _, files in os.walk(root_dir):
        for f in files:
            if f == os.path.basename(ref):
                return os.path.join(root, f)
    return None

def extract_json_from_rml(rml_file):
    try:
        with open(rml_file, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            json_start = content.find('{')
            json_end = content.rfind('}')
            if json_start != -1 and json_end != -1:
                json_str = content[json_start:json_end+1]
                return json.loads(json_str)
    except Exception as e:
        logger.warning(f"Failed to extract JSON from {rml_file}: {e}")
    return {}

# ========== Final JSON Generation ==========
def build_output_structure(structures):
    return {
        "datasets": [generate_random_structure(struct) for struct in structures]
    }

# ========== Prompt Builder ==========
def build_dynamic_prompt(model_instance_name):
    return (
        f"You are an expert RAML analyzer. Using the model instance '{model_instance_name}', "
        "analyze the provided RAML content, focusing solely on POST methods. Resolve all references to "
        "traits, resource types, and fragments. Identify and extract any required data from subfolder references. "
        "Then generate realistic, randomized test payloads for each POST endpoint while strictly preserving the field names, "
        "structure, and data types. Ensure that the output is clean, valid JSON without extra metadata or explanations, "
        "and matches the exact structure from the reference .rml files."
    )

# ========== Lambda Handler ==========
def lambda_handler(event, context):
    logger.info("Lambda function invoked.")
    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("File content is missing or not base64-encoded.")

        zip_bytes = b64decode(event['body'])
        extracted_dir = unzip_raml(zip_bytes)

        model_instance_name = event.get("headers", {}).get("model_instance_name", "default_instance")
        logger.info(f"Model instance: {model_instance_name}")
        prompt = build_dynamic_prompt(model_instance_name)
        logger.info(f"Prompt: {prompt}")

        all_rml_files = find_all_rml_files(extracted_dir)
        logger.info(f"Found {len(all_rml_files)} .rml files")

        root_rml = next((f for f in all_rml_files if 'main' in f.lower() or 'root' in f.lower()), all_rml_files[0])
        post_references = extract_post_references(root_rml)

        resolved_structures = []
        for ref in post_references:
            ref_path = resolve_reference_path(ref, extracted_dir)
            if ref_path:
                struct = extract_json_from_rml(ref_path)
                if struct:
                    resolved_structures.append(struct)

        if not resolved_structures:
            raise ValueError("No valid JSON structures found in POST-related .rml files.")

        final_output = build_output_structure(resolved_structures)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(final_output, indent=2)
        }

    except Exception as e:
        logger.error(f"Error during Lambda execution: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
