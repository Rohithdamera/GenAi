import os
import json
import logging
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    return unpad(decrypted_data).decode()

def get_openai_client():
    aes_key = os.environ['AES_KEY']
    encrypted_api_base = os.environ['ENCRYPTED_API_BASE']
    encrypted_api_key = os.environ['ENCRYPTED_API_KEY']
    api_version = os.environ['AZURE_API_VERSION']
    model_instance_name = os.environ['MODEL_INSTANCE_NAME']

    decrypted_api_base = decrypt(encrypted_api_base, aes_key)
    decrypted_api_key = decrypt(encrypted_api_key, aes_key)

    if not decrypted_api_base.endswith('/'):
        decrypted_api_base += '/'

    return AzureChatOpenAI(
        deployment_name=model_instance_name,
        openai_api_base=decrypted_api_base,
        openai_api_key=decrypted_api_key,
        openai_api_version=api_version
    )

def lambda_handler(event, context):
    try:
        logger.info("Received event: %s", json.dumps(event)[:1000])

        file_content = b64decode(event['body']).decode('utf-8')

        client = get_openai_client()

        instruction = (
            "You are an expert in writing JUnit tests. "
            "Generate full JUnit test cases for the following Java class. "
            "Include proper setup, teardown, and various positive and negative test cases.\n\n"
        )

        messages = [
            HumanMessage(content=instruction),
            HumanMessage(content=file_content)
        ]

        response = client.invoke(messages)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "text/plain"},
            "body": response.content.strip()
        }

    except Exception as e:
        logger.error("Error: %s", str(e))
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
