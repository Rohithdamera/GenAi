import os
import xml.etree.ElementTree as ET
from langchain_openai import AzureChatOpenAI
from langchain.schema import HumanMessage

# Azure OpenAI configuration
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="Fourth_Chatbot",
        openai_api_key="", 
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        max_tokens=2000,
        temperature=0.7,
        top_p=0.9,
        frequency_penalty=0.2,
        presence_penalty=0.1
    )

# Find all XML files inside folders named exactly "mule"
def find_all_mule_xml_files(folder_path):
    xml_files = []
    for root, dirs, files in os.walk(folder_path):
        # Check if the current folder is named "mule"
        if os.path.basename(root).lower() == "mule":
            for sub_root, _, sub_files in os.walk(root):
                for file in sub_files:
                    if file.endswith(".xml"):
                        xml_files.append(os.path.join(sub_root, file))
    return xml_files

# Summarize content of one XML file
def summarize_xml_file(xml_path, client):
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()

        header = f"Root Tag: {root.tag}\nNamespaces: {root.attrib}\n"
        body = ET.tostring(root, encoding='unicode', method='xml')

        header_prompt = (
            "You are an expert in analyzing MuleSoft XML configurations. "
            "Analyze the header of this XML file, including root tag and namespaces, "
            "and explain its purpose, usage, and significance in the context of MuleSoft."
        )

        body_prompt = (
            "Now analyze the entire body of the MuleSoft XML configuration. "
            "Describe each component, connector, and transformation. "
            "Explain how data flows, how processors interact, and the logic behind each step."
        )

        header_summary = get_summary_from_openai(client, header_prompt, header)
        body_summary = get_summary_from_openai(client, body_prompt, body)

        return combine_summaries(header_summary, body_summary)

    except ET.ParseError as e:
        return f"Error parsing {xml_path}: {str(e)}"
    except Exception as e:
        return f"Unexpected error processing {xml_path}: {str(e)}"

# Send prompt to Azure OpenAI
def get_summary_from_openai(client, prompt, content):
    try:
        messages = [HumanMessage(content=prompt + "\n\n" + content)]
        response = client.invoke(messages)
        return response.content
    except Exception as e:
        return f"[ERROR: Failed to summarize content] {str(e)}"

# Combine header and body summaries
def combine_summaries(header_summary, body_summary):
    return (
        f"## Header Analysis ##\n{header_summary}\n\n"
        f"## Body Analysis ##\n{body_summary}\n\n"
        f"## Final Insights ##\n"
        "This XML defines a structured MuleSoft flow. Review the above Header and Body sections for detailed insight.\n"
    )

# Create final one-pager summary from all XML summaries
def summarize_all_collected_content(client, all_summaries):
    combined_content = "\n\n".join(all_summaries)
    final_prompt = (
        "You are an expert in summarizing complex XML-based MuleSoft configuration files used in integration applications. "
        "Your goal is to explain the content in a way that is clear and understandable for all types of users â€” including beginners, non-technical stakeholders, and experienced developers. "
        "Carefully analyze the structure and logic of the XML file. Describe the flow of data, "
        "the purpose of each processor or component (such as HTTP listeners, set-payloads, transformations, loggers, connectors, and conditional logic), and how they work together. "
        "Your explanation should be detailed, insightful, and at least 3x longer than the original XML content. Focus on making the summary educational, easy to follow, and technically accurate so that anyone reading it can understand the integration logic and purpose of the flow."
    )
    summary = get_summary_from_openai(client, final_prompt, combined_content)
    return summary

# Main execution
if __name__ == "__main__":
    project_root = r"C:\Users\rdamera\Downloads\concur-journalentry-srvc-app\concur-journalentry-srvc-app"
    try:
        print("Scanning for MuleSoft XML files...\n")
        xml_files = find_all_mule_xml_files(project_root)

        if not xml_files:
            print("No MuleSoft XML files found in any 'mule' folder.")
        else:
            print(f"Found {len(xml_files)} XML file(s):")
            for file in xml_files:
                print(f"- {os.path.basename(file)}")

            client = get_openai_client()
            xml_summaries = []

            for xml_path in xml_files:
                print(f"\nProcessing: {xml_path}")
                summary = summarize_xml_file(xml_path, client)
                xml_summaries.append(summary)

            print("\nAll individual XML files processed.")
            print("Now generating ONE-PAGE technical summary...")

            final_summary = summarize_all_collected_content(client, xml_summaries)
            print("\n====== FINAL ONE-PAGER SUMMARY ======\n")
            print(final_summary)

    except Exception as e:
        print(f"An error occurred: {str(e)}")
