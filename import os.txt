import mysql.connector
import openai
from datetime import datetime
import matplotlib.pyplot as plt
from collections import Counter

# Set your OpenAI API key and configuration
openai.api_type = "azure"
openai.api_key = ""  # Replace with your Azure OpenAI API key
openai.api_base = "https://testopenaiassets.openai.azure.com/"
openai.api_version = "2024-08-01-preview"

# Get user input
api_name = input("Enter the API name (e.g., EXA-api): ").strip()
time_interval = input("Enter the time interval (e.g., 3 HOUR, 1 DAY): ").strip().upper()

# Connect to MySQL
conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="Admin",
    database="test_data"
)
cursor = conn.cursor()

# Run SQL query
sql_query = f"""
SELECT *
FROM `all api last 1 week performance report`
WHERE `API Name` = %s
  AND Timestamp BETWEEN (NOW() - INTERVAL {time_interval}) AND NOW()
ORDER BY `API Name`, Timestamp ASC;
"""

cursor.execute(sql_query, (api_name,))
results = cursor.fetchall()
column_names = [desc[0] for desc in cursor.description]
conn.close()

# Format results for OpenAI
results_str = "\n".join(
    [", ".join(f"{col}: {val}" for col, val in zip(column_names, row)) for row in results]
)

# Prompt for OpenAI (medium length and beginner-friendly)
prompt = (
    f"You are a helpful analyst. Analyze the API '{api_name}' over the last {time_interval}.\n"
    "Focus on the following:\n"
    "1. Overall health and stability of the API.\n"
    "2. Any unusual patterns in error rate, response time, or volume.\n"
    "3. Simple explanations of issues for a non-technical user.\n"
    "4. Practical tips or quick wins to improve reliability.\n\n"
    "Be clear and concise. Avoid jargon. Keep it short and readable.\n"
    "Below is the data:\n"
)

# Function to generate summary and pie chart
def get_openai_client(prompt):
    try:
        response = openai.ChatCompletion.create(
            deployment_id="Fourth_Chatbot",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": results_str}
            ],
            max_tokens=900,
            temperature=0.5,
            top_p=0.9,
            frequency_penalty=0.2,
            presence_penalty=0.1
        )
        summary = response['choices'][0]['message']['content']
        print("ðŸ“Š API Performance Summary:\n")
        print(summary)

        # Show pie chart
        generate_status_pie_chart(results, column_names)

    except Exception as e:
        print(f"Error during generating the summary: {e}")

# Pie chart based on status code
def generate_status_pie_chart(results, column_names):
    try:
        status_idx = column_names.index("Status Code")
    except ValueError:
        print("No 'Status Code' column found.")
        return

    status_counts = Counter()
    for row in results:
        status = row[status_idx]
        if isinstance(status, int):  # Ensure it's a number
            if status >= 400:
                status_counts["Failure (400+)"] += 1
            elif status >= 200:
                status_counts["Success (200+)"] += 1

    if not status_counts:
        print("No valid status codes found for pie chart.")
        return

    labels = list(status_counts.keys())
    sizes = list(status_counts.values())
    colors = ['red' if 'Failure' in label else 'green' for label in labels]
    explode = [0.1 if 'Failure' in label else 0 for label in labels]  # Highlight failure slice

    plt.figure(figsize=(6, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90,
            colors=colors, explode=explode)
    plt.title(f"API Status Distribution for '{api_name}'")
    plt.axis('equal')  # Equal aspect ratio for a circle
    plt.tight_layout()
    plt.show()

# Run the analysis
get_openai_client(prompt)
