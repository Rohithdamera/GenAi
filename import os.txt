import json
import base64
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES

# Logger setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Decryption helpers
def unpad(data):
    return data[:-data[-1]]

def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        return unpad(decrypted_data).decode()
    except Exception as e:
        logger.error(f"Decryption error: {e}")
        raise ValueError(f"Decryption error: {e}")

# JSON extraction
def detect_and_extract_json(content):
    try:
        return json.loads(content)
    except json.JSONDecodeError:
        json_start = content.find('{')
        if json_start == -1:
            raise ValueError("No JSON found.")
        return json.loads(content[json_start:])

# Random generators
def random_datetime():
    return f"{random.randint(1,28):02}/{random.randint(1,12):02}/2025 {random.randint(0,23):02}:{random.randint(0,59):02}:{random.randint(0,59):02}"

def random_uuid():
    return '-'.join(''.join(random.choices(string.hexdigits.lower(), k=s)) for s in [8, 4, 4, 4, 12])

def random_string(length):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def generate_id(length):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

def random_currency_code():
    return ''.join(random.choices(string.ascii_uppercase, k=3))

# Enhanced string analyzer
def smart_string_generator(field, value):
    if isinstance(value, str):
        if value.isdigit():
            return ''.join(random.choices(string.digits, k=len(value)))
        elif len(value) == 3 and value.isalpha() and value.isupper():
            return random_currency_code()
        elif any(sep in value for sep in ['/', '-', ':']):
            return random_datetime()
        elif len(value) >= 10 and field.lower().endswith("id"):
            return generate_id(len(value))
        elif any(c.isdigit() for c in value) and any(c.isalpha() for c in value):
            return ''.join(random.choices(string.ascii_uppercase + string.digits, k=len(value)))
        else:
            return random_string(len(value))
    return value

def generate_random_value_by_sample(field, value):
    if isinstance(value, int):
        return random.randint(1000, 999999)
    elif isinstance(value, float):
        return round(random.uniform(10.0, 99999.9), 2)
    elif isinstance(value, bool):
        return random.choice([True, False])
    elif isinstance(value, str):
        if value.isdigit():
            return ''.join(random.choices(string.digits, k=len(value)))
        return smart_string_generator(field, value)
    return value

def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(item) for item in template]
    return generate_random_value_by_sample("", template)

def generate_random_structure_with_fields(template, parent_key=""):
    if isinstance(template, dict):
        return {
            k: generate_random_structure_with_fields(v, k)
            for k, v in template.items()
        }
    elif isinstance(template, list):
        return [
            generate_random_structure_with_fields(v, parent_key)
            for v in template
        ]
    return generate_random_value_by_sample(parent_key, template)

# Header extractors
def get_model_instance_name(event):
    return event.get('headers', {}).get('model_instance_name', 'chatbot_' + ''.join(random.choices(string.ascii_lowercase + string.digits, k=6)))

def get_count_from_headers(event):
    try:
        return max(1, int(event.get('headers', {}).get('count', '1')))
    except:
        return 1

def build_dynamic_prompt(model_instance_name):
    return (
        f"You are a smart JSON data generator named '{model_instance_name}'. "
        "Generate diverse and realistic JSON data based on the structure and type. "
        "For string values that look numeric, generate new string numbers. "
        "For ID-like fields, create realistic unique IDs. "
        "For currency fields, use random 3-letter codes like USD, EUR, etc. "
        "Ensure each data set is different based on structure, format, and type."
    )

# Lambda Handler
def lambda_handler(event, context):
    logger.info("Lambda triggered")

    try:
        body = event.get('body')
        if not body:
            raise ValueError("No body content received.")

        content = base64.b64decode(body).decode('utf-8') if event.get('isBase64Encoded', False) else body

        json_input = detect_and_extract_json(content)

        model_instance = get_model_instance_name(event)
        count = get_count_from_headers(event)
        prompt = build_dynamic_prompt(model_instance)

        logger.info(f"Generating {count} datasets using model: {model_instance}")

        result = [generate_random_structure_with_fields(json_input) for _ in range(count)]

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"datasets": result})
        }

    except Exception as e:
        logger.error(f"Error occurred: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }
