import mysql.connector
import openai
from datetime import datetime
import matplotlib.pyplot as plt
from collections import Counter

# Set your OpenAI API key and other configurations
openai.api_type = "azure"
openai.api_key = ""  # Add your key
openai.api_base = "https://testopenaiassets.openai.azure.com/"
openai.api_version = "2024-08-01-preview"

# Get user input
api_name = input("Enter the API name (e.g., EXA-api): ").strip()
time_interval = input("Enter the time interval (e.g., 3 HOUR, 1 DAY): ").strip().upper()

# Connect to the MySQL database
conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="Admin",
    database="test_data"
)
cursor = conn.cursor()

# SQL query with dynamic API name and time interval
sql_query = f"""
SELECT *
FROM `all api last 1 week performance report`
WHERE `API Name` = %s
  AND Timestamp BETWEEN (NOW() - INTERVAL {time_interval}) AND NOW()
ORDER BY `API Name`, Timestamp ASC;
"""

cursor.execute(sql_query, (api_name,))
results = cursor.fetchall()
column_names = [desc[0] for desc in cursor.description]
conn.close()

# Convert results to a readable string
results_str = "\n".join(
    [", ".join(f"{col}: {val}" for col, val in zip(column_names, row)) for row in results]
)

# Short, clear prompt for medium-length summary
prompt = (
    f"You are a data analyst. Analyze the performance of the API named '{api_name}' over the last {time_interval}.\n"
    "Hereâ€™s what you need to do:\n"
    "1. Briefly summarize the API's overall performance.\n"
    "2. Point out any spikes in errors or delays.\n"
    "3. Suggest simple causes and fixes, using clear language a non-technical user can understand.\n"
    "4. Mention noticeable trends (if any).\n\n"
    "Do NOT use too much text â€“ keep the explanation simple and straight to the point.\n"
    "Here's the data:\n"
)

# Function to summarize and visualize
def get_openai_client(prompt):
    try:
        response = openai.ChatCompletion.create(
            deployment_id="Fourth_Chatbot",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": results_str}
            ],
            max_tokens=900,
            temperature=0.5,
            top_p=0.9,
            frequency_penalty=0.2,
            presence_penalty=0.1
        )
        summary = response['choices'][0]['message']['content']
        print("ðŸ“Š API Performance Summary:\n")
        print(summary)

        # Generate pie chart from status code
        generate_status_pie_chart(results, column_names)

    except Exception as e:
        print(f"Error during generating the summary: {e}")

# Function to generate pie chart
def generate_status_pie_chart(results, column_names):
    status_idx = column_names.index("Status Code")
    status_counts = Counter()

    for row in results:
        status = row[status_idx]
        if status >= 400:
            status_counts["Failure (400+)"] += 1
        elif status >= 200:
            status_counts["Success (200+)"] += 1

    labels = list(status_counts.keys())
    sizes = list(status_counts.values())
    colors = ['red', 'green']
    explode = (0.1, 0) if "Failure (400+)" in labels else (0, 0)

    plt.figure(figsize=(6, 6))
    plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors, explode=explode)
    plt.title(f"API Status Code Distribution for '{api_name}'")
    plt.axis('equal')
    plt.tight_layout()
    plt.show()

# Run
get_openai_client(prompt)
