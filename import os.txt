import os
from pathlib import Path
from langchain.chat_models import AzureChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain.agents import initialize_agent, Tool
from langchain.memory import ConversationBufferMemory
from langchain.schema.runnable import RunnableLambda, RunnablePassthrough
from langchain.schema.output_parser import StrOutputParser
from langchain.schema.runnable import RunnableMap

# === Azure OpenAI Configuration ===
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="Fourth_Chatbot",
        openai_api_key="",  # Add your Azure API key
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        temperature=0.7,
        max_tokens=2000,
        model_kwargs={
            "top_p": 0.9,
            "frequency_penalty": 0.2,
            "presence_penalty": 0.1
        }
    )

# === Globals ===
project_path = r"C:\\Users\\rdamera\\Downloads\\OrderManagement 1\\OrderManagement"
last_file_list = []
mule_summary = ""
pom_summary = ""

# === TOOL 1: List Mule XML Files ===
def find_all_mule_xml_files(project_dir):
    xml_files = []
    for root, dirs, files in os.walk(project_dir):
        if any(part.lower() == "target" for part in Path(root).parts):
            continue
        normalized_root = os.path.normpath(root)
        if normalized_root.endswith(os.path.normpath(os.path.join("src", "main", "mule"))):
            for sub_root, _, sub_files in os.walk(root):
                for file in sub_files:
                    if file.lower().endswith(".xml"):
                        xml_files.append(os.path.normpath(os.path.join(sub_root, file)))
    return xml_files

def list_mule_xml_files(_: str) -> str:
    global last_file_list
    mule_xml_files = find_all_mule_xml_files(project_path)
    last_file_list = mule_xml_files
    if not mule_xml_files:
        return "[STOP] No XML files found under valid src/main/mule folders."
    return f"[SUCCESS] Found {len(mule_xml_files)} MuleSoft XML files:\n" + "\n".join(mule_xml_files)

# === TOOL 2: Summarize MuleSoft XML Files ===
def summarize_mule_files(_: str) -> str:
    global mule_summary
    if not last_file_list:
        return "[SKIP] No files loaded from previous step."

    client = get_openai_client()

    prompt = PromptTemplate(
        input_variables=["xml_content"],
        template="""
You are an expert in MuleSoft XML configuration. Analyze the following XML file and generate detailed documentation.
Focus on identifying and explaining flows, subflows, message flows, and global elements.
Describe their purpose and how they interact. Use clear headings and bullet points.

{xml_content}
"""
    )

    try:
        summarize_chain = (
            RunnablePassthrough()
            | RunnableLambda(lambda paths: [Path(path).read_text(encoding="utf-8") for path in paths])
            | RunnableLambda(lambda contents: [{"xml_content": c} for c in contents])
            | RunnableMap({"xml_content": RunnablePassthrough()})
            | prompt
            | client
            | StrOutputParser()
        )

        mule_summary = summarize_chain.invoke(last_file_list)
        return "[SUCCESS] MuleSoft XML summary created."

    except Exception as e:
        return f"[ERROR] MuleSoft summary failed: {str(e)}"

# === TOOL 3: Summarize pom.xml File ===
def summarize_pom(_: str) -> str:
    global pom_summary
    pom_path = Path(project_path) / "pom.xml"
    if not pom_path.exists():
        return "[SKIP] pom.xml not found in project root."

    try:
        pom_content = pom_path.read_text(encoding="utf-8")
        client = get_openai_client()
        prompt = PromptTemplate(
            input_variables=["pom_xml"],
            template="""
You are a Java Maven expert. Analyze the following pom.xml file and summarize:
- Project metadata and runtime setup
- Dependencies and plugin usage
- Build and packaging instructions
- Integration or deployment strategies

{pom_xml}
"""
        )
        chain = LLMChain(llm=client, prompt=prompt)
        pom_summary = chain.run(pom_xml=pom_content)
        return "[SUCCESS] pom.xml summary generated."
    except Exception as e:
        return f"[ERROR] pom.xml summary failed: {str(e)}"

# === TOOL 4: Generate Unified Final Summary ===
def generate_unified_report(_: str) -> str:
    if not mule_summary or not pom_summary:
        return "[SKIP] Required summaries not available for unified report."

    client = get_openai_client()
    prompt = PromptTemplate(
        input_variables=["mule_data", "pom_data"],
        template="""
You are Agent3, responsible for generating a unified, developer-friendly technical report.
You will receive two inputs:
1. MuleSoft XML summary (flows, connectors, configurations, logic)
2. Maven pom.xml summary (dependencies, plugins, build setup)

Your task:
- Combine both summaries into one cohesive report
- Help new developers understand the full tech setup
- Ensure logical flow, avoid duplication, and clearly show how the XML config and Maven setup work together

{mule_data}

{pom_data}
"""
    )
    chain = LLMChain(llm=client, prompt=prompt)
    return chain.run(mule_data=mule_summary, pom_data=pom_summary)

# === MAIN ===
if __name__ == "__main__":
    print("Initializing MuleSummarizerAgent with Tools and Memory...\n")

    memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

    tools = [
        Tool(name="ListMuleXMLFiles", func=list_mule_xml_files, description="Step 1: List XML files only under valid src/main/mule folders (excluding target folders)."),
        Tool(name="SummarizeMuleFiles", func=summarize_mule_files, description="Step 2: Summarize all loaded MuleSoft XML files."),
        Tool(name="SummarizePomFile", func=summarize_pom, description="Step 3: Summarize the Maven pom.xml file."),
        Tool(name="GenerateUnifiedSummary", func=generate_unified_report, description="Step 4: Generate a final unified report for MuleSoft + pom.xml setup.")
    ]

    client = get_openai_client()
    agent = initialize_agent(
        tools=tools,
        llm=client,
        agent_type="openai-functions",
        memory=memory,
        verbose=True
    )

    print("MuleSummarizerAgent is now deciding what to do...\n")

    agent.invoke(
        "List MuleSoft XML files, summarize them, summarize the pom.xml, then combine both into a final unified developer-friendly report."
    )
