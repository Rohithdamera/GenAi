import json
import requests
from sseclient import SSEClient
import re

# MCP config
MCP_URL = "https://your.mcp.server.url"  # Replace with actual MCP base URL
MCP_HEADERS = {"Content-Type": "application/json"}
MCP_PAYLOAD = {
    "method": "tools/call",
    "params": {
        "name": "get-vendors",
        "arguments": {}
    }
}

def extract_session_id(event_data: str):
    # Extract sessionId from /message?sessionId=....
    match = re.search(r"sessionId=([a-f0-9\-]+)", event_data)
    return match.group(1) if match else None

def get_vendor_data_from_session(session_id: str):
    message_url = f"{MCP_URL}/message?sessionId={session_id}"
    try:
        print(f"üì° Connecting to message endpoint: {message_url}")
        response = requests.get(message_url, timeout=300)

        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"[ERROR] Failed to fetch from /message: {e}")
        return None

def get_vendor_data():
    try:
        print("‚è≥ Step 1: Connect to MCP and initiate stream...")

        response = requests.post(
            MCP_URL,
            json=MCP_PAYLOAD,
            headers=MCP_HEADERS,
            stream=True,
            timeout=300
        )

        client = SSEClient(response)

        print("üîÑ Waiting for sessionId in event stream...\n")
        for event in client.events():
            print(f"üì® Event received: {event.data.strip()}")
            session_id = extract_session_id(event.data)
            if session_id:
                print(f"‚úÖ Found sessionId: {session_id}")
                print("‚è≥ Step 2: Calling /message to fetch vendor data...")
                return get_vendor_data_from_session(session_id)

        print("‚ùå sessionId not found in stream.")
        return None

    except Exception as e:
        print(f"[ERROR] Streaming failed: {e}")
        return None

# === Run ===
if __name__ == "__main__":
    vendor_data = get_vendor_data()

    if vendor_data:
        print("\n‚úÖ FINAL VENDOR DATA:\n")
        print(json.dumps(vendor_data, indent=2))
    else:
        print("\n‚ùå Vendor JSON not received. Something is wrong.")
