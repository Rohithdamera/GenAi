import os
import re
import yaml
import gradio as gr
import boto3
from typing import Optional, List, Tuple
from difflib import get_close_matches

# Utility: Fetch the contents of your S3 .txt file
def fetch_s3_file_content(arn: str) -> str:
    match = re.match(r"^arn:aws:s3:::(.+?)/(.*)$", arn)
    if not match:
        raise ValueError("Invalid S3 ARN format")
    bucket, key = match.groups()
    s3 = boto3.client(
        "s3",
        aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),  # Use env vars for security!
        aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
        region_name="us-east-1"
    )
    obj = s3.get_object(Bucket=bucket, Key=key)
    content = obj["Body"].read().decode("utf-8")
    if not content.strip():
        raise ValueError("S3 file is empty or unreadable.")
    return content

# Gets (dict) connector data AND (str) raw file.txt, plus title/name mapping
def get_connector_data_from_s3():
    S3_ARN = "arn:aws:s3:::osif-files/OSIF_Dependency_req.txt"  # or your actual bucket/key
    file_content = fetch_s3_file_content(S3_ARN)
    parsed_yaml = yaml.safe_load(file_content)
    connectors = parsed_yaml.get("core", {}).get("connectors", {})
    # Support for search by title or key
    title_to_key = {
        (v.get("title") or k).lower(): k
        for k, v in connectors.items()
    }
    return connectors, file_content, title_to_key

# Core: given user question, return exact YAML from .txt file
def get_connector_block(question: str, file_content: str, connectors: dict, title_to_key: dict) -> str:
    question_lower = question.lower()
    # List all connector keys and their titles for approximate matching
    all_names = list(connectors.keys()) + list(title_to_key.keys())
    # Try to match user's input
    matched = get_close_matches(question_lower, all_names, n=1, cutoff=0.35)
    if not matched:
        return "No matching connector found in the S3 file."
    # Find the connector key (could be via title or key)
    connector_key = title_to_key.get(matched[0], matched[0])
    # Find YAML block for that connector in the raw txt file
    lines = file_content.splitlines()
    # Scan for the core: → connectors: → {connector_key}:
    start = None
    for i, line in enumerate(lines):
        if re.match(r"^\s*%s\s*:\s*$" % re.escape(connector_key), line):
            start = i
            break
    if start is not None:
        # Capture the block by indentation
        base_indent = len(lines[start]) - len(lines[start].lstrip())
        block_lines = [lines[start]]
        for j in range(start + 1, len(lines)):
            curr = lines[j]
            curr_indent = len(curr) - len(curr.lstrip())
            if curr.strip() == "":
                block_lines.append(curr)
            elif curr_indent > base_indent:
                block_lines.append(curr)
            else:
                break
        return "\n".join(block_lines)
    return "Connector found, but could not extract its YAML from file."

# Gradio UI: Only show the exact snippet from S3 (no extra formatting)
def chat_ui(message: str, history: Optional[List[Tuple[str, str]]] = None) -> str:
    connectors, file_content, title_to_key = get_connector_data_from_s3()
    return get_connector_block(message, file_content, connectors, title_to_key)

if __name__ == "__main__":
    gr.Interface(
        fn=chat_ui,
        inputs="text",
        outputs="text",
        title="Connector YAML Lookup",
        description="Ask for any connector by name or title. The exact configuration will be shown from S3."
    ).launch()
