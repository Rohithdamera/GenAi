import os
import json
import random
import string
import logging
from base64 import b64decode

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Simulated OpenAI client
def mock_openai_client(model_instance_name):
    class MockClient:
        def invoke(self, messages):
            raml_content = messages[0]['content']
            endpoints = extract_endpoints_from_raml(raml_content)
            payloads = generate_payloads_for_endpoints(endpoints, raml_content)
            return type('obj', (object,), {'content': json.dumps(payloads)})
    return MockClient()

# Extract top-level endpoints from RAML
def extract_endpoints_from_raml(raml_content):
    lines = raml_content.split('\n')
    endpoints = []
    for line in lines:
        stripped = line.strip()
        if stripped.startswith('/') and ':' not in stripped:
            endpoints.append(stripped)
    return endpoints

# Extract body fields based on indentation under an endpoint
def extract_fields_for_endpoint(endpoint, raml_content):
    lines = raml_content.split('\n')
    fields = {}
    capture = False
    indent_level = None

    for i, line in enumerate(lines):
        stripped = line.strip()
        if stripped == endpoint:
            capture = True
            indent_level = len(line) - len(stripped)
            continue

        if capture:
            current_indent = len(line) - len(line.lstrip())
            if current_indent <= indent_level or stripped.startswith('/'):
                break  # End of current endpoint
            if ':' in stripped:
                key, val = map(str.strip, stripped.split(':', 1))
                if key and val:
                    fields[key] = val
    return fields

# Generate randomized value based on original value
def generate_random_value(original_value):
    if original_value.isdigit():
        return random.randint(1000, 9999)
    elif original_value.lower() in ['true', 'false']:
        return random.choice([True, False])
    elif '-' in original_value and all(p.isdigit() for p in original_value.split('-') if p):
        return f"{random.randint(2000, 2030)}-{random.randint(1, 12):02}-{random.randint(1, 28):02}"
    elif original_value.replace('-', '').isalnum():
        return ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    else:
        return ''.join(random.choices(string.ascii_letters, k=8))

# Create randomized payload from field structure
def generate_randomized_payload(field_template):
    return {k: generate_random_value(v) for k, v in field_template.items()}

# Generate two payloads per endpoint
def generate_payloads_for_endpoints(endpoints, raml_content):
    payloads = {}
    for endpoint in endpoints:
        fields = extract_fields_for_endpoint(endpoint, raml_content)
        if fields:
            payloads[endpoint] = [
                generate_randomized_payload(fields),
                generate_randomized_payload(fields)
            ]
    return payloads

# Main RAML analysis logic
def analyze_raml_with_openai(client, raml_content):
    try:
        prompt = (
            "You are a RAML test data generator.\n"
            "Each time you receive RAML content, you must:\n"
            "1. Identify all endpoints and associated fields.\n"
            "2. For each endpoint, generate two test payloads.\n"
            "3. Use **randomized values** for fields while keeping the field names and structure unchanged.\n"
            "4. Do not reuse or copy any actual values; only generate new random ones.\n\n"
            "Below is the RAML content:\n\n"
        )
        response = client.invoke([{"content": prompt + raml_content}])
        return response.content
    except Exception as e:
        logger.error(f"Error analyzing RAML with OpenAI: {e}")
        raise ValueError(f"Error analyzing RAML with OpenAI: {e}")

# Lambda handler
def lambda_handler(event, context):
    logger.info("Lambda invoked.")
    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("RAML file content is missing or not base64-encoded.")

        raml_content = b64decode(event['body']).decode('utf-8')

        headers = event.get('headers', {})
        model_instance_name = (
            headers.get('model_instance_name') or
            headers.get('Model_Instance_Name') or
            os.environ.get('DEFAULT_MODEL_INSTANCE_NAME', 'default-model')
        )

        client = mock_openai_client(model_instance_name)
        result = analyze_raml_with_openai(client, raml_content)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": result
        }

    except Exception as e:
        logger.error(f"Execution error: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
