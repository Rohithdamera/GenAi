import os
import shutil
from pathlib import Path
import gradio as gr
import json
import re

from langchain.prompts import PromptTemplate
from langchain_openai import AzureChatOpenAI

# === Azure OpenAI Client ===
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="gpt-4_complex_conversions",
        openai_api_key="",
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        temperature=0.4,
        max_tokens=4000,
    )

llm = get_openai_client()

# === Step 1: Extract project name + reference path ===
def extract_user_intent(user_input: str) -> dict:
    prompt = PromptTemplate(
        input_variables=["user_input"],
        template="""
From the following user request, extract the information.

Return ONLY valid JSON with:
- new_project_name: (e.g. AWS_Connector, GCP_Connector)
- reference_path: (absolute path provided by user)

User request:
{user_input}
"""
    )
    response = (prompt | llm).invoke({"user_input": user_input})
    return json.loads(response.content.strip())

# === Step 2: Let AI decide renaming map for folders/files ===
def get_rename_map(reference_path: str, new_project_name: str) -> dict:
    structure = []
    for root, dirs, files in os.walk(reference_path):
        rel_root = os.path.relpath(root, reference_path)
        if rel_root == ".":
            rel_root = ""
        structure.append({"path": rel_root, "dirs": dirs, "files": files})

    prompt = PromptTemplate(
        input_variables=["structure", "new_name"],
        template="""
You are refactoring a Java project.

The current folder structure is:
{structure}

Rules:
- Detect the old project/folder/class/package naming.
- Suggest replacements so the project is renamed to {new_name}.
- Example: "cg-osif-salesforce-opportunity" → "AWS_Connector", "salesforce" → "AWS".
- Return ONLY valid JSON with key-value pairs where key=old name, value=new name.
"""
    )
    response = (prompt | llm).invoke({"structure": json.dumps(structure), "new_name": new_project_name})
    return json.loads(response.content.strip())

# === Step 3: AI rewrites code files ===
def rewrite_file_with_ai(source: str, new_project_name: str) -> str:
    prompt = PromptTemplate(
        input_variables=["source", "new_name"],
        template="""
Refactor the Java file.

- Replace all old project/folder/class/package names with {new_name}.
- If contains main() → class name = {new_name}.
- Preserve compilable code.

Source:
{source}
"""
    )
    response = (prompt | llm).invoke({"source": source, "new_name": new_project_name})
    return response.content.strip()

# === Step 4: Apply renames + rewrite project ===
def rewrite_project(reference_path: str, new_project_name: str) -> str:
    ref_path = Path(reference_path)
    if not ref_path.exists():
        return f"[ERROR] Reference project not found: {reference_path}"

    target_base = Path("C:/Users/rdamera/javaproj")
    target_path = target_base / new_project_name
    if target_path.exists():
        shutil.rmtree(target_path)
    shutil.copytree(ref_path, target_path)

    # Ask AI for rename mapping
    rename_map = get_rename_map(reference_path, new_project_name)

    # Apply folder/file renames
    for old, new in sorted(rename_map.items(), key=lambda x: -len(x[0])):
        for path in target_path.rglob("*"):
            if old in path.name:
                new_path = path.with_name(path.name.replace(old, new))
                path.rename(new_path)

    # Rewrite file contents
    for file_path in target_path.rglob("*.*"):
        if file_path.suffix in [".java", ".xml", ".properties", ".yml", ".gradle", ".md"]:
            source = file_path.read_text(encoding="utf-8", errors="ignore")
            updated = rewrite_file_with_ai(source, new_project_name)
            file_path.write_text(updated, encoding="utf-8")

    return str(target_path)

# === Main Orchestration ===
def process_java_project(user_input: str, history):
    try:
        # Step 1: Extract intent
        intent = extract_user_intent(user_input)
        reference_path = intent["reference_path"]
        new_project_name = intent["new_project_name"]

        # Step 2: Rewrite project
        new_path = rewrite_project(reference_path, new_project_name)

        return f"[SUCCESS] Project '{new_project_name}' created at {new_path}"

    except Exception as e:
        return f"[ERROR] {str(e)}"

# === Gradio UI ===
chatbot_ui = gr.ChatInterface(
    fn=process_java_project,
    title="AI Java Project Generator",
    description="Provide a reference project path and a new project name. AI will regenerate the project with updated names in folders, classes, and references.",
    theme="default",
)

if __name__ == "__main__":
    chatbot_ui.launch()
