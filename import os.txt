import os
import logging
import json
import re
from base64 import b64decode
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def get_openai_client():
    api_base = os.environ['OPENAI_API_BASE']
    api_key = os.environ['OPENAI_API_KEY']
    api_version = os.environ['AZURE_API_VERSION']
    model_instance_name = os.environ['MODEL_INSTANCE_NAME']

    if not api_base.endswith('/'):
        api_base += '/'

    return AzureChatOpenAI(
        deployment_name=model_instance_name,
        openai_api_base=api_base,
        openai_api_key=api_key,
        openai_api_version=api_version
    )

def lambda_handler(event, context):
    try:
        logger.info("Received event: %s", json.dumps(event)[:1000])

        if 'body' not in event or not event['isBase64Encoded']:
            return {
                "statusCode": 400,
                "body": json.dumps({"error": "Missing or invalid file content"})
            }

        file_content = b64decode(event['body']).decode('utf-8')

        client = get_openai_client()

        instruction = (
            "You are an expert in Java testing. Generate comprehensive JUnit test cases "
            "for the following Java class. Include setup methods and test both positive and negative scenarios."
        )

        messages = [
            HumanMessage(content=instruction),
            HumanMessage(content=file_content)
        ]

        response = client.invoke(messages)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "text/plain"},
            "body": response.content.strip()
        }

    except Exception as e:
        logger.error("Error: %s", str(e))
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
