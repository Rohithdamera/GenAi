# MCPReActAzure/function_app.py

import time
import uuid
import json
import asyncio
import pandas as pd
from langchain.chat_models import AzureChatOpenAI
from langchain.agents import Tool, initialize_agent
from langchain.agents.agent_types import AgentType
from mcp import ClientSession
from mcp.client.sse import sse_client

# ==== Chat Session Memory ====
chat_sessions = {}
SESSION_TTL = 30 * 60  # 30 minutes

def create_session():
    conversation_id = str(uuid.uuid4())
    chat_sessions[conversation_id] = {"created_at": time.time(), "messages": []}
    return conversation_id

def add_message(conversation_id, role, content):
    if conversation_id in chat_sessions:
        chat_sessions[conversation_id]["messages"].append({"role": role, "content": content})

def get_history(conversation_id):
    return chat_sessions.get(conversation_id, {}).get("messages", [])

def cleanup_expired_sessions():
    current_time = time.time()
    expired_ids = [cid for cid, s in chat_sessions.items()
                   if current_time - s["created_at"] > SESSION_TTL]
    for cid in expired_ids:
        del chat_sessions[cid]

# ==== Azure OpenAI Setup ====
def get_openai_client():
    return AzureChatOpenAI(
        azure_deployment="Fourth_Chatbot",
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        openai_api_version="2024-08-01-preview",
        openai_api_key="",  # Provide securely via Azure Key Vault or environment
        temperature=0.3,
        max_tokens=2000,
    )

# ==== Tool Setup ====
sse_url = "https://mcp-server-sse-cg-employees-sandbox-6b0n6.dw4w1g-2.gbr-e1.cloudhub.io/sse"

def sync_call_tool(tool_name: str, params: dict):
    async def call():
        async with sse_client(url=sse_url) as streams:
            async with ClientSession(*streams) as session:
                await session.initialize()
                return await session.call_tool(tool_name, params)
    return asyncio.get_event_loop().run_until_complete(call())

def fetch_all_tools():
    async def fetch():
        async with sse_client(url=sse_url) as streams:
            async with ClientSession(*streams) as session:
                await session.initialize()
                return await session.list_tools()
    return asyncio.get_event_loop().run_until_complete(fetch())

def get_tools():
    raw = fetch_all_tools()
    tools = []

    for t in getattr(raw, "tools", []):
        name = t.name
        required_fields = t.inputSchema.get("required", []) if t.inputSchema else []

        def make_func(tool_name=name, req=required_fields):
            def fn(input_str: str) -> str:
                try:
                    parsed = json.loads(input_str) if input_str else {}
                except:
                    parsed = {}
                for key in req:
                    parsed.setdefault(key, "")
                try:
                    result = sync_call_tool(tool_name, parsed)
                    return json.dumps(result, indent=2, default=str)
                except Exception as e:
                    return f"[ERROR] {tool_name}: {str(e)}"
            return fn

        tools.append(
            Tool(
                name=name,
                func=make_func(),
                description=f"{t.description or ''} Required fields: {required_fields}",
                return_direct=False,
            )
        )

    return tools

# ==== Output Renderer ====
def render_output_as_table(output_text: str):
    try:
        data = json.loads(output_text)
        if isinstance(data, list):
            df = pd.DataFrame(data)
        elif isinstance(data, dict):
            df = pd.DataFrame([data])
        else:
            return output_text
        return df.to_string(index=False)
    except Exception:
        return output_text

# ==== Custom Prompt ====
CUSTOM_PREFIX = """
You are an intelligent support agent with access to multiple tools containing employee, project, and organizational data.

Your responsibilities:

- Always check all tools for relevant data before concluding that something is not found.
- If a tool returns partial information (like employee ID), use that to search in other tools.
- If names are misspelled or abbreviated (e.g., HYD for Hyderabad, benguluru for Bangalore), still attempt to resolve them using available data across all tools.
- Present the final answer in a table format only, with no emojis or markdown.
- Always attempt a multi-hop reasoning process until an accurate and complete answer is found.
- Never stop after a single failed attempt unless all tools are tried.
"""

# ==== Build Agent ====
def build_agent():
    tools = get_tools()
    llm = get_openai_client()
    return initialize_agent(
        tools=tools,
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        verbose=True,
        max_iterations=10,
        handle_parsing_errors=True,
        agent_kwargs={"prefix": CUSTOM_PREFIX}
    )

# ==== Azure Function Endpoint ====
def run_agent_on_query(query, conversation_id=None):
    if not conversation_id:
        conversation_id = create_session()
    cleanup_expired_sessions()
    agent = build_agent()

    result = agent.invoke({"input": query})
    output = result["output"]

    add_message(conversation_id, "user", query)
    add_message(conversation_id, "assistant", output)

    return conversation_id, render_output_as_table(output)






--------------------------------------------------



# MCPReActAzure/__init__.py

import logging
import azure.functions as func
import json
from .function_app import run_agent_on_query

def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info("Processing MCP ReAct query")

    try:
        body = req.get_json()
        query = body.get("query", "")
        cid = body.get("conversation_id", None)

        if not query:
            return func.HttpResponse("Missing query", status_code=400)

        conv_id, output = run_agent_on_query(query, cid)

        return func.HttpResponse(
            json.dumps({
                "conversation_id": conv_id,
                "output": output
            }),
            mimetype="application/json",
            status_code=200
        )

    except Exception as e:
        logging.error(f"Error: {str(e)}")
        return func.HttpResponse(f"Server error: {str(e)}", status_code=500)



---------------------------------------


azure-functions==1.18.0
nest_asyncio==1.6.0
pandas==2.2.2
langchain==0.1.20
openai==1.25.1
tqdm==4.66.4
aiohttp==3.9.5
typing-extensions==4.12.1
mcp==0.1.4  # Replace with actual version you're using



