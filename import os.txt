import os
import shutil
import zipfile
import json
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES

# Setup logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== Decryption (if needed) ==========
def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Error during decryption: {e}")
        raise ValueError(f"Error during decryption: {e}")

# ========== Data Generation ==========
def random_datetime():
    return f"{random.randint(1,28):02}/{random.randint(1,12):02}/2025 {random.randint(0,23):02}:{random.randint(0,59):02}:{random.randint(0,59):02}"

def random_uuid():
    sections = [8, 4, 4, 4, 12]
    return '-'.join(''.join(random.choices(string.hexdigits.lower(), k=s)) for s in sections)

def random_string_like(value):
    if isinstance(value, str):
        if any(sep in value for sep in ['/', '-', ':']):
            return random_datetime()
        elif len(value) == 36 or len(value) == 32:
            return random_uuid()
        elif value.isdigit():
            return ''.join(random.choices(string.digits, k=len(value)))
        else:
            return ''.join(random.choices(string.ascii_letters + string.digits, k=len(value)))
    return value

def generate_random_value_by_sample(sample_value):
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif isinstance(sample_value, str):
        return random_string_like(sample_value)
    elif sample_value is None:
        return None
    return sample_value

def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(item) for item in template]
    return generate_random_value_by_sample(template)

# ========== RAML Unzipping and Parsing ==========
def unzip_raml(zip_bytes, extract_dir="/tmp/temp_raml"):
    if os.path.exists(extract_dir):
        shutil.rmtree(extract_dir)
    os.makedirs(extract_dir, exist_ok=True)

    zip_path = "/tmp/uploaded.zip"
    with open(zip_path, "wb") as f:
        f.write(zip_bytes)

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)

    return extract_dir

def find_main_raml_file(base_dir):
    for root, _, files in os.walk(base_dir):
        for file in files:
            if file.endswith(".rml"):
                full_path = os.path.join(root, file)
                with open(full_path, 'r', encoding='utf-8', errors='ignore') as f:
                    if "#%RAML 1.0" in f.readline():
                        return full_path
    raise FileNotFoundError("Main RAML file not found.")

def resolve_include_path(include_path, root_dir, current_dir):
    for base in [current_dir, root_dir, os.path.join(root_dir, 'examples', 'request')]:
        full_path = os.path.normpath(os.path.join(base, include_path))
        if os.path.isfile(full_path):
            return full_path

    for search_dir in [os.path.join(root_dir, 'examples', 'request'), root_dir]:
        for root, _, files in os.walk(search_dir):
            for f in files:
                if f == os.path.basename(include_path):
                    return os.path.join(root, f)
    return None

def resolve_includes_in_raml(file_path, root_dir):
    resolved_lines = []
    current_dir = os.path.dirname(file_path)

    with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
        for line in file:
            if "!include" in line:
                parts = line.strip().split("!include")
                prefix = parts[0].strip()
                include_path = parts[1].strip()
                include_file = resolve_include_path(include_path, root_dir, current_dir)

                if include_file and os.path.exists(include_file):
                    with open(include_file, 'r', encoding='utf-8', errors='ignore') as inc_file:
                        resolved_lines.append(f"{prefix} |\n")
                        for inc_line in inc_file.read().splitlines():
                            resolved_lines.append(f"  {inc_line}")
                else:
                    resolved_lines.append(f"{line.strip()}  # Include not found")
            else:
                resolved_lines.append(line.rstrip())

    return "\n".join(resolved_lines)

# ========== RAML Test Payload Generation ==========
def extract_endpoints_from_raml(raml_content):
    endpoints = []
    for line in raml_content.split('\n'):
        if line.strip().startswith('/'):
            endpoints.append(line.strip())
    return endpoints

def extract_fields_for_endpoint(endpoint, raml_content):
    fields = {}
    lines = raml_content.split('\n')
    capture = False
    for line in lines:
        if line.strip() == endpoint:
            capture = True
        elif capture and line.startswith('/'):
            break
        elif capture and ':' in line:
            parts = line.strip().split(':')
            if len(parts) == 2:
                fields[parts[0].strip()] = parts[1].strip() or "string"
    return fields

def generate_randomized_payload(field_template):
    return {k: generate_random_value_by_sample(v) for k, v in field_template.items()}

def generate_test_payloads(raml_content):
    endpoints = extract_endpoints_from_raml(raml_content)
    result = {}
    for endpoint in endpoints:
        template = extract_fields_for_endpoint(endpoint, raml_content)
        result[endpoint] = [
            generate_randomized_payload(template),
            generate_randomized_payload(template)
        ]
    return result

# ========== Event Header Extraction ==========
def get_model_instance_name(event):
    """Retrieve model instance name from headers or generate a random one."""
    return event.get('headers', {}).get('model_instance_name', 'chatbot_' + ''.join(random.choices(string.ascii_lowercase + string.digits, k=6)))

def get_count_from_headers(event):
    """Retrieve the count from headers or default to 1."""
    try:
        return max(1, int(event.get('headers', {}).get('count', '1')))
    except Exception:
        return 1

def build_dynamic_prompt(model_instance_name):
    """Build a dynamic prompt based on the model instance name."""
    return (
        f"You are an expert RAML analyzer. Using the model instance '{model_instance_name}', "
        "analyze the provided RAML content. Resolve all includes such as traits, resource types, and fragments. "
        "Then generate realistic randomized test payloads for each endpoint while preserving the field names, "
        "structure, and data types. Ensure the output is in clean JSON format without explanations."
    )

# ========== Lambda Handler ==========
def lambda_handler(event, context):
    """Main Lambda function handler."""
    logger.info("Lambda function invoked.")
    try:
        # Retrieve and decode file content (base64 or plain text)
        body = event.get('body')
        if not body:
            raise ValueError("Missing file content in request.")

        if event.get('isBase64Encoded', False):
            raw_content = base64.b64decode(body).decode('utf-8', errors='replace')
        else:
            raw_content = body

        # Unzip and parse RAML files
        zip_bytes = b64decode(raw_content)
        extracted_dir = unzip_raml(zip_bytes)
        main_raml_file = find_main_raml_file(extracted_dir)
        resolved_raml = resolve_includes_in_raml(main_raml_file, extracted_dir)

        # Extract POST endpoints and generate test data
        post_endpoints = extract_endpoints_from_raml(resolved_raml)
        post_payloads = {}
        for endpoint in post_endpoints:
            if 'POST' in endpoint:  # Only process POST endpoints
                template = extract_fields_for_endpoint(endpoint, resolved_raml)
                post_payloads[endpoint] = [
                    generate_randomized_payload(template),
                    generate_randomized_payload(template)
                ]

        # Extract model instance name and count from headers
        model_instance_name = get_model_instance_name(event)
        count = get_count_from_headers(event)
        prompt = build_dynamic_prompt(model_instance_name)

        logger.info(f"Model instance: {model_instance_name}, Dataset count: {count}")
        logger.debug(f"Prompt: {prompt}")

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"post_payloads": post_payloads})
        }

    except Exception as e:
        logger.error(f"Error: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }
