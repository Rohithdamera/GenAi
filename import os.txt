import os
import logging
import json
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    decrypted_data = unpad(decrypted_data)
    return decrypted_data.decode()

def get_openai_client(model_instance_name):
    try:
        aes_key_base64 = os.environ['AES_KEY']
        encrypted_api_base = os.environ['ENCRYPTED_API_BASE']
        encrypted_api_key = os.environ['ENCRYPTED_API_KEY']
        api_version = os.environ['AZURE_API_VERSION']

        decrypted_api_base = decrypt(encrypted_api_base, aes_key_base64)
        decrypted_api_key = decrypt(encrypted_api_key, aes_key_base64)

        if not decrypted_api_base.endswith('/'):
            decrypted_api_base += '/'

        logger.info(f"Using OpenAI base: {decrypted_api_base}")

        return AzureChatOpenAI(
            deployment_name=model_instance_name,
            openai_api_base=decrypted_api_base,
            openai_api_key=decrypted_api_key,
            openai_api_version=api_version
        )
    except Exception as e:
        logger.error(f"Failed to initialize OpenAI client: {e}")
        raise ValueError(f"OpenAI client init error: {e}")

def validate_xsd(file_content):
    """Ensure it's a valid XSD file by checking for <xsd:schema or <xs:schema."""
    if not file_content.strip().startswith("<xsd:schema") and not file_content.strip().startswith("<xs:schema"):
        raise ValueError("Invalid file type. Expected an XSD file starting with <xsd:schema> or <xs:schema>.")

def process_with_openai(client, file_content):
    """Send file content to OpenAI with specific prompt and instruction."""
    try:
        instruction = (
            "You are an expert in analysing the XSD and generating the payload from the XSD. "
            "I am providing the XSD which will be used as an asset for designing my API. "
            "Please analyse the XSD and generate the sample payload which will honour all the rules inside the XSD. "
            "You can refer the link for any doubts related to XSD https://www.tutorialspoint.com/xsd/index.htm"
        )
        prompt = "Please generate the payloads for the given XSD."

        full_prompt = f"{instruction}\n\n{prompt}\n\n{file_content}"
        response = client.invoke([HumanMessage(content=full_prompt)])
        return response.content
    except Exception as e:
        logger.error(f"OpenAI processing error: {e}")
        raise

def lambda_handler(event, context):
    logger.info(f"Received event: {json.dumps(event)}")

    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("File content missing or not base64 encoded.")

        file_content = b64decode(event['body']).decode('utf-8')

        # Validate input path
        query_params = event.get('queryStringParameters', {})
        input_path = query_params.get('input')
        if input_path != "/sampleforxsd":
            raise ValueError("Unsupported input value. Expected 'input=/sampleforxsd'.")

        # Validate XSD file structure
        validate_xsd(file_content)

        # Get model instance from headers
        model_instance_name = event['headers'].get('model_instance_name')
        if not model_instance_name:
            raise ValueError("'model_instance_name' header is required.")

        # Initialize OpenAI and process
        client = get_openai_client(model_instance_name)
        result = process_with_openai(client, file_content)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": result
        }

    except Exception as e:
        logger.error(f"Error occurred: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
