import json
import requests
from sseclient import SSEClient
from urllib.parse import urljoin, urlparse

# Step 1: MCP connection to get sessionId
MCP_URL = "https://your.mcp.server.url"  # Replace this
MCP_PAYLOAD = {
    "method": "tools/call",
    "params": {
        "name": "get-vendors",
        "arguments": {}
    }
}

def extract_base_url(mcp_url):
    parsed = urlparse(mcp_url)
    return f"{parsed.scheme}://{parsed.netloc}"

def step1_get_session_id():
    try:
        print("üîå Step 1: Connect to MCP and initiate stream...")

        response = requests.post(
            MCP_URL,
            json=MCP_PAYLOAD,
            headers={"Content-Type": "application/json"},
            stream=True,
            timeout=300
        )

        client = SSEClient(response)
        print("üëÇ Waiting for sessionId in event stream...")

        for event in client.events():
            session_line = event.data.strip()
            if "sessionId=" in session_line:
                print(f"‚úÖ Found sessionId: {session_line}")
                return session_line  # e.g. /message?sessionId=...
        return None
    except Exception as e:
        print(f"[ERROR] Failed to get sessionId from MCP: {e}")
        return None

def step2_get_vendor_data(message_path: str):
    try:
        base_url = extract_base_url(MCP_URL)
        
        # IMPORTANT: fix the wrong URL if "/sse" causes 404
        # Postman probably calls just base + message path
        full_url = urljoin(base_url, message_path)  # do NOT prepend /sse/
        
        print(f"üîÅ Step 2: Calling message endpoint: {full_url}")

        response = requests.get(
            full_url,
            headers={"Accept": "text/event-stream"},
            stream=True,
            timeout=300
        )

        client = SSEClient(response)
        for event in client.events():
            data = event.data.strip()
            try:
                parsed = json.loads(data)
                print("‚úÖ Vendor JSON received successfully!")
                return parsed
            except json.JSONDecodeError:
                print("‚è≥ Still waiting for JSON data...\n")

        return None
    except Exception as e:
        print(f"[ERROR] Failed to fetch from /message: {e}")
        return None

# === Main Execution ===
if __name__ == "__main__":
    message_path = step1_get_session_id()

    if not message_path:
        print("‚ùå No sessionId received from MCP. Cannot proceed.")
    else:
        result = step2_get_vendor_data(message_path)

        if result:
            print("\n‚úÖ FINAL VENDOR DATA:\n")
            print(json.dumps(result, indent=2))
        else:
            print("\n‚ùå Vendor JSON not received. Something is wrong.")
