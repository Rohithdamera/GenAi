import os, json, asyncio, nest_asyncio
from typing import List, Dict, Any
from mcp.client.sse import sse_client
from mcp import ClientSession
from langchain.chat_models import AzureChatOpenAI
from langchain.agents import initialize_agent, AgentType
from langchain.tools import Tool

nest_asyncio.apply()

# === 1. Initialize Azure OpenAI ===
def get_openai_client():
    return AzureChatOpenAI(
        azure_deployment="Fourth_Chatbot",
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        azure_api_version="2024-08-01-preview",
        azure_api_key=os.getenv("AZURE_OPENAI_KEY"),
        temperature=0.0,
        max_tokens=1500
    )

# === 2. Start MCP Session via SSE ===
async def start_mcp_session(sse_url: str) -> ClientSession:
    async with sse_client(url=sse_url) as streams:
        async with ClientSession(streams[0], streams[1]) as session:
            await session.initialize()
            return session

# === 3. Fetch Available Tools ===
async def fetch_tool_names(session: ClientSession) -> List[str]:
    info = await session.list_tools()
    return [t.name for t in getattr(info, "tools", [])]

# === 4. Wrap Tools for Agent ===
def build_tools(session: ClientSession, names: List[str]) -> List[Tool]:
    tools = []
    for n in names:
        async def fn(inp: str, name=n):
            try:
                params = json.loads(inp) if inp else {}
                res = await session.call_tool(name, params)
                return json.dumps(res, default=str)
            except Exception as e:
                return f"[ERROR] {name}: {e}"

        tools.append(Tool.from_function(
            name=n,
            func=fn,
            coroutine=fn,
            description=f"Call MCP tool `{n}`"
        ))
    return tools

# === 5. Main Agent Logic ===
async def main():
    sse_url = "https://employee-mcp-v1-6b0n96.dw4w1g-2.gbr-e1.cloudhub.io/sse"

    async with sse_client(url=sse_url) as streams:
        async with ClientSession(streams[0], streams[1]) as session:
            await session.initialize()

            tools = build_tools(session, await fetch_tool_names(session))
            print("üõ†Ô∏è Tools:", [t.name for t in tools])

            agent = initialize_agent(
                tools=tools,
                llm=get_openai_client(),
                agent=AgentType.OPENAI_FUNCTIONS,
                verbose=True,
                handle_parsing_errors=True
            )

            print("\nü§ñ Ask anything (type 'exit'):")
            while True:
                q = input("You: ").strip()
                if q.lower() in ("exit", "quit"):
                    break
                try:
                    resp = await agent.arun(q)
                    print("Bot:", resp, "\n")
                except Exception as ex:
                    print("Error:", ex)

if __name__ == "__main__":
    asyncio.run(main())
