import json
import base64
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES
 
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
 
# Function to unpad data after decryption (removes padding bytes)
def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]
 
# AES decryption function for credentials or data
def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Error during decryption: {e}")
        raise ValueError(f"Error during decryption: {e}")
 
# Generate a random value based on the expected type of the field
def generate_random_value(value_type):
    if value_type == "int":
        return random.randint(1000, 9999)  # Generates a random integer
    elif value_type == "float":
        return round(random.uniform(1.0, 10000.0), 2)  # Generates a random float
    elif value_type == "string":
        return ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(4, 10)))  # Random string
    elif value_type == "boolean":
        return random.choice([True, False])  # Random boolean
    else:
        return None  # Default for unknown types
 
# Function to recursively generate randomized values for a dictionary or list
def generate_random_structure(data):
    if isinstance(data, dict):
        return {k: generate_random_structure(v) for k, v in data.items()}
    elif isinstance(data, list):
        return [generate_random_structure(v) for v in data]
    else:
        return data  # Return the value itself if it's not a dict or list
 
# Extract model instance name from headers if provided
def get_model_instance_name(event):
    return event['headers'].get('model_instance_name', 'default_chatbot')
 
# Main Lambda function handler
def lambda_handler(event, context):
    logger.info("Lambda function invoked.")
   
    try:
        # Ensure that the event contains base64-encoded body
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("Missing or invalid file data in request.")
       
        # Decode base64 RAML file
        content = base64.b64decode(event['body']).decode('utf-8')
 
        # Extract JSON portion starting from first '{' (assuming it's the main data)
        json_start = content.find('{')
        if json_start == -1:
            raise ValueError("No JSON content found in RAML file.")
       
        json_string = content[json_start:]
        original_data = json.loads(json_string)
 
        # Generate randomized values based on the original data structure
        randomized_data = generate_random_structure(original_data)
 
        # Get model instance name from headers (this will be used for the model call if needed)
        model_instance_name = get_model_instance_name(event)
       
        # Dynamically generate the prompt
        prompt = (
            f"You are an expert RAML analyzer. Using the model instance '{model_instance_name}', "
            "analyze the following RAML content, resolve all included files, traits, resource types, "
            "and fragments, and generate two randomized test payloads for each endpoint defined. "
            "The payload must maintain the field names and structure, but all values must be changed "
            "to realistic random examples matching the original data types. "
            "Return only the JSON with endpoints and their test payloads."
        )
 
        # Return the randomized test data as the result
        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(randomized_data)
        }
 
    except Exception as e:
        logger.error(f"Error in Lambda handler: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }
