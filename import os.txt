import mysql.connector
import openai
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# Set your OpenAI Azure configuration
openai.api_type = "azure"
openai.api_key = ""  # <-- Add your API Key
openai.api_base = "https://testopenaiassets.openai.azure.com/"
openai.api_version = "2024-08-01-preview"

# Get user input
api_name = input("Enter the API name (e.g., EXA-api): ").strip()
time_interval = input("Enter the time interval (e.g., 3 HOUR, 1 DAY): ").strip().upper()

# Connect to MySQL
conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="Admin",
    database="test_data"
)
cursor = conn.cursor()

# Query the performance data
sql_query = f"""
SELECT *
FROM `all api last 1 week performance report`
WHERE `API Name` = %s
  AND Timestamp BETWEEN (NOW() - INTERVAL {time_interval}) AND NOW()
ORDER BY `API Name`, Timestamp ASC;
"""
cursor.execute(sql_query, (api_name,))
results = cursor.fetchall()
column_names = [desc[0] for desc in cursor.description]
conn.close()

# Convert to DataFrame
df = pd.DataFrame(results, columns=column_names)

# Normalize column names for flexible matching
df.columns = [col.strip().lower() for col in df.columns]

# Identify required columns
def find_column(keywords):
    for col in df.columns:
        if all(kw in col for kw in keywords):
            return col
    return None

col_timestamp = find_column(['timestamp'])
col_response = find_column(['response', 'time'])
col_error = find_column(['error'])
col_volume = find_column(['request']) or find_column(['volume'])

# Debug info
print(f"\n✅ Column matches:\n- Timestamp: {col_timestamp}\n- Response Time: {col_response}\n- Error Rate: {col_error}\n- Request Volume: {col_volume}\n")

# Handle missing columns
missing = []
if not col_timestamp: missing.append("timestamp")
if not col_response: missing.append("response time")
if not col_error:    missing.append("error rate")
if not col_volume:   missing.append("request volume")

if missing:
    print(f"❌ Graph error: Missing required columns: {', '.join(missing)}")
else:
    try:
        # Convert relevant columns to numeric
        df[col_response] = pd.to_numeric(df[col_response], errors='coerce')
        df[col_error] = pd.to_numeric(df[col_error], errors='coerce')
        df[col_volume] = pd.to_numeric(df[col_volume], errors='coerce')

        # Drop rows with NaNs in required columns
        df.dropna(subset=[col_response, col_error, col_volume], inplace=True)

        # Create summary data
        metrics = {
            'Total Response Time (ms)': df[col_response].sum(),
            'Total Error Rate (%)': df[col_error].sum(),
            'Total Request Volume': df[col_volume].sum()
        }

        # Pie Chart
        plt.figure(figsize=(8, 6))
        plt.pie(metrics.values(), labels=metrics.keys(), autopct='%1.1f%%', startangle=140)
        plt.title(f"API Performance Breakdown: {api_name}", fontsize=14)
        plt.axis('equal')
        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"❌ Pie chart generation failed: {e}")

# Prepare data for OpenAI
results_str = "\n".join(
    [", ".join(f"{col}: {val}" for col, val in zip(df.columns, row)) for row in df.values]
)

# Prompt for OpenAI
prompt = (
    f"You are a data analyst reviewing API performance logs.\n"
    f"The API being analyzed is named **{api_name}**, and the timeframe is **last {time_interval}**.\n"
    f"The data includes:\n"
    "- timestamp: When the request was logged.\n"
    "- response time (in ms): Duration for request processing.\n"
    "- error rate (in %): Error percentage during request.\n"
    "- request volume: Number of requests per entry.\n\n"
    "Please provide:\n"
    "1. A summary of how the API performed.\n"
    "2. Any slowdowns, spikes in error rates, or patterns.\n"
    "3. Likely causes and improvement tips.\n"
    "4. Use simple, non-technical language for broad understanding.\n"
)

# Generate OpenAI summary
try:
    response = openai.ChatCompletion.create(
        deployment_id="Fourth_Chatbot",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": results_str}
        ],
        max_tokens=900,
        temperature=0.5,
        top_p=0.9,
        frequency_penalty=0.1,
        presence_penalty=0.1
    )
    summary = response['choices'][0]['message']['content']
    print("\n📊 Performance Summary:\n", summary)

except Exception as e:
    print(f"❌ Error generating summary: {e}")
