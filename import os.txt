## from markupsafe import escape

from os import environ as env
from urllib.parse import quote_plus, urlencode
import http.client
import json

from flask import Flask, redirect, render_template, session, request, url_for
from flask_session import Session

import sys
sys.path.append('/home/ec2-user/newUpdatedFlaskApp06082025/py_space/src/')
import common_stuff as c
from common_stuff import LogLevel
import chroma_db_util as cdu

import constants_ui as cui
import java_src_util as jsu

import argparse

# NEW: LangChain Azure client
from langchain_openai import AzureChatOpenAI  

import Azure_OpenAI_handler as openaih

# control what gets logged
LOCAL_LOG_LEVEL = c.GLOBAL_LOG_LEVEL
LOCAL_LOG_LEVEL = LogLevel.DEBUG

# setup flask and session
app = Flask(__name__)
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)


def getSessionObjectForCurrentUser():
    return session._get_current_object()


def get_openai_client(config):
    return AzureChatOpenAI(
        deployment_name=config["deployment_name"],
        openai_api_base=config["endpoint"],
        openai_api_key=config["api_key"],
        openai_api_version=config["api_version"],
        temperature=0.3,
        # max_tokens=4096
    )


@app.route("/")
def index():
    current_session = getSessionObjectForCurrentUser()
    if not current_session.get(cui.NAME):
        return redirect("/login")
    return render_template('select.html')


@app.route("/input", methods=["POST", "GET"])
def input():
    current_session = getSessionObjectForCurrentUser()
    if not current_session.get(cui.NAME):
        return redirect("/login")
    if request.method == "GET":
        return render_template('select.html')
    codeCatFrom = request.form["code_cat_from"]
    if(codeCatFrom == c.CodeCategory.MULE_4_DW.value):
        codeCatTo = "Java"
    codeCatTo = request.form["code_cat_to"]
    current_session[cui.CODE_CAT_FROM] = codeCatFrom
    current_session[cui.CODE_CAT_TO] = codeCatTo
    session["usr_req_prompt"] = c.getDefaultPromptHint(codeCatFrom, codeCatTo)
    return render_template('index.html')


def setJavaJarLocation(current_session) -> str:
    jar_dir = current_session.get(cui.JAR_DIR)
    jar_dir = c.getJarLocation(jar_dir)
    current_session[cui.JAR_DIR] = jar_dir


@app.route("/login", methods=["POST", "GET"])
def login(): 
    if request.method == "POST":
        u_name = request.form.get("name")
        if (LogLevel.shouldLog(LogLevel.DEBUG, LOCAL_LOG_LEVEL)):
            print(f"User just logged in; {u_name}")
        if (u_name and len(u_name.strip()) > 0):
            current_session = getSessionObjectForCurrentUser()
            current_session[cui.NAME] = u_name
            current_session[cui.IS_DEV] = True
            #we are going to change all to admin
            current_session[cui.IS_ADMIN] = True
            session["code_cat_from"] = "mule4_dw"
            session["code_cat_to"] = "Java"
            setJavaJarLocation(current_session)
            return redirect("/")
    return render_template("login.html")


@app.route("/logout")
def logout():
    current_session = getSessionObjectForCurrentUser()
    u_name = current_session.get(cui.NAME, 'Guest')
    if (LogLevel.shouldLog(LogLevel.DEBUG, LOCAL_LOG_LEVEL)):
        print(f"User just logged out; {u_name}")
    current_session[cui.NAME] = None
    return redirect("/")


@app.route("/java", methods=["POST", "GET"])
def java():
    current_session = getSessionObjectForCurrentUser()
    if not current_session.get("name"):
        return redirect("/login")
    valid_loc = True
    if request.method == "POST":
        # retrieve the directory
        jar_dir = request.form["v_jar_dir"]
        # if valid location
        if jsu.verify_file_loc(jar_dir):
            if (LogLevel.shouldLog(LogLevel.DEBUG, LOCAL_LOG_LEVEL)):
                print(f"Java load dir loaded: {jar_dir}")
            # store in the session
            current_session[cui.JAR_DIR] = jar_dir
            jsu.initUserContent(current_session[cui.NAME], jar_dir)
            return render_template('index.html')
        else:
            valid_loc = False
    return render_template('java.html', valid_loc=valid_loc)


@app.route("/manual", methods=["POST", "GET"])
def manual():
    current_session = getSessionObjectForCurrentUser()
    if not current_session.get("name"):
        return redirect("/login")
    doc_id = None
    input_sample = ""
    output_sample = ""
    if request.method == "POST":
        input_sample = request.form["v_input"]
        output_sample = request.form["v_output"]
        codeCatFrom = request.form["code_cat_from"]
        codeCatTo = request.form["code_cat_to"]
        sample_source = request.form["v_source"]
        current_session[cui.SAMPLE_SOURCE] = sample_source
        if (LogLevel.shouldLog(LogLevel.DEBUG, LOCAL_LOG_LEVEL)):
            print(input_sample)
            print(output_sample)
            print(sample_source)
        doc_id = cdu.addInputOutputExample(
            input_sample=input_sample,
            output_sample=output_sample,
            sample_source=sample_source,
            codeCatFrom=codeCatFrom,
            codeCatTo=codeCatTo,
            user_id=current_session.get("name")
        )

    return render_template("manual.html", manual=True,
                           doc_id=doc_id,
                           input_sample=input_sample,
                           output_sample=output_sample)


@app.route("/search_results", methods=["POST", "GET"])
def searchResults():
    current_session = getSessionObjectForCurrentUser()
    if not current_session.get("name"):
        return redirect("/login")
    return render_template('search_results.html')


@app.route("/sendtoGPT", methods=["POST"])
def sendtoGPT():
    current_session = getSessionObjectForCurrentUser()
    u_name = current_session[cui.NAME]
    if not current_session.get("name"):
        return redirect("/login")
    v_ids = request.form["v_ids"].strip()
    v_gpt = "v_gpt" in request.form
    if (LogLevel.shouldLog(LogLevel.DEBUG, LOCAL_LOG_LEVEL)):
        print(f"Requested doc ids: {v_ids}")
        print(f"Requested GPT: {v_gpt}")
    doc_id_list = c.convert_string(v_ids)
    if (LogLevel.shouldLog(LogLevel.DEBUG, LOCAL_LOG_LEVEL)):
        print(f"Requested doc ids to send to GPT: {doc_id_list}")
    input_request=current_session[cui.IN_DW]
    prompt_hint=current_session[cui.USR_REQ_PROMPT]
    codeCatFrom=current_session[cui.CODE_CAT_FROM]
    codeCatTo=current_session[cui.CODE_CAT_TO]
    java_prompt_jar = jsu.getJavaPromptJar(u_name)
    java_prompt_prj = jsu.getJavaPromptPrj(u_name)
    if not prompt_hint:
        prompt_hint = c.getDefaultPromptHint(codeCatFrom, codeCatTo)
    if v_gpt:
        gpt_results = cdu.getGPTResponse(input_request=input_request,
                                        doc_id_list=doc_id_list,
                                        prompt_hint=prompt_hint,
                                        codeCatFrom=codeCatFrom,
                                        codeCatTo=codeCatTo,
                                        java_prompt_jar=java_prompt_jar,
                                        java_prompt_prj=java_prompt_prj)
        display_result = gpt_results.choices[0].message.content

        return render_template("manual.html", manual=False,
                            doc_id="",
                            doc_id_list=doc_id_list,
                            input_sample=current_session[cui.IN_DW],
                            output_sample=display_result)
    net_prompt = cdu.getNetPrompt(input_request=input_request,
                                doc_id_list=doc_id_list,
                                prompt_hint=prompt_hint,
                                codeCatFrom=codeCatFrom,
                                codeCatTo=codeCatTo,
                                java_prompt_jar=java_prompt_jar,
                                java_prompt_prj=java_prompt_prj)
    print(net_prompt)
    return render_template('net_prompt.html', net_prompt=net_prompt)


@app.route("/AzureChatgptModel", methods=["POST"])
def AzureChatgptModel():
    current_session = getSessionObjectForCurrentUser()
    if not current_session.get("name"):
        return redirect("/login")
    v_ids = request.form["v_ids"].strip()
    v_azuregpt = "v_azuregpt" in request.form
    doc_id_list = c.convert_string(v_ids)
    embedding = request.form.get("embedding", "")
    if LogLevel.shouldLog(LogLevel.DEBUG, LOCAL_LOG_LEVEL):
        print(f"Requested doc ids to send to Azure ChatGPT: {doc_id_list}")
        print(f"Requested GPT: {v_azuregpt}")
    dwl_content = current_session[cui.IN_DW]
  
    prompt = openaih.getGPTPreferredPrompt(
        prompt_hint=current_session[cui.USR_REQ_PROMPT],
        codeCatFrom=current_session[cui.CODE_CAT_FROM],
        codeCatTo=current_session[cui.CODE_CAT_TO]
    )

    # ✅ Initialize new AzureChatOpenAI client
    config = {
        "deployment_name": "gpt-4.1-conversion",
        "endpoint": "https://testopenaiassets.openai.azure.com/",
        "api_key": "",   # TODO: add your key
        "api_version": "2024-08-01-preview"
    }
    client = get_openai_client(config)

    # ✅ Call AzureChatOpenAI with messages (roles not required explicitly)
    gpt_results = client.invoke([
        ("system", prompt),
        ("user", dwl_content)
    ])

    display_result = gpt_results.content

    return render_template("manual.html",
        manual=False,
        doc_id="",
        doc_id_list=doc_id_list,
        input_sample=dwl_content,
        output_sample=display_result,
        prompt=current_session[cui.USR_REQ_PROMPT]
    )


@app.route("/prompt", methods=["POST", "GET"])
def prompt():
    current_session = getSessionObjectForCurrentUser()
    codeCatFrom = current_session[cui.CODE_CAT_FROM]
    codeCatTo = current_session[cui.CODE_CAT_TO]
    u_name = current_session[cui.NAME]
    jar_dir = ""
    prj_dir = ""
    java_hints_jar = ""
    java_hints_prj = ""
    is_java = True if codeCatTo == "Java" or codeCatTo == "JUnit" else False
    if is_java:
        jar_dir = c.getJarLocation(current_session[cui.JAR_DIR])
    if request.method == "POST":
        dw = request.form["v_dw"]
        prmpt = request.form["v_prompt"]
        nbr = request.form["nbr_smpl_req"]
        if is_java:
            prj_dir = request.form["v_prj_dir"]
            java_hints_jar = request.form["v_java_jar"]
            java_hints_prj = request.form["v_java_prj"]
        jsu.updateUserContent(u_name, jar_dir, java_hints_jar, prj_dir, java_hints_prj)
        current_session[cui.IN_DW] = dw
        current_session[cui.USR_REQ_PROMPT] = prmpt
        current_session[cui.NBR_OF_SAMPLES_REQ] = nbr
        if is_java:
            current_session[cui.PRJ_DIR] = prj_dir
            current_session[cui.JAVA_HINTS_JAR] = java_hints_jar
            current_session[cui.JAVA_HINTS_PRJ] = java_hints_prj
    else:
        current_session = getSessionObjectForCurrentUser()
        dw = current_session[cui.IN_DW]
        prmpt = current_session[cui.USR_REQ_PROMPT]
        nbr = current_session[cui.NBR_OF_SAMPLES_REQ]
        if is_java:
            prj_dir = current_session[cui.PRJ_DIR]
            java_hints_jar = current_session[cui.JAVA_HINTS_JAR]
            java_hints_prj = current_session[cui.JAVA_HINTS_PRJ]
        
    if (LogLevel.shouldLog(LogLevel.DEBUG, LOCAL_LOG_LEVEL)):
        print(dw)
        print(prmpt)
        print(nbr)
        print(codeCatFrom)
        print(codeCatTo)
    if (dw and len(dw.strip()) > 0  and dw != "None"):
        print("DW not empty!")
        results = cdu.searchSimilarExamplesForInputReq(
            input=dw,
            codeCatFrom=codeCatFrom,
            codeCatTo=codeCatTo
        )
        results_len = len(results["ids"][0])
        if (LogLevel.shouldLog(LogLevel.DEBUG, LOCAL_LOG_LEVEL)):
            print(f"Number of serach results returned: {results_len}")
        jsu.updateUserContent(u_name, jar_dir, java_hints_jar, prj_dir, java_hints_prj)
        return render_template(
            "search_results.html",
            results_len=results_len,
            ids=results["ids"][0],
            metadata=results["metadatas"][0],
            distances=results["distances"][0],
            documents=results["documents"][0],
            yhats=results["yhats"][0],
            idstring=c.convert_to_string(results["ids"][0]),
            java_prompt_jar = jsu.getJavaPromptJar(u_name) if is_java else "",
            java_prompt_prj = jsu.getJavaPromptPrj(u_name) if is_java else ""
        )
    else:
        return render_template(
            "search_results.html",
            results_len=0,
            java_prompt_jar = jsu.getJavaPromptJar(u_name) if is_java else "",
            java_prompt_prj = jsu.getJavaPromptPrj(u_name) if is_java else ""
        )

    return redirect("/")


@app.route('/about/')
def about():
    return '<h3>This is a CHatGPT DW-to-Java web application.</h3>'


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run Flask app with configurable port")
    parser.add_argument("--port", type=int, default=5000, help="Port number to run the Flask app on")
    args = parser.parse_args()
    cdu.initClient()
    app.run(host='0.0.0.0', port=args.port)
