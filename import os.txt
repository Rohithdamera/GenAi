def lambda_handler(event, context):
    logging.info(f"Received event: {json.dumps(event)}")

    # Handle CORS Preflight Request
    if event.get("httpMethod") == "OPTIONS":
        return {
            "statusCode": 200,
            "headers": cors_headers,
            "body": json.dumps({"message": "CORS preflight"})
        }

    try:
        # Parse and validate request body
        body_str = event.get("body")
        if not body_str:
            logging.error("Missing request body.")
            return {
                "statusCode": 400,
                "headers": cors_headers,
                "body": json.dumps({"error": "Missing request body."})
            }

        try:
            body = json.loads(body_str)
        except Exception as parse_error:
            logging.error(f"JSON parsing failed: {parse_error}")
            return {
                "statusCode": 400,
                "headers": cors_headers,
                "body": json.dumps({"error": "Invalid JSON in request body."})
            }

        query = body.get("query")
        session_id = body.get("session_id")

        if not query:
            logging.error("Missing 'query' parameter.")
            return {
                "statusCode": 400,
                "headers": cors_headers,
                "body": json.dumps({"error": "Missing 'query' in request body."})
            }

        if not session_id:
            session_id = create_session()

        cleanup_expired_sessions()

        # Handle chat history requests
        if "chat history" in query.lower():
            history = get_history(session_id)
            return {
                "statusCode": 200,
                "headers": cors_headers,
                "body": json.dumps({
                    "session_id": session_id,
                    "history": history
                })
            }

        # Build agent and process the query
        agent = build_agent()
        result = agent.invoke({"input": query})
        final_output = result.get("output", "")

        add_message(session_id, "user", query)
        add_message(session_id, "assistant", final_output)

        return {
            "statusCode": 200,
            "headers": cors_headers,
            "body": json.dumps({
                "session_id": session_id,
                "answer": render_output_as_table(final_output)
            })
        }

    except Exception as e:
        logging.error(f"Unhandled Exception: {str(e)}")
        return {
            "statusCode": 500,
            "headers": cors_headers,
            "body": json.dumps({"error": str(e)})
        }
