import os
import shutil
import zipfile
import json
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES

# ========== Logging ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== Decryption ==========
def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Error during decryption: {e}")
        raise ValueError(f"Error during decryption: {e}")

# ========== Random Data Generation ==========
def random_datetime():
    return f"{random.randint(1,28):02}/{random.randint(1,12):02}/2025 {random.randint(0,23):02}:{random.randint(0,59):02}:{random.randint(0,59):02}"

def random_uuid():
    sections = [8, 4, 4, 4, 12]
    return '-'.join(''.join(random.choices(string.hexdigits.lower(), k=s)) for s in sections)

def random_string_like(value):
    if isinstance(value, str):
        if any(sep in value for sep in ['/', '-', ':']):
            return random_datetime()
        elif len(value) in [32, 36]:
            return random_uuid()
        elif value.isdigit():
            return ''.join(random.choices(string.digits, k=len(value)))
        else:
            return ''.join(random.choices(string.ascii_letters + string.digits, k=len(value)))
    return value

def generate_random_value_by_sample(sample_value):
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif isinstance(sample_value, str):
        return random_string_like(sample_value)
    elif isinstance(sample_value, list):
        return [generate_random_structure(item) for item in sample_value]
    elif isinstance(sample_value, dict):
        return generate_random_structure(sample_value)
    return sample_value

def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(template[0]) if template else []]
    else:
        return generate_random_value_by_sample(template)

# ========== File Handling ==========
def unzip_raml(zip_bytes, extract_dir="/tmp/temp_raml"):
    if os.path.exists(extract_dir):
        shutil.rmtree(extract_dir)
    os.makedirs(extract_dir, exist_ok=True)

    zip_path = "/tmp/uploaded.zip"
    with open(zip_path, "wb") as f:
        f.write(zip_bytes)

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)

    return extract_dir

def find_main_raml_file(base_dir):
    for root, _, files in os.walk(base_dir):
        for file in files:
            if file.endswith(".raml"):
                full_path = os.path.join(root, file)
                with open(full_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    if "#%RAML 1.0" in content:
                        return full_path
    raise FileNotFoundError("Main RAML file not found.")

def extract_first_include_file_path(raml_file_path):
    with open(raml_file_path, 'r', encoding='utf-8', errors='ignore') as f:
        for line in f:
            if "!include" in line:
                parts = line.split("!include")
                if len(parts) == 2:
                    include_path = parts[1].strip()
                    return include_path
    raise ValueError("No !include reference found in RAML.")

def resolve_include_path(include_path, root_dir, current_dir):
    for base in [current_dir, root_dir, os.path.join(root_dir, 'examples', 'request')]:
        full_path = os.path.normpath(os.path.join(base, include_path))
        if os.path.isfile(full_path):
            return full_path
    for root, _, files in os.walk(root_dir):
        for f in files:
            if f == os.path.basename(include_path):
                return os.path.join(root, f)
    return None

def extract_json_structure_from_include(raml_file_path, root_dir):
    current_dir = os.path.dirname(raml_file_path)
    include_path = extract_first_include_file_path(raml_file_path)
    include_full_path = resolve_include_path(include_path, root_dir, current_dir)

    if not include_full_path or not os.path.exists(include_full_path):
        raise FileNotFoundError(f"Included file not found: {include_path}")

    with open(include_full_path, 'r', encoding='utf-8', errors='ignore') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            raise ValueError(f"Included file {include_path} is not a valid JSON.")

# ========== Lambda Entry ==========
def lambda_handler(event, context):
    logger.info("Lambda function invoked.")

    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("File content is missing or not base64-encoded.")

        zip_bytes = b64decode(event['body'])
        extracted_dir = unzip_raml(zip_bytes)

        main_raml_file = find_main_raml_file(extracted_dir)
        json_template = extract_json_structure_from_include(main_raml_file, extracted_dir)

        # Generate 2 variations
        payload = [
            generate_random_structure(json_template),
            generate_random_structure(json_template)
        ]

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(payload, indent=2)
        }

    except Exception as e:
        logger.error(f"Error during Lambda execution: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
