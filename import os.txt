import os
import json
import logging
from base64 import b64decode
from Crypto.Cipher import AES
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage

logging.basicConfig(level=logging.INFO)

def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    return unpad(decrypted_data).decode()

def get_openai_client(model_instance_name):
    try:
        aes_key_base64 = os.environ['AES_KEY']
        encrypted_api_base = os.environ['ENCRYPTED_API_BASE']
        encrypted_api_key = os.environ['ENCRYPTED_API_KEY']
        api_version = os.environ['AZURE_API_VERSION']

        decrypted_api_base = decrypt(encrypted_api_base, aes_key_base64)
        decrypted_api_key = decrypt(encrypted_api_key, aes_key_base64)

        if not decrypted_api_base.endswith('/'):
            decrypted_api_base += '/'

        return AzureChatOpenAI(
            deployment_name=model_instance_name,
            openai_api_base=decrypted_api_base,
            openai_api_key=decrypted_api_key,
            openai_api_version=api_version,
            temperature=0.0,
            max_tokens=4096,
            model_kwargs={"top_p": 0.95, "frequency_penalty": 0, "presence_penalty": 0}
        )
    except Exception as e:
        logging.error(f"Error initializing OpenAI client: {e}")
        raise ValueError(f"Error initializing OpenAI client: {e}")


def format_dwl(dwl_code: str) -> str:
    """Ensure DWL script is pretty and returned with newlines intact."""
    dwl_code = dwl_code.strip()
    if dwl_code.startswith("```"):
        dwl_code = dwl_code.strip("`").replace("DataWeave", "", 1).strip()
    return dwl_code


def generate_and_validate_script(client, file_content, agent_name):
    conversion_prompt = {
        "xslt_to_dwl": '''
You are a **MuleSoft DataWeave (DWL) script generator**.  
Your job: **convert the provided XSLT into an equivalent Dataweave script** that reproduces the same transformation.
'''.strip()
    }

    validateprompt = '''
You are a **MuleSoft DataWeave (DWL) script generator**.  
Your job: **remove the syntax errors found in the provided DataWeave (DWL) script and produce an error free DataWeave (DWL) script**

Return only corrected DWL script, wrapped in fenced ```DataWeave block.
'''.strip()

    # --------------------- GENERATE --------------------- #
    prompt = conversion_prompt.get(agent_name, "Convert the given input into structured script.")

    print("==================XSLT without escape characters===================")
    print(file_content)
    print("After Parsing")
    print("XSLT is valid and well-formed.")
    print("-----Start-Code-Generator--------")
    print("-------------------------------Generate Start State ----------------------------------------")

    xslt_state = {"xsltcode": [HumanMessage(content=file_content)], "is_valid": None}
    print(xslt_state)

    response = client.invoke([
        SystemMessage(content=prompt),
        HumanMessage(content=file_content)
    ])
    dwl_generated = response.content.strip()
    dwl_generated_pretty = format_dwl(dwl_generated)

    print("-------------------------------Generate End State ----------------------------------------")
    print("Generate DataWeave 2.0 script for the provided XSLT script\n")
    print(file_content)
    print("\n[generate_code]Content:\n", dwl_generated_pretty)

    # --------------------- VALIDATE --------------------- #
    print("-------------------------------Validate Start State ----------------------------------------")
    validation_state = {
        "xsltcode": [HumanMessage(content=file_content)],
        "dwlcode": dwl_generated_pretty,
        "dwl_accumulator": "",
        "is_valid": None,
        "retries": 0,
        "df": {"Iteration": [], "Status": [], "Error": [], "Input File": [file_content], "Output File": []}
    }
    print(validation_state)

    validation_response = client.invoke([
        SystemMessage(content=validateprompt),
        HumanMessage(content=f"[Input DataWeave Script]\n{dwl_generated_pretty}\n\n[Syntax Error Message]\n\"If errors exist, fix them. Else, return as-is.\"")
    ])
    dwl_validated = validation_response.content.strip()
    dwl_validated_pretty = format_dwl(dwl_validated)

    print("-------------------------------Validate End State ----------------------------------------")
    print({'isValid': True, 'errorMsg': '[]'})
    print("-----End-Valid--------")

    result = {
        "xsltcode": [HumanMessage(content=file_content)],
        "dwlcode": dwl_generated_pretty,
        "validation_result": "[]",
        "dwl_accumulator": (
            "<h1 style=\"display: inline-block;\">Iteration 1 - </h1>"
            "<h3 style=\"display: inline-block;color: green;\"> Success </h3>"
            "<h3>Dataweave Script</h3>Here is the generated dataweave script<br/>\n\n"
            f"```DataWeave\n{dwl_validated_pretty}\n```"
        ),
        "is_valid": True,
        "retries": 1,
        "df": {
            "Iteration": ["1"],
            "Status": ["Success"],
            "Error": ["[]"],
            "Input File": [file_content],
            "Output File": [dwl_validated_pretty]
        }
    }
    return result


def lambda_handler(event, context):
    try:
        if 'body' not in event or not event['body']:
            raise ValueError("Missing or empty request body.")

        headers = event.get('headers', {})
        model_instance_name = headers.get('model_instance_name', 'Default_Model')
        query_params = event.get('queryStringParameters', {})

        agent_name_param = query_params.get('Agent_name', '')
        agent_names = [name.strip() for name in agent_name_param.split(',') if name.strip()]
        if len(agent_names) != 1:
            raise ValueError("Exactly one Agent_name must be provided in query parameters.")
        agent_name = agent_names[0]

        if event.get('isBase64Encoded', False):
            file_content = b64decode(event['body']).decode('utf-8')
        else:
            file_content = event['body']

        client = get_openai_client(model_instance_name)
        processed_result = generate_and_validate_script(client, file_content, agent_name)

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            # Keep pretty formatting and newlines
            "body": json.dumps({"result": processed_result}, indent=2, ensure_ascii=False)
        }
    except Exception as e:
        logging.error(f"An error occurred: {e}")
        return {
            "statusCode": 400,
            "body": json.dumps({"error": str(e)}, indent=2, ensure_ascii=False)
        }