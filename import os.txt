import json
import logging
import random
import string
import os
import shutil
from urllib.parse import parse_qs
from io import BytesIO
from http import client as http_client

import cgi

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== Helpers for type detection and random generation ==========
def is_datetime_like(value):
    return isinstance(value, str) and any(sep in value for sep in ['/', '-', ':']) and sum(c.isdigit() for c in value) >= 6

def is_uuid_like(value):
    return isinstance(value, str) and len(value) in [36, 32] and value.count('-') == 4

def is_numeric_string(value):
    return isinstance(value, str) and value.isdigit()

def random_datetime():
    return f"{random.randint(1,28):02}/{random.randint(1,12):02}/2025 {random.randint(0,23):02}:{random.randint(0,59):02}:{random.randint(0,59):02}"

def random_uuid():
    sections = [8, 4, 4, 4, 12]
    return '-'.join(''.join(random.choices(string.hexdigits.lower(), k=s)) for s in sections)

def random_string_like(value):
    if is_datetime_like(value):
        return random_datetime()
    elif is_uuid_like(value):
        return random_uuid()
    elif is_numeric_string(value):
        return ''.join(random.choices(string.digits, k=len(value)))
    else:
        return ''.join(random.choices(string.ascii_letters + string.digits, k=len(value)))

def generate_random_value_by_sample(sample_value):
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif isinstance(sample_value, str):
        return random_string_like(sample_value)
    elif sample_value is None:
        return None
    else:
        return sample_value

def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(item) for item in template]
    else:
        return generate_random_value_by_sample(template)

def get_model_instance_name(headers):
    value = headers.get('model_instance_name')
    if value:
        return value
    return 'chatbot_' + ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))

def get_count(headers):
    try:
        return max(1, int(headers.get('count', '1')))
    except Exception:
        return 1

# ========== Lambda Handler ==========
def lambda_handler(event, context):
    logger.info("Lambda invoked with multi-part form")

    try:
        headers = {k.lower(): v for k, v in event.get('headers', {}).items()}
        content_type = headers.get('content-type')

        if not content_type or 'multipart/form-data' not in content_type:
            raise ValueError("Content-Type must be multipart/form-data")

        body_bytes = BytesIO(base64.b64decode(event['body']))
        environ = {
            'REQUEST_METHOD': 'POST',
            'CONTENT_TYPE': content_type,
            'CONTENT_LENGTH': str(len(body_bytes.getvalue()))
        }

        form = cgi.FieldStorage(fp=body_bytes, environ=environ, keep_blank_values=True)

        if 'file' not in form:
            raise ValueError("No 'file' part in the form-data")

        uploaded_file = form['file']
        raw_content = uploaded_file.file.read().decode('utf-8')

        json_start = raw_content.find('{')
        if json_start == -1:
            raise ValueError("Uploaded file does not contain valid JSON")

        json_data = json.loads(raw_content[json_start:])

        model_name = get_model_instance_name(headers)
        count = get_count(headers)

        generated = [generate_random_structure(json_data) for _ in range(count)]

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"datasets": generated})
        }

    except Exception as e:
        logger.error(f"Processing error: {e}")
        return {
            "statusCode": 500,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps({"error": str(e)})
        }
