import os
import json
import time
import uuid
import logging
import asyncio
import nest_asyncio
from base64 import b64decode
from Crypto.Cipher import AES
from langchain.agents import Tool, initialize_agent
from langchain.agents.agent_types import AgentType
from langchain_community.chat_models import AzureChatOpenAI
from mcp import ClientSession
from mcp.client.sse import sse_client

nest_asyncio.apply()
logging.basicConfig(level=logging.INFO)

# === Environment Decryption ===
def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    return unpad(decrypted_data).decode()

# === Azure Client Setup ===
def get_openai_client():
    try:
        aes_key_base64 = os.environ['AES_KEY']
        encrypted_api_base = os.environ['ENCRYPTED_API_BASE']
        encrypted_api_key = os.environ['ENCRYPTED_API_KEY']
        api_version = os.environ['AZURE_API_VERSION']
        deployment_name = os.environ['AZURE_DEPLOYMENT_NAME']

        decrypted_api_base = decrypt(encrypted_api_base, aes_key_base64)
        decrypted_api_key = decrypt(encrypted_api_key, aes_key_base64)

        if not decrypted_api_base.endswith('/'):
            decrypted_api_base += '/'

        return AzureChatOpenAI(
            deployment_name=deployment_name,
            openai_api_base=decrypted_api_base,
            openai_api_key=decrypted_api_key,
            openai_api_version=api_version,
            temperature=0.3,
            max_tokens=2000,
        )
    except Exception as e:
        logging.error(f"OpenAI client error: {e}")
        raise

# === Session Memory ===
chat_sessions = {}
SESSION_TTL = 30 * 60  # 30 mins

def create_session():
    cid = str(uuid.uuid4())
    chat_sessions[cid] = {"created_at": time.time(), "messages": []}
    return cid

def add_message(cid, role, content):
    if cid in chat_sessions:
        chat_sessions[cid]["messages"].append({"role": role, "content": content})

def get_history(cid):
    return chat_sessions.get(cid, {}).get("messages", [])

def cleanup_expired_sessions():
    now = time.time()
    expired = [cid for cid, s in chat_sessions.items() if now - s["created_at"] > SESSION_TTL]
    for cid in expired:
        del chat_sessions[cid]

# === SSE Tools ===
sse_url = os.environ.get("SSE_URL")

def sync_call_tool(tool_name: str, params: dict):
    async def call():
        async with sse_client(url=sse_url) as streams:
            async with ClientSession(*streams) as session:
                await session.initialize()
                return await session.call_tool(tool_name, params)
    return asyncio.get_event_loop().run_until_complete(call())

def fetch_all_tools():
    async def fetch():
        async with sse_client(url=sse_url) as streams:
            async with ClientSession(*streams) as session:
                await session.initialize()
                return await session.list_tools()
    return asyncio.get_event_loop().run_until_complete(fetch())

def get_tools():
    raw = fetch_all_tools()
    tools = []
    for t in getattr(raw, "tools", []):
        name = t.name
        required_fields = t.inputSchema.get("required", []) if t.inputSchema else []

        def make_func(tool_name=name, req=required_fields):
            def fn(input_str: str) -> str:
                try:
                    parsed = json.loads(input_str) if input_str else {}
                except:
                    parsed = {}
                for key in req:
                    parsed.setdefault(key, "")
                try:
                    result = sync_call_tool(tool_name, parsed)
                    return json.dumps(result, indent=2, default=str)
                except Exception as e:
                    return f"[ERROR] {tool_name}: {str(e)}"
            return fn

        tools.append(
            Tool(
                name=name,
                func=make_func(),
                description=f"{t.description or ''} Required fields: {required_fields}",
                return_direct=False,
            )
        )
    return tools

# === Output Formatter ===
def render_output_as_table(output_text: str):
    try:
        data = json.loads(output_text)
        if isinstance(data, dict):
            return "\n".join(f"{k}: {v}" for k, v in data.items())
        elif isinstance(data, list) and all(isinstance(item, dict) for item in data):
            keys = data[0].keys()
            lines = [" | ".join(keys)]
            for row in data:
                lines.append(" | ".join(str(row.get(k, "")) for k in keys))
            return "\n".join(lines)
        else:
            return str(data)
    except Exception:
        return output_text

# === Prompt ===
CUSTOM_PREFIX = """
You are an intelligent support agent with access to multiple tools containing employee, project, and organizational data.

Your responsibilities:

- Always check all tools for relevant data before concluding that something is not found.
- If a tool returns partial information (like employee ID), use that to search in other tools.
- If names are misspelled or abbreviated (e.g., HYD for Hyderabad, benguluru for Bangalore), still attempt to resolve them using available data across all tools.
- Present the final answer in a table format only, with no emojis or markdown.
- Always attempt a multi-hop reasoning process until an accurate and complete answer is found.
- Never stop after a single failed attempt unless all tools are tried.
"""

# === Agent Builder ===
def build_agent():
    tools = get_tools()
    llm = get_openai_client()
    return initialize_agent(
        tools=tools,
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        verbose=True,
        max_iterations=10,
        handle_parsing_errors=True,
        agent_kwargs={"prefix": CUSTOM_PREFIX}
    )

# === Lambda Handler ===
def lambda_handler(event, context):
    try:
        # Handle CORS Preflight
        if event.get("httpMethod") == "OPTIONS":
            return {
                "statusCode": 200,
                "headers": {
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Headers": "Content-Type",
                    "Access-Control-Allow-Methods": "OPTIONS, POST"
                },
                "body": json.dumps({"message": "CORS preflight successful"})
            }

        # Parse Body
        body = event.get("body")
        if body is None:
            raise ValueError("Missing request body.")

        if isinstance(body, str):
            body = json.loads(body)

        query = body.get("query", "")
        session_id = body.get("session_id")

        if not session_id:
            session_id = create_session()

        cleanup_expired_sessions()

        if "chat history" in query.lower():
            history = get_history(session_id)
            response_body = {
                "session_id": session_id,
                "history": history
            }
        else:
            agent = build_agent()
            result = agent.invoke({"input": query})
            final_output = result["output"]

            add_message(session_id, "user", query)
            add_message(session_id, "assistant", final_output)

            response_body = {
                "session_id": session_id,
                "answer": render_output_as_table(final_output)
            }

        return {
            "statusCode": 200,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "OPTIONS, POST"
            },
            "body": json.dumps(response_body)
        }

    except Exception as e:
        logging.error(f"Exception: {str(e)}")
        return {
            "statusCode": 500,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Headers": "Content-Type",
                "Access-Control-Allow-Methods": "OPTIONS, POST"
            },
            "body": json.dumps({"error": str(e)})
        }




You said:





i had a aws lambda in it uses python langchain code , so the code will do , it will try to connect with mcp server through url and get get the data based on query ,  using lambda (Rest api ) url  i will test in post man the query mentioned in  body of postman ,  it will return data according to query,  so now i made  front end react using ui box i have entered my question , but i am getting this error(Access to XMLHttpRequest at 'https://x6npy9z8v5.execute-api.us-east-1.amazonaws.com/prod/mcp' from origin ' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.)
