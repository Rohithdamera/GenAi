import requests
import time
import re
import json

SSE_URL = "https://vendorstool-app-6b0n96.dw4w1g-1.gbr-e1.cloudhub.io/sse"
BASE_MESSAGE_URL = "https://vendorstool-app-6b1n96.dw4w1g-1.gbr-e1.cloudhub.io/message"

headers = {
    "Content-Type": "application/json"
}

payload = {
    "method": "tools/call",
    "params": {
        "name": "get-vendors",
        "arguments": {}
    }
}

def get_session_id(prompt, timeout=300):
    print(prompt)
    try:
        with requests.get(SSE_URL, stream=True, timeout=timeout) as response:
            if response.status_code == 200:
                for line in response.iter_lines():
                    if line:
                        decoded = line.decode("utf-8")
                        print("📡 SSE:", decoded)
                        match = re.search(r'data: /message\?sessionId=([a-f0-9\-]+)', decoded)
                        if match:
                            session_id = match.group(1)
                            print("✅ Session ID found:", session_id)
                            return session_id
            else:
                print("❌ Could not connect to SSE. Status:", response.status_code)
    except Exception as e:
        print("❌ SSE connection error:", e)
    return None

def send_post(session_id, label):
    url = f"{BASE_MESSAGE_URL}?sessionId={session_id}"
    try:
        print(f"📤 Sending {label} POST to server...")
        response = requests.post(url, headers=headers, json=payload, timeout=60)
        print(f"✅ {label} POST Status: {response.status_code}")
        print(f"📨 {label} Response: {response.text}")
        return response.status_code == 200 or response.status_code == 202
    except Exception as e:
        print(f"❌ {label} POST failed:", e)
    return False

def listen_for_final_data(timeout=180):
    print("👂 Listening for final vendor data...")
    try:
        with requests.get(SSE_URL, stream=True, timeout=timeout) as response:
            if response.status_code == 200:
                for line in response.iter_lines():
                    if line:
                        decoded = line.decode("utf-8")
                        print("📦 SSE:", decoded)

                        data_match = re.search(r'data: (.+)', decoded)
                        if data_match:
                            raw = data_match.group(1)
                            try:
                                data_json = json.loads(raw)
                                print("✅✅ Final Vendor Data Received:")
                                print(json.dumps(data_json, indent=2))
                                return True
                            except json.JSONDecodeError:
                                continue
            else:
                print("❌ SSE reconnect failed. Status:", response.status_code)
    except Exception as e:
        print("❌ Exception while listening for final data:", e)
    return False

if __name__ == "__main__":
    print("🚀 Connecting to MCP server...")

    # Step 1: Initial Session ID
    initial_session_id = get_session_id("🔌 Waiting for initial session ID...")
    if initial_session_id:
        print("✅ Server is connected.")

        # Step 2: Initial POST
        if send_post(initial_session_id, label="Initial"):
            print("⏳ Waiting 120 seconds for server to initialize...")
            time.sleep(120)

            # Step 3: Second Session ID for run trigger
            run_session_id = get_session_id("🎯 Waiting for run session ID...")
            if run_session_id and send_post(run_session_id, label="Run"):
                print("⏳ Waiting 5 seconds before final session ID...")
                time.sleep(5)

                # Step 4: Final session ID
                final_session_id = get_session_id("🧾 Waiting for final data session ID...")
                if final_session_id and send_post(final_session_id, label="Final"):
                    print("⏳ Waiting 5 seconds before listening for final data...")
                    time.sleep(5)

                    # Step 5: Final data
                    if not listen_for_final_data():
                        print("❌ Final vendor data not received.")
                else:
                    print("❌ Final session ID or POST failed.")
            else:
                print("❌ Run session ID or POST failed.")
        else:
            print("❌ Initial POST failed. Server rejected the request.")
    else:
        print("❌ No initial session ID received. Server not connected.")
