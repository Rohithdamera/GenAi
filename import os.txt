import os
import shutil
import zipfile
import json
import logging
import random
import string
from base64 import b64decode
from Crypto.Cipher import AES

# Logger setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def decrypt(data, key):
    try:
        cipher = AES.new(b64decode(key), AES.MODE_ECB)
        decrypted_data = cipher.decrypt(b64decode(data))
        decrypted_data = unpad(decrypted_data)
        return decrypted_data.decode()
    except Exception as e:
        logger.error(f"Decryption error: {e}")
        raise

def unzip_raml(zip_bytes, extract_dir="/tmp/temp_raml"):
    if os.path.exists(extract_dir):
        shutil.rmtree(extract_dir)
    os.makedirs(extract_dir, exist_ok=True)

    zip_path = "/tmp/uploaded.zip"
    with open(zip_path, "wb") as f:
        f.write(zip_bytes)

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)

    return extract_dir

def find_all_raml_files(base_dir):
    raml_files = []
    for root, _, files in os.walk(base_dir):
        for file in files:
            if file.endswith(".raml") or file.endswith(".rml"):
                raml_files.append(os.path.join(root, file))
    return raml_files

def resolve_include_path(include_path, root_dir, current_dir):
    candidates = [
        os.path.join(current_dir, include_path),
        os.path.join(root_dir, include_path),
        os.path.join(root_dir, 'examples', 'request', include_path),
    ]
    for path in candidates:
        norm = os.path.normpath(path)
        if os.path.isfile(norm):
            return norm

    for root, _, files in os.walk(root_dir):
        for file in files:
            if file == os.path.basename(include_path):
                return os.path.join(root, file)
    return None

def resolve_includes_in_raml(file_path, root_dir):
    resolved_lines = []
    current_dir = os.path.dirname(file_path)

    with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
        for line in file:
            if "!include" in line:
                parts = line.strip().split("!include")
                prefix = parts[0].strip()
                include_path = parts[1].strip()
                include_file = resolve_include_path(include_path, root_dir, current_dir)

                if include_file and os.path.exists(include_file):
                    with open(include_file, 'r', encoding='utf-8', errors='ignore') as inc_file:
                        resolved_lines.append(f"{prefix} |\n")
                        for inc_line in inc_file.read().splitlines():
                            resolved_lines.append(f"  {inc_line}")
                else:
                    resolved_lines.append(f"{line.strip()}  # Include not found")
            else:
                resolved_lines.append(line.rstrip())

    return "\n".join(resolved_lines)

def extract_post_endpoints_with_examples(raml_content):
    endpoints = {}
    lines = raml_content.splitlines()
    path, method, example_json = None, None, None

    for i, line in enumerate(lines):
        stripped = line.strip()
        if stripped.startswith('/') and not stripped.startswith('/ '):
            path = stripped
        elif 'post:' in stripped.lower():
            method = "post"
        elif method == "post" and 'example:' in stripped:
            if '|' in stripped:
                example_json = []
                for j in range(i + 1, len(lines)):
                    if lines[j].startswith("  "):
                        example_json.append(lines[j].strip())
                    else:
                        break
                try:
                    example_dict = json.loads('\n'.join(example_json))
                    if path:
                        endpoints[path] = example_dict
                except Exception as e:
                    logger.warning(f"Invalid JSON under example for {path}: {e}")
            method = None
    return endpoints

def lambda_handler(event, context):
    logger.info("Lambda invoked for POST payload extraction")

    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("Missing or non-base64 body")

        zip_bytes = b64decode(event['body'])
        extracted_dir = unzip_raml(zip_bytes)
        raml_files = find_all_raml_files(extracted_dir)

        all_payloads = {}
        for raml_path in raml_files:
            try:
                content = resolve_includes_in_raml(raml_path, extracted_dir)
                post_payloads = extract_post_endpoints_with_examples(content)
                all_payloads.update(post_payloads)
            except Exception as e:
                logger.warning(f"Skipping {raml_path}: {e}")

        if not all_payloads:
            raise ValueError("No valid POST payloads found")

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(all_payloads, indent=2)
        }

    except Exception as e:
        logger.error(f"Unhandled exception: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
