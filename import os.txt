import os
import shutil
import zipfile
import json
import logging
import random
import string
from base64 import b64decode

# Setup logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== Utilities for Random Test Data ==========

def random_datetime():
    return f"{random.randint(1,28):02}/{random.randint(1,12):02}/2025 {random.randint(0,23):02}:{random.randint(0,59):02}:{random.randint(0,59):02}"

def random_uuid():
    sections = [8, 4, 4, 4, 12]
    return '-'.join(''.join(random.choices(string.hexdigits.lower(), k=s)) for s in sections)

def random_string_like(value):
    if isinstance(value, str):
        if any(sep in value for sep in ['/', '-', ':']):
            return random_datetime()
        elif len(value) in [32, 36]:
            return random_uuid()
        elif value.isdigit():
            return ''.join(random.choices(string.digits, k=len(value)))
        else:
            return ''.join(random.choices(string.ascii_letters + string.digits, k=len(value)))
    return value

def generate_random_value_by_sample(sample_value):
    if isinstance(sample_value, int):
        return random.randint(1000, 9999)
    elif isinstance(sample_value, float):
        return round(random.uniform(1.0, 10000.0), 2)
    elif isinstance(sample_value, bool):
        return random.choice([True, False])
    elif isinstance(sample_value, str):
        return random_string_like(sample_value)
    elif sample_value is None:
        return None
    return sample_value

def generate_random_structure(template):
    if isinstance(template, dict):
        return {k: generate_random_structure(v) for k, v in template.items()}
    elif isinstance(template, list):
        return [generate_random_structure(item) for item in template]
    else:
        return generate_random_value_by_sample(template)

# ========== RAML Extraction and Detection ==========

def unzip_to_temp(zip_bytes, extract_dir="/tmp/temp_raml"):
    if os.path.exists(extract_dir):
        shutil.rmtree(extract_dir)
    os.makedirs(extract_dir, exist_ok=True)

    zip_path = "/tmp/uploaded.zip"
    with open(zip_path, "wb") as f:
        f.write(zip_bytes)

    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)

    return extract_dir

def find_json_raml_file(base_dir):
    for root, _, files in os.walk(base_dir):
        for file in files:
            if file.endswith(".raml"):
                full_path = os.path.join(root, file)
                try:
                    with open(full_path, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read().strip()
                        # Only accept if it's valid JSON and not mixed RAML/YAML
                        json_obj = json.loads(content)
                        return json_obj  # Return parsed JSON
                except Exception:
                    continue
    raise FileNotFoundError("No valid RAML file with example JSON found.")

# ========== Lambda Handler ==========

def lambda_handler(event, context):
    logger.info("Lambda function invoked.")
    try:
        if 'body' not in event or not event.get('isBase64Encoded', False):
            raise ValueError("File content is missing or not base64-encoded.")

        # Step 1: Decode and unzip
        zip_bytes = b64decode(event['body'])
        extracted_dir = unzip_to_temp(zip_bytes)

        # Step 2: Find the correct .raml file with pure JSON
        template_json = find_json_raml_file(extracted_dir)

        # Step 3: Generate random test data using the template
        generated_output = generate_random_structure(template_json)

        # Step 4: Return clean JSON response
        return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(generated_output, indent=2)
        }

    except Exception as e:
        logger.error(f"Error during Lambda execution: {e}")
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
