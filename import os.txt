import asyncio
import json
import nest_asyncio
from typing import List
from langchain.agents import initialize_agent, AgentType
from langchain.chat_models import AzureChatOpenAI
from langchain.tools import Tool
from mcp import ClientSession
from mcp.client.sse import sse_client

nest_asyncio.apply()

# === Azure OpenAI Client ===
def get_openai_client():
    return AzureChatOpenAI(
        azure_deployment="Fourth_Chatbot",
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        openai_api_version="2024-08-01-preview",
        openai_api_key="YOUR_API_KEY_HERE",
        temperature=0.3,
        max_tokens=1500,
    )

# === SSE URL ===
sse_url = "https://employee-mcp-v1-6b0n96.dw4w1g-2.gbr-e1.cloudhub.io/sse"

# === Fetch Tool Names ===
async def fetch_tool_names(session: ClientSession) -> List[str]:
    info = await session.list_tools()
    return [t.name for t in getattr(info, "tools", [])]

# === Tool Wrappers ===
def make_tools(session: ClientSession, tool_names: List[str]) -> List[Tool]:
    tools = []

    for name in tool_names:
        async def _tool_func(query: str, tool_name=name):
            try:
                input_data = json.loads(query) if query else {}
                result = await session.call_tool(tool_name, input_data)
                return str(result)
            except Exception as e:
                return f"[ERROR] Tool {tool_name} failed: {e}"

        tools.append(
            Tool(
                name=name,
                func=lambda query, tool_name=name: asyncio.run(_tool_func(query, tool_name)),
                description=f"MCP Tool: {name}. Accepts JSON input."
            )
        )

    return tools

# === Main Async Logic ===
async def main():
    print("\nüöÄ MCP Reactive Agent Interface (Azure OpenAI + MCP Tools)")

    async with sse_client(url=sse_url) as streams:
        async with ClientSession(*streams) as session:
            await session.initialize()

            # Fetch tools
            tool_names = await fetch_tool_names(session)
            print(f"‚öôÔ∏è Available MCP tools: {tool_names}")

            # Build LangChain-compatible tool list
            tools = make_tools(session, tool_names)

            # Initialize agent with tools
            agent = initialize_agent(
                tools=tools,
                llm=get_openai_client(),
                agent=AgentType.OPENAI_FUNCTIONS,
                verbose=True,
                handle_parsing_errors=True
            )

            # REPL Loop
            while True:
                user_input = input("\nüß† Ask your question: ").strip()
                if user_input.lower() in ("exit", "quit"):
                    print("üëã Goodbye!")
                    break

                try:
                    response = agent.run(user_input)
                    print(f"\nüì§ Answer:\n{response}")
                except Exception as e:
                    print(f"‚ùå Error: {e}")

# === Execute ===
if __name__ == "__main__":
    asyncio.run(main())
