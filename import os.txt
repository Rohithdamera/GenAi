i a getting below error to resolve that error , in Azure it need to follow below kind structure , just follow this structure , in my code keep prompt and validate prompt as it 


error:-

025-09-09T08:59:47.516Z] Worker failed to load function: 'XSLT_to_MULESOFT' with functionId: '39072859-91e1-4242-8794-3b8cd36c75a6'.
[2025-09-09T08:59:47.518Z] Result: Failure
Exception: RuntimeError: cannot load function XSLT_to_MULESOFT: function main() is not present in XSLT_to_MULESOFT\__init__.py
Stack:   File "C:\Users\rdamera\AppData\Roaming\npm\node_modules\azure-functions-core-tools\bin\workers\python\3.11\WINDOWS\X64\azure_functions_worker\dispatcher.py", line 546, in _handle__function_load_request
    func = loader.load_function(
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\rdamera\AppData\Roaming\npm\node_modules\azure-functions-core-tools\bin\workers\python\3.11\WINDOWS\X64\azure_functions_worker\utils\wrappers.py", line 44, in call
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\rdamera\AppData\Roaming\npm\node_modules\azure-functions-core-tools\bin\workers\python\3.11\WINDOWS\X64\azure_functions_worker\loader.py", line 224, in load_function
    raise RuntimeError(


reference code:-


import os
import logging
import json
import tempfile
import openpyxl
from base64 import b64decode
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage
from openpyxl.utils import column_index_from_string
import azure.functions as func

logger = logging.getLogger(__name__)

# AES Decryption
def decrypt(data, key):
    cipher = AES.new(b64decode(key), AES.MODE_ECB)
    decrypted_data = cipher.decrypt(b64decode(data))
    decrypted_data = unpad(decrypted_data, AES.block_size)
    return decrypted_data.decode()

# LangChain OpenAI Client
def get_openai_client(model_instance_name):
    aes_key_base64 = os.environ['AES_KEY']
    encrypted_api_base = os.environ['ENCRYPTED_API_BASE']
    encrypted_api_key = os.environ['ENCRYPTED_API_KEY']
    api_version = os.environ['AZURE_API_VERSION']

    decrypted_api_base = decrypt(encrypted_api_base, aes_key_base64)
    decrypted_api_key = decrypt(encrypted_api_key, aes_key_base64)

    if not decrypted_api_base.endswith('/'):
        decrypted_api_base += '/'

    return AzureChatOpenAI(
        deployment_name=model_instance_name,
        openai_api_base=decrypted_api_base,
        openai_api_key=decrypted_api_key,
        openai_api_version=api_version,
        temperature=0.4,
        max_tokens=4096
    )

def col_letter_to_index(col_letter):
    try:
        return column_index_from_string(col_letter.upper()) - 1
    except Exception as e:
        logger.error(f"Invalid column letter: {col_letter} - {str(e)}")
        return None

def extract_excel_data(file_path, sheet_name, source_col, logic_col, target_col):
    try:
        wb = openpyxl.load_workbook(file_path, data_only=True)
        sheet = wb[sheet_name]
        data = []
        for row in sheet.iter_rows(min_row=2, values_only=True):
            source = row[source_col] if source_col < len(row) else None
            logic = row[logic_col] if logic_col < len(row) else None
            target = row[target_col] if target_col < len(row) else None
            if source and target:
                data.append({
                    "source": source,
                    "logic": logic or "",
                    "target": target
                })
        return data
    except Exception as e:
        logger.error(f"Failed to extract Excel data: {e}")
        return []

def build_dataweave_prompt(data, file_name, sheet_name, source_col, target_col, logic_col):
    prompt = (
        f"Write a DataWeave script referring to the uploaded Excel file named {file_name}, "
        f"specifically the sheet named {sheet_name}.\n"
        f"- Column {source_col} contains source field details.\n"
        f"- Column {target_col} contains target field details.\n"
        f"- Column {logic_col} contains business logic for transformations.\n"
        "Use only functions from: https://docs.mulesoft.com/dataweave/latest/dw-functions#dw_modules\n\n"
        "Here is the extracted data:\n"
    )
    for row in data:
        prompt += f"- Source: {row['source']}, Target: {row['target']}, Logic: {row['logic']}\n"
    return prompt

def main(req: func.HttpRequest) -> func.HttpResponse:
    try:
        logger.info("DataWeave function triggered.")

        model_instance = req.headers.get("model_instance_name", "")
        if not model_instance:
            return func.HttpResponse("Missing 'model_instance_name' in headers.", status_code=400)

        file_name = req.params.get("file_name", "uploaded_file.xlsx")
        sheet_name = req.params.get("sheet_name")
        src_col = req.params.get("source_system_column")
        tgt_col = req.params.get("target_system_column")
        logic_col = req.params.get("business_logic_column")

        logger.info(f"Parameters: file={file_name}, sheet={sheet_name}, src={src_col}, tgt={tgt_col}, logic={logic_col}")

        # Validate all required query parameters
        if not all([sheet_name, src_col, tgt_col, logic_col]):
            return func.HttpResponse("Missing one or more required query parameters.", status_code=400)

        # Convert Excel column letters to index
        source_col_idx = col_letter_to_index(src_col)
        target_col_idx = col_letter_to_index(tgt_col)
        logic_col_idx = col_letter_to_index(logic_col)

        if None in [source_col_idx, target_col_idx, logic_col_idx]:
            return func.HttpResponse("Invalid column letters provided.", status_code=400)

        # Handle binary body (uploaded .xlsx file)
        body = req.get_body()
        if not body:
            return func.HttpResponse("No file content found in body.", status_code=400)

        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as temp_file:
            temp_file.write(body)
            temp_file_path = temp_file.name

        extracted_data = extract_excel_data(temp_file_path, sheet_name, source_col_idx, logic_col_idx, target_col_idx)

        if not extracted_data:
            return func.HttpResponse("No data extracted from Excel file.", status_code=400)

        prompt = build_dataweave_prompt(
            extracted_data,
            file_name, sheet_name, src_col, tgt_col, logic_col
        )

        instructions = """
As a seasoned expert in MuleSoft Integration Services, specialize in DataWeave transformations and advanced integration techniques.
Refer to this documentation for syntax: https://docs.mulesoft.com/dataweave/latest/dw-functions#dw_modules
"""

        full_prompt = instructions + "\n" + prompt

        client = get_openai_client(model_instance)
        response = client.invoke([
            HumanMessage(content=full_prompt),
            HumanMessage(content="Generate the DataWeave script.")
        ])

        return func.HttpResponse(response.content.strip(), status_code=200, mimetype="text/plain")

    except Exception as e:
        logger.error(f"Unhandled error: {str(e)}", exc_info=True)
        return func.HttpResponse(f"Error: {str(e)}", status_code=500)
