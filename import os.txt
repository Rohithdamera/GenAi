1. @Component
📌 What it is:
A class-level annotation.

Tells Spring: “Create and manage an instance of this class as a bean.”

✅ Use case:
Use it for your own classes — like services, repositories, or controllers.

💡 Example:
java
Copy
Edit
@Component
public class MyService {
    public void doWork() {
        System.out.println("Working...");
    }
}
Spring scans it (via @ComponentScan) and registers it as a bean.

It's automatically detected and injected where needed.

✅ 2. @Bean
📌 What it is:
A method-level annotation.

Tells Spring: “Register the return value of this method as a bean.”

✅ Use case:
When you don’t own the class (like a library class) or want more control over bean creation.

💡 Example:
java
Copy
Edit
@Configuration
public class AppConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate(); // manual creation
    }
}
Spring manages RestTemplate as a bean.

✅ 3. @Configuration
📌 What it is:
A class-level annotation.

Marks the class as a source of bean definitions.

It's a special type of @Component.

✅ Use case:
Use it to group multiple @Bean methods together in one place.
