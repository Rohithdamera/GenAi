import os
import logging
import json
import re
from base64 import b64decode
import openai

logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Initialize OpenAI client
def get_openai_client():
    openai.api_key = os.environ['OPENAI_API_KEY']
    return openai

# Extract just the class name for use in prompts
def extract_class_name(java_code):
    match = re.search(r'public\s+class\s+(\w+)', java_code)
    return match.group(1) if match else "UnknownClass"

# Lambda handler
def lambda_handler(event, context):
    try:
        logger.info("Received event")

        if 'body' not in event or 'isBase64Encoded' not in event or not event['isBase64Encoded']:
            return {
                "statusCode": 400,
                "body": json.dumps({"error": "File content is missing or not base64-encoded."})
            }

        # Decode Java file
        java_code = b64decode(event['body']).decode('utf-8')

        # Build prompt
        class_name = extract_class_name(java_code)
        prompt = (
            f"You are a Java expert. Generate a complete JUnit 5 test class for the following Java class named {class_name}. "
            f"Ensure the test methods are meaningful, mock dependencies if needed, and cover edge cases. "
            f"Do not include any explanations or comments. Just return the code.\n\n{java_code}"
        )

        # Get response from OpenAI
        client = get_openai_client()
        response = client.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )

        # Extract and return only the code block
        content = response.choices[0].message.content.strip()
        code_match = re.search(r"```(?:java)?\n?(.*?)```", content, re.DOTALL)
        junit_code = code_match.group(1).strip() if code_match else content

        return {
            "statusCode": 200,
            "headers": {"Content-Type": "text/plain"},
            "body": junit_code
        }

    except Exception as e:
        logger.error("Error: %s", str(e))
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }
