import os
import re
import shutil
from pathlib import Path
import gradio as gr

from langchain_openai import AzureChatOpenAI
from langchain.tools import Tool

# === Azure OpenAI Client ===
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="gpt-4_complex_conversions",
        openai_api_key="",
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        temperature=0.3,
        max_tokens=2000,
    )

llm = get_openai_client()

# === Default Output Folder ===
OUTPUT_BASE = r"C:\Users\rdamera\Downloads\dddd"

# === Tool 1: Copy & Replace Project Structure ===
def copy_and_replace_structure(reference_path: str, old_name: str, new_name: str) -> str:
    ref_path = Path(reference_path)
    if not ref_path.exists():
        raise FileNotFoundError(f"Reference project not found: {reference_path}")

    dest_path = Path(OUTPUT_BASE) / new_name
    if dest_path.exists():
        shutil.rmtree(dest_path)
    dest_path.mkdir(parents=True, exist_ok=True)

    for root, dirs, files in os.walk(ref_path):
        rel_path = Path(root).relative_to(ref_path)

        # Replace old name in folder path (for packages and directories)
        rel_path_parts = [part.replace(old_name, new_name) for part in rel_path.parts]
        target_dir = dest_path.joinpath(*rel_path_parts)
        target_dir.mkdir(parents=True, exist_ok=True)

        for file in files:
            src_file = Path(root) / file

            # Replace old name in file name
            new_file_name = file.replace(old_name, new_name)
            target_file = target_dir / new_file_name

            # Copy and replace inside text-based files
            if file.endswith((".java", ".xml", ".yml", ".properties", ".gradle", ".md")) or file == "pom.xml":
                try:
                    content = src_file.read_text(encoding="utf-8")

                    # Replace all occurrences of old name with new name
                    content = content.replace(old_name, new_name)

                    # If Java main class: rename class declaration
                    if file.endswith(".java") and "public static void main" in content:
                        content = re.sub(
                            r"class\s+\w+",
                            f"class {new_name}Application",
                            content
                        )
                        # also update package if it contains old name
                        content = content.replace(old_name, new_name)

                    target_file.write_text(content, encoding="utf-8")
                except Exception:
                    shutil.copy2(src_file, target_file)  # fallback copy
            else:
                shutil.copy2(src_file, target_file)

    return f"âœ… Project '{new_name}' created at {dest_path}, with all '{old_name}' replaced in folders, files, and main class."

# === Tool 2: Parse User Input for Command ===
def parse_command(user_input: str) -> dict:
    """
    Parse input like:
    generate a java project with AWS_connector takes this path as reference C:\\Users\\me\\cg-os-salesforce-opportunity
    """
    match_path = re.search(r"([A-Za-z]:[\\/\w\-. ]+)", user_input)
    match_name = re.search(r"(with name|with|called|with)\s+([\w_]+)", user_input, re.IGNORECASE)

    if not match_path or not match_name:
        raise ValueError("Invalid input format. Provide both project path and new project name.")

    reference_path = match_path.group(1).strip()
    new_project_name = match_name.group(2).strip().replace(" ", "_")

    # old name = last folder in reference path
    old_project_name = Path(reference_path).name

    return {
        "reference_path": reference_path,
        "old_project_name": old_project_name,
        "new_project_name": new_project_name
    }

# === Tool 3: Orchestrator ===
def process_user_request(user_input: str, history):
    try:
        cmd = parse_command(user_input)
        return copy_and_replace_structure(cmd["reference_path"], cmd["old_project_name"], cmd["new_project_name"])
    except Exception as e:
        return f"[ERROR] {str(e)}"

# === Register Tools ===
tools = [
    Tool(name="CopyAndReplaceProject", func=copy_and_replace_structure, description="Copies a Java project, replaces names in folders, files, and main class."),
]

# === Gradio UI ===
chatbot_ui = gr.ChatInterface(
    fn=process_user_request,
    title="Java Project Generator",
    description="Generate a new Java project by replacing names in a reference project (folders, files, packages, main class).",
    theme="default",
)

if __name__ == "__main__":
    chatbot_ui.launch()
