import os
import xml.etree.ElementTree as ET
from langchain_openai import AzureChatOpenAI
from langchain.schema import HumanMessage

# Azure OpenAI configuration
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="Fourth_Chatbot",
        openai_api_key="",  # Insert your Azure OpenAI key here
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        max_tokens=2000,
        temperature=0.7,
        top_p=0.9,
        frequency_penalty=0.2,
        presence_penalty=0.1
    )

# Find all XML files inside "mule" folders recursively
def find_all_mule_xml_files(folder_path):
    xml_files = []
    for root, _, files in os.walk(folder_path):
        if "mule" in root.lower():
            for file in files:
                if file.endswith(".xml"):
                    xml_files.append(os.path.join(root, file))
    return xml_files

# Summarize content of one XML file
def summarize_xml_file(xml_path):
    client = get_openai_client()
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()

        header = f"Root Tag: {root.tag}\nNamespaces: {root.attrib}\n"
        body = ET.tostring(root, encoding='unicode', method='xml')

        header_prompt = (
            "You are an expert in analyzing MuleSoft XML configurations. "
            "Analyze the header of this XML file, including root tag and namespaces, "
            "and explain its purpose, usage, and significance in the context of MuleSoft. Use examples where applicable."
        )

        body_prompt = (
            "Now analyze the entire body of the MuleSoft XML configuration. "
            "Describe each component, connector, and transformation. "
            "Explain how data flows, how processors interact, and the logic behind each step. Be thorough and detailed."
        )

        header_summary = get_summary_from_openai(client, header_prompt, header)
        body_summary = get_summary_from_openai(client, body_prompt, body)

        final_summary = combine_summaries(header_summary, body_summary)
        return final_summary

    except ET.ParseError as e:
        return f"Error parsing {xml_path}: {str(e)}"
    except Exception as e:
        return f"Unexpected error processing {xml_path}: {str(e)}"

# Send prompt to Azure OpenAI
def get_summary_from_openai(client, prompt, content):
    response = client.invoke([HumanMessage(content=prompt + "\n\n" + content)])
    return response.content

# Combine header and body summaries
def combine_summaries(header_summary, body_summary):
    return (
        f"## Header Analysis ##\n{header_summary}\n\n"
        f"## Body Analysis ##\n{body_summary}\n\n"
        f"## Final Insights ##\n"
        "Combine your understanding from the header and body to explain the overall purpose of the XML file. "
        "Include the type of flow, data source/target, and main business logic. Be concise but comprehensive."
    )

# Main execution
if __name__ == "__main__":
    project_root = r"C:\Users\rdamera\Downloads\concur-journalentry-srvc-app\concur-journalentry-srvc-app"
    try:
        print("Scanning for MuleSoft XML files...\n")
        xml_files = find_all_mule_xml_files(project_root)

        if not xml_files:
            print("No MuleSoft XML files found in the specified project.")
        else:
            for xml_path in xml_files:
                print(f"\nProcessing: {xml_path}")
                summary = summarize_xml_file(xml_path)
                print(f"\nSummary for {os.path.basename(xml_path)}:\n{summary}\n" + "-"*100)
    except Exception as e:
        print(f"An error occurred: {str(e)}")
