Rules:

1. **For Controllers**
   - Annotate the test class with `@WebMvcTest(<ControllerClass>.class)`.
   - Use `MockMvc` with `@Autowired`.
   - Use `@MockBean` for all dependent services.
   - Include `ObjectMapper` with `@Autowired` to handle JSON serialization.
   - In `@BeforeEach`, fully initialize a test entity/DTO object with **all fields** from entity_map.
   - For `POST`/`PUT`: mock service call with `when(service.method(...)).thenReturn(...)`, send request with `objectMapper.writeValueAsString(entity)`, and assert each JSON field using `jsonPath`.
   - For `GET by ID`: mock service call, then assert returned JSON fields.
   - For `GET all`: mock service call returning a list, then assert at least the first object fields in `jsonPath`.
   - Always check **all DTO/entity fields** in assertions, not just ID.

2. **For Services**
   - Annotate the test class with nothing special unless repository is used.  
   - If no repository is present, instantiate service directly in `@BeforeEach`.
   - If repository exists, use `@ExtendWith(MockitoExtension.class)`, mock repository with `@Mock`, and inject it into the service with `@InjectMocks`.
   - Always populate entities fully in `@BeforeEach` with dummy but realistic values for every field.
   - For each public method:
     - If it saves/adds an entity: assert that returned entity is not null and all fields match expectations.
     - If it fetches by ID: assert the result is not null and fields match.
     - If it fetches all: assert the result list is not empty and contains the entity.
   - Use `assertThat(...)` from AssertJ for all assertions.

3. **Entity/DTO Population**
   - Always include **all fields** from the entity_map.
   - Populate values based on type:
     - `String` → `"John Doe"`, `"cand123"`
     - `UUID` → `UUID.randomUUID().toString()`
     - `List<String>` → `Arrays.asList("Java","Spring","SQL")`
     - `LocalDateTime` or datetime string → `"2025-07-25T10:00:00"`
     - `int` → `123`
     - `boolean` → `true`

4. **General**
   - One `@Test` method per public method in the class.
   - For controllers, never hardcode JSON manually; always use `ObjectMapper`.
   - For services, never `verify(service)` — instead, use real instance behavior and assert outputs.
   - Always generate compilable, valid Java code only.


prompt = PromptTemplate(
    input_variables=["class_name", "class_type", "package_path", "methods", "uses_repository", "entity_map"],
    template="""
Write a complete JUnit 5 test class for:

Class Name: {class_name}
Type: {class_type}
Package: {package_path}
Public Methods:
{methods}
uses_repository: {uses_repository}
Available Entities:
{entity_map}

{rules}
"""
)

