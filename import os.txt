import os
import xml.etree.ElementTree as ET
from pathlib import Path
from langchain.chat_models import AzureChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

# ========== Configuration ==========
AZURE_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")
DEPLOYMENT_NAME = os.getenv("AZURE_DEPLOYMENT_NAME")
API_KEY = os.getenv("AZURE_API_KEY")
API_VERSION = "2024-08-01-preview"
PROJECT_PATH = os.getenv("PROJECT_PATH", r"C:\Users\rdamera\Downloads\OrderManagement 1")
MULE_FOLDER = Path(PROJECT_PATH) / "src" / "main" / "mule"

# ========== Azure OpenAI Client ==========
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint=AZURE_ENDPOINT,
        deployment_name=DEPLOYMENT_NAME,
        openai_api_key=API_KEY,
        openai_api_version=API_VERSION,
        openai_api_type="azure",
        temperature=0.7,
        max_tokens=2000,
        top_p=0.9,
        frequency_penalty=0.2,
        presence_penalty=0.1,
    )

# ========== XML Utilities ==========
def find_all_mule_xml_files(folder_path: Path) -> list[str]:
    return [str(p) for p in folder_path.rglob("*.xml")]

def read_xml_file(file_path: str) -> str:
    try:
        tree = ET.parse(file_path)
        root = tree.getroot()
        return ET.tostring(root, encoding="unicode", method="xml")
    except Exception as e:
        return f"Error reading {file_path}: {str(e)}"

# ========== Summarization Chains ==========
def summarize_xml(xml_content: str) -> str:
    prompt = PromptTemplate(
        input_variables=["xml_content"],
        template="""You are an expert in MuleSoft XML configuration. Analyze the following XML and summarize its key logic, flows, and components.

{xml_content}
"""
    )
    chain = LLMChain(llm=get_openai_client(), prompt=prompt)
    return chain.run(xml_content=xml_content)

def generate_final_summary(combined_summaries: str) -> str:
    prompt = PromptTemplate(
        input_variables=["combined_summaries"],
        template="""You are an expert in summarizing MuleSoft configuration files.
Provide a detailed, clear, and educational summary that explains the integration logic, components involved, and the purpose of the flows in simple language.

{combined_summaries}
"""
    )
    chain = LLMChain(llm=get_openai_client(), prompt=prompt)
    return chain.run(combined_summaries=combined_summaries)

# ========== Main Execution ==========
def main():
    xml_files = find_all_mule_xml_files(MULE_FOLDER)
    summaries = []

    for file_path in xml_files:
        xml_content = read_xml_file(file_path)
        if not xml_content.startswith("Error"):
            summary = summarize_xml(xml_content)
            summaries.append(summary)

    combined = "\n\n".join(summaries)
    final_summary = generate_final_summary(combined)
    
    print("\n======= FINAL SUMMARY =======\n")
    print(final_summary)

if __name__ == "__main__":
    main()
