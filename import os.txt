INFO:httpx:HTTP Request: GET https://employee-mcp-v1-6b0n96.dw4w1g-2.gbr-e1.cloudhub.io/sse "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: POST https://employee-mcp-v1-6b0n96.dw4w1g-2.gbr-e1.cloudhub.io/message?sessionId=bacfa389-9abc-439d-b0cc-1211fc2f6829 "HTTP/1.1 202 "
---------------------------------------------------------------------------
ClosedResourceError                       Traceback (most recent call last)
Cell In[31], line 93
     91 # --- 6. Run ---
     92 if __name__ == "__main__":
---> 93     asyncio.run(main())

File ~\AppData\Roaming\Python\Python311\site-packages\nest_asyncio.py:30, in _patch_asyncio.<locals>.run(main, debug)
     28 task = asyncio.ensure_future(main)
     29 try:
---> 30     return loop.run_until_complete(task)
     31 finally:
     32     if not task.done():

File ~\AppData\Roaming\Python\Python311\site-packages\nest_asyncio.py:98, in _patch_loop.<locals>.run_until_complete(self, future)
     95 if not f.done():
     96     raise RuntimeError(
     97         'Event loop stopped before Future completed.')
---> 98 return f.result()

File C:\Program Files\Python311\Lib\asyncio\futures.py:203, in Future.result(self)
    201 self.__log_traceback = False
    202 if self._exception is not None:
--> 203     raise self._exception.with_traceback(self._exception_tb)
    204 return self._result

File C:\Program Files\Python311\Lib\asyncio\tasks.py:277, in Task.__step(***failed resolving arguments***)
    273 try:
    274     if exc is None:
    275         # We use the `send` method directly, because coroutines
    276         # don't have `__iter__` and `__next__` methods.
--> 277         result = coro.send(None)
    278     else:
    279         result = coro.throw(exc)

Cell In[31], line 68, in main()
     66 # Initialize MCP session
     67 session = await init_mcp_session(sse_url)
---> 68 tool_names = await fetch_tool_names(session)
     69 print(f"⚙️ Available MCP tools: {tool_names}")
     71 tools = make_tools(session, tool_names)

Cell In[31], line 33, in fetch_tool_names(session)
     32 async def fetch_tool_names(session: ClientSession) -> List[str]:
---> 33     info = await session.list_tools()
     34     return [t.name for t in getattr(info, "tools", [])]

File ~\AppData\Roaming\Python\Python311\site-packages\mcp\client\session.py:324, in ClientSession.list_tools(self, cursor)
    322 async def list_tools(self, cursor: str | None = None) -> types.ListToolsResult:
    323     """Send a tools/list request."""
--> 324     return await self.send_request(
    325         types.ClientRequest(
    326             types.ListToolsRequest(
    327                 method="tools/list",
    328                 params=types.PaginatedRequestParams(cursor=cursor) if cursor is not None else None,
    329             )
    330         ),
    331         types.ListToolsResult,
    332     )

File ~\AppData\Roaming\Python\Python311\site-packages\mcp\shared\session.py:261, in BaseSession.send_request(self, request, result_type, request_read_timeout_seconds, metadata, progress_callback)
    254 try:
    255     jsonrpc_request = JSONRPCRequest(
    256         jsonrpc="2.0",
    257         id=request_id,
    258         **request_data,
    259     )
--> 261     await self._write_stream.send(SessionMessage(message=JSONRPCMessage(jsonrpc_request), metadata=metadata))
    263     # request read timeout takes precedence over session read timeout
    264     timeout = None

File ~\AppData\Roaming\Python\Python311\site-packages\anyio\streams\memory.py:242, in MemoryObjectSendStream.send(self, item)
    240 await checkpoint()
    241 try:
--> 242     self.send_nowait(item)
    243 except WouldBlock:
    244     # Wait until there's someone on the receiving end
    245     send_event = Event()

File ~\AppData\Roaming\Python\Python311\site-packages\anyio\streams\memory.py:211, in MemoryObjectSendStream.send_nowait(self, item)
    199 """
    200 Send an item immediately if it can be done without waiting.
    201 
   (...)    208 
    209 """
    210 if self._closed:
--> 211     raise ClosedResourceError
    212 if not self._state.open_receive_channels:
    213     raise BrokenResourceError

ClosedResourceError: 
