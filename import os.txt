import gradio as gr
from langchain_openai import AzureChatOpenAI
 
# === Hardcoded connector YAMLs ===
connector_snippets = {
    "salesforce": """Salesforce connector:
core:
  connectors:
    sfdc:
      authUrl: https://login.salesforce.com
      username: your-username
      password: your-password
      client_id: your-client_id
      client_secret: your-client-secret
      grant_type: password
      queryUrl: /
      version: v53.0""",
    "sqs": """SQS connector:
aws.region :""",
    "crossaccountsqs": """CrossAccountSQS connector:
aws.region :
crossaccount.clientId :
crossaccount.clientSecret :""",
    "s3": """S3 connector:
aws.region :""",
    "common-api-library": """common-api-library :
apiName :
apiVersion :
mandatoryHeader.skipValidation :
mandatoryHeader.excludePath :"""
}
 
# === Azure OpenAI Client ===
def get_openai_client():
    return AzureChatOpenAI(
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        deployment_name="gpt-4_complex_conversions",
        openai_api_key="",
        openai_api_version="2024-08-01-preview",
        openai_api_type="azure",
        temperature=0.3,
        max_tokens=2000,
    )
 
llm = get_openai_client()
 
# === Detect connector-related question ===
def detect_connector_question(message: str) -> str:
    message_lower = message.lower()
    if "salesforce" in message_lower or "sfdc" in message_lower:
        return connector_snippets["salesforce"]
    elif "sqs" in message_lower and "cross" in message_lower:
        return connector_snippets["crossaccountsqs"]
    elif "sqs" in message_lower:
        return connector_snippets["sqs"]
    elif "s3" in message_lower:
        return connector_snippets["s3"]
    elif "common api" in message_lower or "common-api-library" in message_lower:
        return connector_snippets["common-api-library"]
    return "No matching connector found. Please ask about Salesforce, SQS, CrossAccountSQS, S3, or common-api-library."
 
# === Java Client Class Generator ===
def generate_client_class(prompt: str, java_file) -> str:
    try:
        with open(java_file.name, "r", encoding="utf-8") as f:
            java_code = f.read()
 
        full_prompt = (
            "You are a senior Java developer. A developer will provide you with a Java class. "
            "Analyze the java code and create client class for that. Use constructor injection and annotations also. "
            "Include the method connectToSalesforce which prints access token and instance URL, and handles exceptions. "
            "Do not include explanations or comments. Output only the Java class code. "
            f"\n\nPrompt: {prompt}\n\nHere is the Java class:\n\n{java_code}"
        )
 
        response = llm.invoke(full_prompt)
        return response.content.strip()
 
    except Exception as e:
        return f"[ERROR] Failed to process Java file: {str(e)}"
 
# === Unified Chatbot Function ===
def unified_chatbot(message, history, java_file=None):
    if java_file is not None:
        return generate_client_class(message, java_file)
    else:
        return detect_connector_question(message)
 
# === Gradio Chat Interface ===
chatbot_ui = gr.ChatInterface(
    fn=unified_chatbot,
    title="Connector & Java Client Assistant",
    description=(
        "Ask about connector configuration formats (e.g., Salesforce, SQS, S3, etc.)\n"
        "Or upload a Java class file and enter a prompt like: `create client class`"
    ),
    additional_inputs=[
        gr.File(label="Upload Java File", file_types=[".java"])
    ],
    theme="default"
)
 
# === Launch App ===
if __name__ == "__main__":
    print("Starting Combined Assistant...")
    chatbot_ui.launch()
 
