import logging
import json
import re
import azure.functions as func
from langchain_community.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage
from langchain.callbacks import get_openai_callback

logger = logging.getLogger(__name__)

CONFIG = {
    "azure_openai": {
        "endpoint": "https://testopenaiassets.openai.azure.com",
        "deployment_name": "o4-mini-mulesoft",
        "api_key": "<PUT-YOUR-AZURE-OPENAI-KEY-HERE>",
        "api_version": "2025-01-01-preview",
        "api_type": "azure"
    }
}

def get_openai_client(config):
    return AzureChatOpenAI(
        deployment_name=config["deployment_name"],
        openai_api_base=config["endpoint"],
        openai_api_key=config["api_key"],
        openai_api_version=config["api_version"],
        temperature=1,
    )

conversion_prompt = {
    "xslt_to_dwl": (""" 
    You are a **MuleSoft DataWeave (DWL) script generator**.  
    Your job: **convert the provided XSLT into an equivalent Dataweave script** that reproduces the same transformation.
    [KEEP YOUR FULL PROMPT HERE]
    """.strip())
}

validateprompt = """ 
You are a **MuleSoft DataWeave (DWL) script generator**.  
Your job: **remove the syntax errors found in the provided DataWeave (DWL) script and produce an error free DataWeave (DWL) script**
[KEEP YOUR FULL VALIDATE PROMPT HERE]
"""

def clean_response(raw: str) -> str:
    cleaned = re.sub(r"```(?:[Dd]ataWeave)?", "", raw)
    return cleaned.strip()

def generate_and_validate_script(client, file_content, agent_name):
    messages = [
        SystemMessage(content=conversion_prompt["xslt_to_dwl"]),
        HumanMessage(content=file_content)
    ]

    with get_openai_callback() as cb:
        result = client.invoke(messages)
        final_response = clean_response(result.content)

        final_response += "\n\n--- Token Usage ---"
        final_response += f"\nTotal Tokens: {cb.total_tokens}"
        final_response += f"\nPrompt Tokens: {cb.prompt_tokens}"
        final_response += f"\nCompletion Tokens: {cb.completion_tokens}"
        final_response += f"\nTotal Cost (USD): ${format(cb.total_cost, '.6f')}"
        return final_response

def main(req: func.HttpRequest) -> func.HttpResponse:
    logger.info("Processing XSLT to DWL request in Azure Function.")

    try:
        file_bytes = req.get_body()
        if not file_bytes:
            return func.HttpResponse(
                "No file uploaded in request body.",
                status_code=400
            )

        file_content = file_bytes.decode("utf-8", errors="ignore")
        client = get_openai_client(CONFIG["azure_openai"])
        result = generate_and_validate_script(client, file_content, "xslt_to_dwl")

        # return as plain text (line breaks preserved)
        return func.HttpResponse(result, status_code=200, mimetype="text/plain")

    except Exception as e:
        logger.error(f"Error in Azure Function: {e}", exc_info=True)
        return func.HttpResponse(f"Error: {str(e)}", status_code=500)