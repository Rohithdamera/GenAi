import asyncio
import json
import nest_asyncio
from mcp import ClientSession
from mcp.client.sse import sse_client
from langchain.chat_models import AzureChatOpenAI
from langchain.agents import Tool, AgentExecutor, initialize_agent
from langchain.agents.agent_types import AgentType

nest_asyncio.apply()

# === OpenAI Client ===
def get_openai_client():
    return AzureChatOpenAI(
        azure_deployment="Fourth_Chatbot",
        azure_endpoint="https://testopenaiassets.openai.azure.com",
        openai_api_version="2024-08-01-preview",
        openai_api_key="",  # your key here
        temperature=0.2,
        max_tokens=2000,
    )

sse_url = "https://employee-mcp-v1-6b0n6.dw4w1g-2.gbr-e1.cloudhub.io/sse"

# === Sync Tool Caller ===
def sync_call_tool(name: str, params: dict) -> dict:
    async def call():
        async with sse_client(url=sse_url) as streams:
            async with ClientSession(*streams) as session:
                await session.initialize()
                return await session.call_tool(name, params)
    return asyncio.get_event_loop().run_until_complete(call())

# === Build Tools With Auto-defaults ===
def get_tools():
    info = sync_call_tool("list_tools", {})
    tools = []
    for td in getattr(info, "tools", []):
        name = td["name"]
        schema = td.get("inputSchema", {})
        req = schema.get("required", [])

        description = td.get("description", "")
        if req:
            description += f" (requires {req})"
        
        def make_func(tool_name=name, r=req):
            def fn(s: str) -> str:
                data = json.loads(s) if s else {}
                # Auto-default missing params to empty or wildcard
                for k in r:
                    data.setdefault(k, "")
                res = sync_call_tool(tool_name, data)
                return json.dumps(res)
            return fn

        tools.append(Tool(
            name=name,
            description=description,
            func=make_func(),
            return_direct=False
        ))

    return tools

# === Build Agent ===
def build_agent():
    tools = get_tools()
    llm = get_openai_client()
    agent = initialize_agent(
        tools=tools,
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        verbose=True,
        max_iterations=6,
        return_intermediate_steps=False
    )
    return agent

# === Main Loop ===
if __name__ == "__main__":
    print("=== MCP Auto-fetch Agent ===")
    agent = build_agent()
    while True:
        q = input("\nYour question: ").strip()
        if q.lower() in ("exit", "quit"):
            break
        try:
            resp = agent.invoke({"input": q})
            print("\nüß† Answer:\n", resp["output"])
        except Exception as e:
            print("‚ùå Error:", e)
